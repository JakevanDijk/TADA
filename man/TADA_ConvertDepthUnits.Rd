% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/UnitConversions.R
\name{TADA_ConvertDepthUnits}
\alias{TADA_ConvertDepthUnits}
\title{Convert Depth Units}
\usage{
TADA_ConvertDepthUnits(
  .data,
  unit = "m",
  fields = c("ActivityDepthHeightMeasure", "ActivityTopDepthHeightMeasure",
    "ActivityBottomDepthHeightMeasure", "ResultDepthHeightMeasure"),
  transform = TRUE
)
}
\arguments{
\item{.data}{TADA dataframe}

\item{unit}{Character string input indicating the target depth unit to use for
conversions. Allowable values for 'unit' are either "m" (meters), "ft" (feet),
or "in" (inches). 'unit' accepts only one allowable value as an input. The
default unit = "m".}

\item{fields}{Character string input indicating the relevant depth data fields
that will be converted to the desired target unit in new TADA column. Allowable
values for 'fields' are "ActivityDepthHeightMeasure", "ActivityTopDepthHeightMeasure",
"ActivityBottomDepthHeightMeasure", and "ResultDepthHeightMeasure". The default
is to include all depth fields.}

\item{transform}{Boolean argument; The default is transform = TRUE.
When transform = TRUE, all depth data is converted to the target unit; and
no additional columns are added. When transform = FALSE, where depth data
is populated, the function appends columns indicating the target unit and
conversion factor for each row; and for each depth field. No conversions are
done at this time. A user can review the conversion factor information if
desired by using this feature.}
}
\value{
When transform = TRUE, the input dataframe is returned with all depth
data converted to the target unit in new TADA-specific columns.
When transform = FALSE, the input dataframe is returned with additional
columns showing how the data would be handled when converted.
}
\description{
#'The \strong{TADA_ConvertDepthUnits} function converts depth units to a consistent
unit. Depth values and units are most commonly associated with lake
data, and are populated in the \emph{ActivityDepthHeightMeasure},
\emph{ActivityTopDepthHeightMeasure}, \emph{ActivityBottomDepthHeightMeasure}, and
\emph{ResultDepthHeightMeasure} Result Value/Unit columns.
}
\details{
This function first checks the dataframe for depth profile data. Where depth
profile columns are populated, the function appends 'Conversion Factor'
columns and populates those columns based on the original unit and the target
unit, which is defined in the 'unit' argument. A 'Depth Target Unit' column
is also appended, indicating the unit all selected depth data is converted
to. When transform = FALSE, the output includes all 'Conversion Factor'
columns and the 'Depth Target Unit' column. When transform = TRUE, the output
includes converted depth data in a column with the same name as the original,
plus the prefix "TADA." and a 'Depth Target Unit' column, which acts as a
flag indicating which rows have been converted. New columns are only created
if there are values/units in the column(s) of interest. Default is transform
= TRUE.

The depth profile function can harmonize the depth units across all the
following fields (or only a specific one): "ActivityDepthHeightMeasure",
"ActivityTopDepthHeightMeasure", "ActivityBottomDepthHeightMeasure",
"ResultDepthHeightMeasure"). It creates new result value/unit columns
with the prefix "TADA." to all converted columns. The default is to
check all four Depth Height columns.

Allowable values for 'unit' are either 'm' (meter), 'ft' (feet), or 'in'
(inch). 'unit' accepts only one allowable value as an input. Default is
unit = "m".
}
\examples{
# Load example dataset:
data(Data_Nutrients_UT)

# Convert all depth units to meters:
DepthUnitsConverted_m <- TADA_ConvertDepthUnits(Data_Nutrients_UT)

# Convert all depth units to feet:
DepthUnitsConverted_ft <- TADA_ConvertDepthUnits(Data_Nutrients_UT, unit = "ft")

# Convert only the "TADA.ActivityTopDepthHeightMeasure" field to inches:
TopDepthUnitsConverted_in <- TADA_ConvertDepthUnits(Data_Nutrients_UT,
  unit = "in", fields = "ActivityTopDepthHeightMeasure"
)

# Do not convert any depth units, but add columns for target units and
# conversion factors for each depth measure:
DepthUnitsNotConverted <- TADA_ConvertDepthUnits(Data_Nutrients_UT, transform = FALSE)

}
