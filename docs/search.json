[{"path":"usepa.github.io/TADA/articles/CONTRIBUTING.html","id":"contribute-to-tada","dir":"Articles","previous_headings":"","what":"Contribute to TADA!","title":"Contributing","text":"encourage read project’s CONTRIBUTING policy (), LICENSE, README. ’re glad ’re thinking contributing EPA open source project! ’re unsure anything, just ask — submit issue pull request anyway. worst can happen ’ll politely ask change something. appreciate friendly contributions. matter , spot error, omission, bug, ’re welcome open issue repo!","code":""},{"path":"usepa.github.io/TADA/articles/CONTRIBUTING.html","id":"package-development","dir":"Articles","previous_headings":"","what":"Package Development","title":"Contributing","text":"article walk contribute TADA package. use git-forking workflow, full git tutorial. also complete guide R package development (comprehensive guide R Packages), instead meant checklist general steps. Several references included bottom information R-package development git workflows.","code":""},{"path":"usepa.github.io/TADA/articles/CONTRIBUTING.html","id":"what-is-github","dir":"Articles","previous_headings":"","what":"What is GitHub?","title":"Contributing","text":"GitHub third-party website offers version-controlled repositories developers scientists can use collaborate projects (e.g., software, text, manuscripts, etc.) real-time. GitHub also provides social networking features allow developers follow open-source projects, share code learn code changes made throughout development process. GitHub named utilizes open-source version control system (VCS) known Git. Setting Git Git Basics Comprehensive Guide: Happy Git GitHub useR","code":""},{"path":"usepa.github.io/TADA/articles/CONTRIBUTING.html","id":"required-installations","dir":"Articles","previous_headings":"","what":"Required Installations","title":"Contributing","text":"several programs needed work can begin. admin access computer, can install , otherwise create ticket group following requests. links provided assume Windows computer. Adjustments might needed Mac Linux OS: R RStudio Rtools Git installed, following R packages needed R-package development work:","code":"install.packages(c(\"devtools\", \"rmarkdown\"))"},{"path":"usepa.github.io/TADA/articles/CONTRIBUTING.html","id":"issues","dir":"Articles","previous_headings":"","what":"Issues","title":"Contributing","text":"see error feedback, best way let us know file issue. Issues labeled help indicate . example, using “Good First Issue” indicate issues might good first pickings first contribution open-source project. Pull requests can directly linked specific issue. linked, Repository Administrators can easily review pull request issue time contributor submits pull request. issue can closed pull request merged.","code":""},{"path":"usepa.github.io/TADA/articles/CONTRIBUTING.html","id":"branches","dir":"Articles","previous_headings":"","what":"Branches","title":"Contributing","text":"new development currently happens develop branch. contribute specific change new code, outside contributors can fork repo develop branch, simply create new branch. Contributors work personal fork /branch, one specific “task” time. complete, submit pull request, request changes merged branch TADA develop branch. Contributors submit separate pull request “task”. “Tasks” small scope. example, may pertain bug fix update relevant single function. single “task” may also encompass changes made across many functions needed. Another example single “task” make changes documentation improve clarity, example. Furthermore, task may include developing new function, series related functions. cases, tasks can also synonymous issues, pull requests can directly linked specific issue (case, Repository Administrators review pull request issue time issue can closed pull request merged). Complete pull request detailing fixes contributions, tagging TADA repo admins review work. package, please tag cristinamullin (Cristina Mullin) mthawley (Shelly Thawley). Repository Administrators review code contributions internal EPA external collaborators integrate code commits source code. done ensure code stability consistency prevent degradation code performance. review, admin either accept submission, recommend specific improvements submission, cases reject submission. avoid issues, developers contributing code contact repository admins (Cristina Shelly) early development process maintain contact throughout help ensure submission compatible code base robust addition.","code":""},{"path":"usepa.github.io/TADA/articles/CONTRIBUTING.html","id":"additional-references","dir":"Articles","previous_headings":"","what":"Additional References","title":"Contributing","text":"R Packages testthat R markdown","code":""},{"path":"usepa.github.io/TADA/articles/CONTRIBUTING.html","id":"open-source-code-policy","dir":"Articles","previous_headings":"","what":"Open-Source Code Policy","title":"Contributing","text":"Effective August 8, 2016, OMB Mandate: M-16-21; Federal Source Code Policy: Achieving Efficiency, Transparency, Innovation Reusable Open Source Software applies new custom-developed code created procured EPA consistent scope applicability requirements Office Management Budget’s (OMB’s) Federal Source Code Policy. general, states new custom-developed code Federal Agencies made available reusable open-source code. EPA specific implementation OMB Mandate M-16-21 addressed System Life Cycle Management Procedure. EPA chosen use GitHub version control system well inventory open-source code projects. EPA uses GitHub inventory custom-developed, open-source code generate necessary metadata file posted code.gov broad reuse compliance OMB Mandate M-16-21. questions want read , check EPA Open Source Project Repo.","code":""},{"path":"usepa.github.io/TADA/articles/CONTRIBUTING.html","id":"license","dir":"Articles","previous_headings":"","what":"License","title":"Contributing","text":"contributions project released CCO-1.0 license file dedication. submitting pull request issue, agreeing comply waiver copyright interest.","code":""},{"path":"usepa.github.io/TADA/articles/CONTRIBUTING.html","id":"disclaimer","dir":"Articles","previous_headings":"","what":"Disclaimer","title":"Contributing","text":"United States Environmental Protection Agency (EPA) GitHub project code provided “” basis user assumes responsibility use. EPA relinquished control information longer responsibility protect integrity, confidentiality, availability information. reference specific commercial products, processes, services service mark, trademark, manufacturer, otherwise, constitute imply endorsement, recommendation favoring EPA. EPA seal logo shall used manner imply endorsement commercial product activity EPA United States Government.","code":""},{"path":"usepa.github.io/TADA/articles/CONTRIBUTING.html","id":"contact","dir":"Articles","previous_headings":"","what":"Contact","title":"Contributing","text":"questions, please reach Cristina Mullin (mullin.cristina@epa.gov).","code":""},{"path":"usepa.github.io/TADA/articles/WQPDataHarmonization.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"WQP Data Harmonization","text":"vignette walk discover, wrangle, QAQC, harmonize Water Quality Portal (WQP) data multiple organizations.","code":""},{"path":"usepa.github.io/TADA/articles/WQPDataHarmonization.html","id":"install-and-load-packages","dir":"Articles","previous_headings":"","what":"Install and load packages","title":"WQP Data Harmonization","text":"install TADA, currently need install GitHub using remotes (shown) devtools. First, install load “remotes” package specifying repo. needed installing TADA available GitHub (CRAN). Next, install load TADA. dataRetrieval TADA R Package dependencies also downloaded CRAN TADA install, development version can downloaded directly GitHub desired (un-comment).","code":"install.packages(\"remotes\", repos = \"http://cran.us.r-project.org\") library(remotes) # remotes::install_github(\"USGS-R/dataRetrieval\", dependencies=TRUE)  # if you experience any issues installing TADA, try uncommenting and running the line below before the install # options(download.file.method = \"wininet\")  remotes::install_github(\"USEPA/TADA\", ref = \"misc-updates-cm\", dependencies = TRUE) library(TADA)"},{"path":"usepa.github.io/TADA/articles/WQPDataHarmonization.html","id":"retrieve-wqp-data","dir":"Articles","previous_headings":"","what":"Retrieve WQP data","title":"WQP Data Harmonization","text":"WQP data retrieved processed compatibility TADA. function, TADAdataRetrieval, builds USGS dataRetrieval package functions. joins four WQP profiles (.e., Site metadata, Sample Results (narrow), Sample Results (physical/chemical metadata), Project metadata. addition, changes data Characteristic, Speciation, Fraction, Unit fields uppercase, removes true duplicates, addressed result values include special characters. function uses inputs dataRetrieval readWQPdata function. readWQPdata restrict characteristics pulled Water Quality Portal (WQP). may specify desired characteristics using, instance: characteristicName = “pH”. Data retrieval filters include: startDate endDate characteristicName sampleMedia siteType statecode (review list possible state territory abbreviations) countycode siteid organization project Please aware default TADAdataRetrieval function automatically runs TADA autoclean ConvertSpecialChars functions. required subsequent functions within TADA R package run. general rule, TADA functions change contents WQP-served columns (enter ?ConvertSpecialChars ?autoclean console details). Instead, add new columns prefix “TADA.” following columns numeric versions WQP origins: functions also add columns TADA.ResultMeasureValueDataTypes.Flag TADA.DetectionQuantitationLimitMeasure.MeasureValueDataTypes.Flag, provide information result values needed address censored data later (.e., nondetections). Specifically, new columns flag special characters included result values, specifies special characters . Downloads using TADAdataRetrieval columns time, aware data uploaded Water Quality Portal individual organizations, may may follow conventions. Data metadata quality guaranteed! Make sure carefully explore data make conservative quality assurance decisions information limited. Tips: query filters WQP work within fields ORs. example: Characteristics: choose pH & - ’s . means retrieve pH data available. States: Similarly, choose VA IL, ’s . means retrieve VA IL data available. Combinations fields ANDs, State/VA Characteristic/”. means receive data available VA. “Characteristic” “Characteristic Type” also work . means Characteristic must fall within CharacteristicGroup filters used, get error. “siteid” general term WQP uses describe Site IDs USGS databases Monitoring Location Identifiers (Water Quality Portal). monitoring location Water Quality Portal (WQP) unique Monitoring Location Identifier, regardless database derives. Monitoring Location Identifier WQP concatenated Organization Identifier plus Site ID number. Site IDs include number unique identifiers monitoring locations within USGS NWIS EPA’s WQX databases separately. Additional resources: Review function documentation entering following code console: ?TADAdataRetrieval Introduction dataRetrieval package General Data Import Water Quality Portal Water Quality Portal Web Services Guide dataRetrieval Tutorial","code":"-   TADA.ResultMeasureValue  -   TADA.DetectionQuantitationLimitMeasure.MeasureValue  -   TADA.LatitudeMeasure  -   TADA.LongitudeMeasure"},{"path":"usepa.github.io/TADA/articles/WQPDataHarmonization.html","id":"dataretrieval","dir":"Articles","previous_headings":"","what":"dataRetrieval","title":"WQP Data Harmonization","text":"Uncomment like review differences profiles get using readWQPdata vs. TADAdataRetrieval. profiles different TADAdataRetrieval automatically joins data multiple WQP profiles, additional data cleaning part data retrieval process. Use code download data WQP using TADAdataRetrieval. Edit code chuck define WQP query inputs. Option 2: Alternatively, can use data.table::fread function read web service call WQP profile (un-comment). Extra tip: Note web service call built using Water Quality Portal uses inputs startDateLo startDateHi rather startDate endDate, dates format MM-DD-YYYY rather TADAdataRetrieval dataRetrieval format YYYY-MM-DD. functions use latter format rather web service call date format YYYY-MM-DD easily utilized format R coding environment. However, users USGS’s dataRetrieval may use date format MM-DD-YYYY specify “startDateLo” “startDateHi” inputs. coding consistency, recommended users stick YYYY-MM-DD. Option 3: need download large amount data across large area, TADAdataRetrieval function working due WQP timeout issues, TADABigdataRetrieval function may work better. function multiple synchronous data calls WQP (waterqualitydata.us). uses WQP summary service limit sites downloaded relevant data. pulls back data set number stations time joins data back together produce single TADA compatible dataframe output. See ?TADABigdataRetrieval details. WARNING, can take multiple HOURS run. total run time depends query inputs. Review column names TADA Profile. Remove results water samples measurements (TADA recommended use water data ).","code":"# dataRetrieval1 <- dataRetrieval::readWQPdata(statecode = \"AK\", characteristicName = c(\"Fecal Coliform\", \"Escherichia coli\", \"Enterococcus\"), startDate = \"2018-05-01\", ignore_attributes = TRUE)  # another example # dataRetrieval2 <- dataRetrieval::readWQPdata(statecode = \"UT\", characteristicName = c(\"Ammonia\", \"Nitrate\", \"Nitrogen\"), startDate = \"2021-01-01\", ignore_attributes = TRUE) # here is an example for Utah. We will move forward with this example in the remainder of the vignette TADAProfile <- TADAdataRetrieval(statecode = \"UT\", characteristicName = c(\"Ammonia\", \"Nitrate\", \"Nitrogen\"), startDate = \"2020-10-01\") #> [1] \"NOTE: This version of the TADA package is designed to work with data with sample media: 'WATER'. autoclean does not currently filter downloaded data to 'WATER'. The user must make this specification on their own outside of package functions. See the WQPDataHamornization vignette for an example.\"  # example for NM # TADAProfile <- TADAdataRetrieval(statecode = \"NM\", characteristicName = c(\"Ammonia\", \"Nitrate\", \"Nitrogen\"), startDate = \"2020-05-01\")  # example for Alaska # TADAProfile <- TADAdataRetrieval(project = \"Anchorage Bacteria 20-21\")  # another example query for Alaska #TADAProfile <- TADAdataRetrieval(statecode = \"AK\", characteristicName = c(\"Fecal Coliform\", \"Escherichia coli\", \"Enterococcus\", \"Ammonia\", \"Nitrate\", \"Nitrogen\"), startDate = \"2018-05-01\") # New_Draft_fullphyschem <- data.table::fread(\"https://www.waterqualitydata.us/data/Result/search?countrycode=US&statecode=US%3A49&siteid=UTAHDWQ_WQX-4925610&startDateLo=01-01-2015&startDateHi=12-31-2016&mimeType=csv&zip=no&sorted=yes&dataProfile=fullPhysChem&providers=NWIS&providers=STEWARDS&providers=STORET\") # WARNING, this can take multiple HOURS to run  # AK_AL_WaterTemp <- TADABigdataRetrieval(startDate = \"2000-01-01\",  #                                     endDate = \"2022-12-31\",  #                                     characteristicName = \"Temperature, water\", #                                     statecode = c(\"AK\",\"AL\")) #  # AllWaterTemp <- TADABigdataRetrieval(characteristicName = \"Temperature, water\") # # AllPhosphorus <- TADABigdataRetrieval(characteristicName = \"Phosphorus\") #  # AllCT <- TADABigdataRetrieval(statecode = \"CT\") colnames(TADAProfile) #>   [1] \"OrganizationIdentifier\"                                            #>   [2] \"OrganizationFormalName\"                                            #>   [3] \"ActivityIdentifier\"                                                #>   [4] \"ActivityTypeCode\"                                                  #>   [5] \"ActivityMediaName\"                                                 #>   [6] \"ActivityMediaSubdivisionName\"                                      #>   [7] \"ActivityStartDate\"                                                 #>   [8] \"ActivityStartTime.Time\"                                            #>   [9] \"ActivityStartTime.TimeZoneCode\"                                    #>  [10] \"ActivityEndDate\"                                                   #>  [11] \"ActivityEndTime.Time\"                                              #>  [12] \"ActivityEndTime.TimeZoneCode\"                                      #>  [13] \"ActivityRelativeDepthName\"                                         #>  [14] \"ActivityDepthHeightMeasure.MeasureValue\"                           #>  [15] \"ActivityDepthHeightMeasure.MeasureUnitCode\"                        #>  [16] \"ActivityDepthAltitudeReferencePointText\"                           #>  [17] \"ActivityTopDepthHeightMeasure.MeasureValue\"                        #>  [18] \"ActivityTopDepthHeightMeasure.MeasureUnitCode\"                     #>  [19] \"ActivityBottomDepthHeightMeasure.MeasureValue\"                     #>  [20] \"ActivityBottomDepthHeightMeasure.MeasureUnitCode\"                  #>  [21] \"ProjectIdentifier\"                                                 #>  [22] \"ProjectName\"                                                       #>  [23] \"ActivityConductingOrganizationText\"                                #>  [24] \"MonitoringLocationIdentifier\"                                      #>  [25] \"MonitoringLocationName\"                                            #>  [26] \"ActivityCommentText\"                                               #>  [27] \"SampleAquifer\"                                                     #>  [28] \"HydrologicCondition\"                                               #>  [29] \"HydrologicEvent\"                                                   #>  [30] \"ActivityLocation.LatitudeMeasure\"                                  #>  [31] \"ActivityLocation.LongitudeMeasure\"                                 #>  [32] \"SampleCollectionMethod.MethodIdentifier\"                           #>  [33] \"SampleCollectionMethod.MethodIdentifierContext\"                    #>  [34] \"SampleCollectionMethod.MethodName\"                                 #>  [35] \"SampleCollectionMethod.MethodDescriptionText\"                      #>  [36] \"SampleCollectionEquipmentName\"                                     #>  [37] \"ResultIdentifier\"                                                  #>  [38] \"ResultDetectionConditionText\"                                      #>  [39] \"MethodSpeciationName\"                                              #>  [40] \"CharacteristicName\"                                                #>  [41] \"ResultSampleFractionText\"                                          #>  [42] \"ResultMeasureValue\"                                                #>  [43] \"ResultMeasure.MeasureUnitCode\"                                     #>  [44] \"MeasureQualifierCode\"                                              #>  [45] \"ResultStatusIdentifier\"                                            #>  [46] \"StatisticalBaseCode\"                                               #>  [47] \"ResultValueTypeName\"                                               #>  [48] \"ResultWeightBasisText\"                                             #>  [49] \"ResultTimeBasisText\"                                               #>  [50] \"ResultTemperatureBasisText\"                                        #>  [51] \"ResultParticleSizeBasisText\"                                       #>  [52] \"DataQuality.PrecisionValue\"                                        #>  [53] \"DataQuality.BiasValue\"                                             #>  [54] \"DataQuality.ConfidenceIntervalValue\"                               #>  [55] \"DataQuality.UpperConfidenceLimitValue\"                             #>  [56] \"DataQuality.LowerConfidenceLimitValue\"                             #>  [57] \"ResultCommentText\"                                                 #>  [58] \"USGSPCode\"                                                         #>  [59] \"ResultDepthHeightMeasure.MeasureValue\"                             #>  [60] \"ResultDepthHeightMeasure.MeasureUnitCode\"                          #>  [61] \"ResultDepthAltitudeReferencePointText\"                             #>  [62] \"SubjectTaxonomicName\"                                              #>  [63] \"SampleTissueAnatomyName\"                                           #>  [64] \"BinaryObjectFileName\"                                              #>  [65] \"BinaryObjectFileTypeCode\"                                          #>  [66] \"ResultFileUrl\"                                                     #>  [67] \"ResultAnalyticalMethod.MethodIdentifier\"                           #>  [68] \"ResultAnalyticalMethod.MethodIdentifierContext\"                    #>  [69] \"ResultAnalyticalMethod.MethodName\"                                 #>  [70] \"ResultAnalyticalMethod.MethodUrl\"                                  #>  [71] \"ResultAnalyticalMethod.MethodDescriptionText\"                      #>  [72] \"LaboratoryName\"                                                    #>  [73] \"AnalysisStartDate\"                                                 #>  [74] \"ResultLaboratoryCommentText\"                                       #>  [75] \"ResultDetectionQuantitationLimitUrl\"                               #>  [76] \"DetectionQuantitationLimitTypeName\"                                #>  [77] \"DetectionQuantitationLimitMeasure.MeasureValue\"                    #>  [78] \"DetectionQuantitationLimitMeasure.MeasureUnitCode\"                 #>  [79] \"LabSamplePreparationUrl\"                                           #>  [80] \"LastUpdated\"                                                       #>  [81] \"ProviderName\"                                                      #>  [82] \"timeZoneStart\"                                                     #>  [83] \"timeZoneEnd\"                                                       #>  [84] \"ActivityStartDateTime\"                                             #>  [85] \"ActivityEndDateTime\"                                               #>  [86] \"MonitoringLocationTypeName\"                                        #>  [87] \"MonitoringLocationDescriptionText\"                                 #>  [88] \"HUCEightDigitCode\"                                                 #>  [89] \"DrainageAreaMeasure.MeasureValue\"                                  #>  [90] \"DrainageAreaMeasure.MeasureUnitCode\"                               #>  [91] \"ContributingDrainageAreaMeasure.MeasureValue\"                      #>  [92] \"ContributingDrainageAreaMeasure.MeasureUnitCode\"                   #>  [93] \"LatitudeMeasure\"                                                   #>  [94] \"LongitudeMeasure\"                                                  #>  [95] \"SourceMapScaleNumeric\"                                             #>  [96] \"HorizontalAccuracyMeasure.MeasureValue\"                            #>  [97] \"HorizontalAccuracyMeasure.MeasureUnitCode\"                         #>  [98] \"HorizontalCollectionMethodName\"                                    #>  [99] \"HorizontalCoordinateReferenceSystemDatumName\"                      #> [100] \"VerticalMeasure.MeasureValue\"                                      #> [101] \"VerticalMeasure.MeasureUnitCode\"                                   #> [102] \"VerticalAccuracyMeasure.MeasureValue\"                              #> [103] \"VerticalAccuracyMeasure.MeasureUnitCode\"                           #> [104] \"VerticalCollectionMethodName\"                                      #> [105] \"VerticalCoordinateReferenceSystemDatumName\"                        #> [106] \"CountryCode\"                                                       #> [107] \"StateCode\"                                                         #> [108] \"CountyCode\"                                                        #> [109] \"AquiferName\"                                                       #> [110] \"LocalAqfrName\"                                                     #> [111] \"FormationTypeText\"                                                 #> [112] \"AquiferTypeName\"                                                   #> [113] \"ConstructionDateText\"                                              #> [114] \"WellDepthMeasure.MeasureValue\"                                     #> [115] \"WellDepthMeasure.MeasureUnitCode\"                                  #> [116] \"WellHoleDepthMeasure.MeasureValue\"                                 #> [117] \"WellHoleDepthMeasure.MeasureUnitCode\"                              #> [118] \"MethodSpecificationName\"                                           #> [119] \"ProjectDescriptionText\"                                            #> [120] \"SamplingDesignTypeCode\"                                            #> [121] \"QAPPApprovedIndicator\"                                             #> [122] \"QAPPApprovalAgencyName\"                                            #> [123] \"ProjectFileUrl\"                                                    #> [124] \"ProjectMonitoringLocationWeightingUrl\"                             #> [125] \"TADA.LatitudeMeasure\"                                              #> [126] \"TADA.LongitudeMeasure\"                                             #> [127] \"TADA.ActivityMediaName\"                                            #> [128] \"TADA.CharacteristicName\"                                           #> [129] \"TADA.ResultMeasureValue\"                                           #> [130] \"TADA.ResultMeasureValueDataTypes.Flag\"                             #> [131] \"TADA.ResultMeasure.MeasureUnitCode\"                                #> [132] \"TADA.MethodSpecificationName\"                                      #> [133] \"TADA.ResultSampleFractionText\"                                     #> [134] \"TADA.DetectionQuantitationLimitMeasure.MeasureValue\"               #> [135] \"TADA.DetectionQuantitationLimitMeasure.MeasureUnitCode\"            #> [136] \"TADA.DetectionQuantitationLimitMeasure.MeasureValueDataTypes.Flag\" TADAProfile_CharSummary <- SummarizeColumn(TADAProfile,\"TADA.CharacteristicName\") TADAProfile_CharSummary #> # A tibble: 3 × 3 #>   TADA.CharacteristicName n_sites n_records #>   <chr>                     <int>     <int> #> 1 AMMONIA                      27        72 #> 2 NITRATE                     147      2159 #> 3 NITROGEN                    728     12534  # Remove data for non-water media types TADAProfile <- dplyr::filter(TADAProfile, TADA.ActivityMediaName == \"WATER\")"},{"path":"usepa.github.io/TADA/articles/WQPDataHarmonization.html","id":"invalid-coordinates","dir":"Articles","previous_headings":"","what":"Invalid coordinates","title":"WQP Data Harmonization","text":"Review station locations  TADA InvalidCoordinates function identifies flags potentially invalid coordinate data. functionality showcased , always important review invalid outputs cleaning reduce risk leaving usable data/sites. Allowable values clean_outsideUSA “”, “remove”, “change sign”. default “” flags latitude longitude coordinates outside USA. Assigning clean_ousideUSA = “remove” remove rows data coordinates outside USA. assigning clean_outsideUSA = “change sign” flip sign latitude longitude coordinates flagged outside USA. “change sign” option used known coordinates entered wrong sign WQX; additionally, data owner fix incorrect coordinates raw data WQX - assistance email WQX help desk: WQX@epa.gov Allowable values clean_imprecise TRUE FALSE. default FALSE flags rows data invalid imprecise coordinates without removing . Assigning clean_imprecise = TRUE remove rows data invalid imprecise coordinates. Allowable values errorsonly TRUE FALSE. default FALSE keeps rows data regardless flag status. Assigning errorsonly = TRUE filters dataframe show rows data flagged. clean_outsideUSA = “” /clean_imprecise = FALSE, column appended titled “TADA.InvalidCoordinates.Flag” following flags (relevant dataframe): latitude less zero, row flagged “LAT_OutsideUSA”. (Exception American Samoa) longitude greater zero less 145, row flagged “LONG_OutsideUSA”. (Exceptions Guam Northern Mariana Islands) latitude longitude contains string, “999”, row flagged invalid. Finally, precision can measured number decimal places latitude longitude provided. either numbers right decimal point, row flagged “Imprecise”.","code":"#create a map of the world maps::map()  # draw the sites included in your TADAProfile onto the map points(TADAProfile$TADA.LongitudeMeasure, TADAProfile$TADA.LatitudeMeasure, col=\"red\", pch=20) InvalidCoordinateFlags <- InvalidCoordinates(TADAProfile, clean_outsideUSA = \"no\", clean_imprecise = FALSE, errorsonly = TRUE)  # review unique flags in InvalidCoordinateFlags unique(InvalidCoordinateFlags$TADA.InvalidCoordinates.Flag) #> [1] \"Imprecise_Longincludes999\"        \"Imprecise_Latincludes999\"         #> [3] \"Imprecise_lessthan3decimaldigits\" \"LONG_OutsideUSA\"  # review unique MonitoringLocationIdentifiers in your flag dataframe unique(InvalidCoordinateFlags$MonitoringLocationIdentifier) #>  [1] \"USGS-403234111295700\"    \"UTAHDWQ_WQX-4904965\"     #>  [3] \"UTAHDWQ_WQX-4906400\"     \"UTAHDWQ_WQX-4917450\"     #>  [5] \"UTAHDWQ_WQX-4926323\"     \"UTAHDWQ_WQX-4922990\"     #>  [7] \"UTAHDWQ_WQX-4928005\"     \"UTEMTN-RARE - 1\"         #>  [9] \"UTAHDWQ_WQX-4990280\"     \"UTAHDWQ_WQX-4900702\"     #> [11] \"UTAHDWQ_WQX-4922760\"     \"UTAHDWQ_WQX-4920220\"     #> [13] \"WFWQC_UT-4992540\"        \"WFWQC_UT-4991820\"        #> [15] \"952307_WQX-Rye Spring 3\"  Unique_InvalidCoordinateFlags <- InvalidCoordinateFlags %>%   dplyr::select('MonitoringLocationIdentifier','MonitoringLocationName', 'TADA.InvalidCoordinates.Flag',          'OrganizationIdentifier', 'TADA.LongitudeMeasure', 'TADA.LatitudeMeasure', 'MonitoringLocationTypeName',           'CountryCode', 'StateCode', 'CountyCode', 'HUCEightDigitCode', 'MonitoringLocationDescriptionText',          'ProjectName', 'ProjectIdentifier', 'OrganizationFormalName') %>%   dplyr::distinct()  # remove all data for sites with invalid or imprecise coordinates. Change function inputs to keep this data, but be aware it may impact your mapping.  TADAProfileClean1 <- InvalidCoordinates(TADAProfile, clean_outsideUSA = \"remove\", clean_imprecise = FALSE, errorsonly = FALSE)"},{"path":"usepa.github.io/TADA/articles/WQPDataHarmonization.html","id":"depth-unit-conversions","dir":"Articles","previous_headings":"","what":"Depth unit conversions","title":"WQP Data Harmonization","text":"ConvertDepthUnits function converts depth units consistent unit. Depth values units commonly associated lake data, populated ActivityDepthHeightMeasure, ActivityTopDepthHeightMeasure, ActivityBottomDepthHeightMeasure, ResultDepthHeightMeasure Result Value/Unit columns. function first checks dataframe depth profile data. depth profile columns populated, function appends ‘Conversion Factor’ columns populates columns based original unit target unit, defined ‘unit’ argument. ‘Depth Target Unit’ column also appended, indicating unit selected depth data converted . transform = FALSE, output includes ‘Conversion Factor’ columns ‘Depth Target Unit’ column. transform = TRUE, output includes converted depth data ‘Depth Target Unit’ column, acts flag indicating rows converted. Default transform = TRUE. depth profile function can harmonize depth units across following fields (specific one): “ActivityDepthHeightMeasure”, “ActivityTopDepthHeightMeasure”, “ActivityBottomDepthHeightMeasure”, “ResultDepthHeightMeasure”). creates new result value/unit columns prefix “TADA.” converted columns. default check four Depth Height columns. Allowable values ‘unit’ either ‘m’ (meter), ‘ft’ (feet), ‘’ (inch). ‘unit’ accepts one allowable value input. Default unit = “m”. See additional function documentation additional function options entering following code console: ?ConvertDepthUnits","code":"#converts all depth profile data to meters TADAProfileClean2 <- ConvertDepthUnits(TADAProfileClean1, unit = \"m\", transform = TRUE)"},{"path":"usepa.github.io/TADA/articles/WQPDataHarmonization.html","id":"result-unit-conversions","dir":"Articles","previous_headings":"","what":"Result unit conversions","title":"WQP Data Harmonization","text":"ConvertResultUnits function converts results WQX target units. WQX target units pulled MeasureUnit domain table: https://cdx.epa.gov/wqx/download/DomainValues/MeasureUnit.CSV See additional function documentation additional function options entering following code console: ?ConvertResultUnits","code":"#Converts all results to WQX target units TADAProfileClean3 <- ConvertResultUnits(TADAProfileClean2, transform = TRUE)"},{"path":"usepa.github.io/TADA/articles/WQPDataHarmonization.html","id":"statistically-aggregated-data","dir":"Articles","previous_headings":"","what":"Statistically aggregated data","title":"WQP Data Harmonization","text":"AggregatedContinuousData function checks removes statistically aggregated high frequency (.e., continuous) data, present. Water Quality Portal (WQP) currently designed store high-frequency sensor data (1 value per day). However, sometimes data providers choose aggregate continuous data daily avg, max, min value, submit aggregated data WQP WQX. Alternatively, organizations aggregate high frequency data (15 min 1 hour data) 2 4 hour interval averages, also submit data WQP WQX. type high frequency data may (may ) suitable integration discrete water quality data assessments. Therefore, function uses metadata submitted data providers flag rows aggregated continuous data. done flagging results ResultDetectionConditionText = “Reported Raw Data (attached)”. clean = FALSE, column titled “TADA.AggregatedContinuousData” added dataframe indicate row includes aggregated continuous data, “Y”, , “N”. clean = TRUE, rows aggregated continuous data removed dataframe column appended. default clean = TRUE. additional input called errorsonly allow user filter data show rows aggregated continuous data. Allowable values errorsonly TRUE FALSE. default FALSE keeps rows data regardless flag status. Assigning errorsonly = TRUE filters dataframe show rows data flagged “Y”. See function documentation additional function options entering following code console: ?AggregatedContinuousData","code":"TADAProfileClean4 <- AggregatedContinuousData(TADAProfileClean3, clean = FALSE) #> [1] \"No evidence of aggregated continuous data in your dataframe. Returning the input dataframe with TADA.AggregatedContinuousData.Flag column for tracking.\"  # uncomment below to create a dataframe of only the aggregated continuous data # TADAProfile_aggcont <- AggregatedContinuousData(TADAProfileClean3, clean = FALSE, errorsonly = TRUE)"},{"path":"usepa.github.io/TADA/articles/WQPDataHarmonization.html","id":"wqx-qaqc-service-result-flags","dir":"Articles","previous_headings":"","what":"WQX QAQC Service Result Flags","title":"WQP Data Harmonization","text":"Run following result functions address invalid method, fraction, speciation, unit metadata characteristic. default clean = TRUE, remove invalid results. can change clean = FALSE flag results, remove . See documentation details: ?InvalidMethod clean = FALSE, function adds following column dataframe: TADA.AnalyticalMethod.Flag. column flags invalid TADA.CharacteristicName, ResultAnalyticalMethod/MethodIdentifier, ResultAnalyticalMethod/MethodIdentifierContext combinations dataframe either “Nonstandardized”, “Invalid”, “Valid”. clean = TRUE, “Invalid” rows removed dataframe column appended. errorsonly = TRUE, dataframe filtered rows flagged “Invalid”; default errorsonly = FALSE. ?InvalidSpeciation clean = “none”, function adds following column dataframe: TADA.MethodSpeciation.Flag. column flags TADA.CharacteristicName MethodSpecificationName combination dataframe either “Nonstandardized”, “Invalid”, “Valid”. clean = “invalid_only”, “Invalid” rows removed dataframe. Default clean = “invalid_only”. clean = “nonstandardized_only”, “Nonstandardized” rows removed dataframe. clean = “”, “Invalid” “Nonstandardized” rows removed dataframe. clean = “none”, rows removed dataframe. errorsonly = TRUE, dataframe filtered rows flagged “Invalid” “Nonstandardized”; default errorsonly = FALSE. ?InvalidResultUnit clean = FALSE, following column added dataframe: TADA.ResultUnit.Flag. column flags TADA.CharacteristicName, TADA.ActivityMediaName, TADA.ResultMeasure.MeasureUnitCode combination dataframe either “Nonstandardized”, “Invalid”, “Valid”. clean = TRUE, “Invalid” rows removed dataframe column appended. errorsonly = TRUE, dataframe filtered rows flagged “Invalid”; default errorsonly = FALSE. ?InvalidFraction clean = FALSE, function adds following column dataframe: TADA.SampleFraction.Flag. column flags TADA.CharacteristicName TADA.ResultSampleFractionText combination dataframe either “Nonstandardized”, “Invalid”, “Valid”. clean = TRUE, “Invalid” rows removed dataframe column appended. errorsonly = TRUE, dataframe filtered rows flagged “Invalid”; default errorsonly = FALSE.","code":"TADAProfileClean5 <- InvalidMethod(TADAProfileClean4, clean = TRUE) #> [1] \"No invalid method/characteristic combinations in your dataframe. Returning the input dataframe with TADA.AnalyticalMethod.Flag column for tracking.\" TADAProfileClean6 <- InvalidFraction(TADAProfileClean5, clean = TRUE) #> [1] \"All characteristic/fraction combinations are valid in your dataframe. Returning input dataframe with TADA.SampleFraction.Flag column for tracking.\" TADAProfileClean7 <- InvalidSpeciation(TADAProfileClean6, clean = \"invalid_only\") TADAProfileClean8 <- InvalidResultUnit(TADAProfileClean7, clean = \"invalid_only\")"},{"path":"usepa.github.io/TADA/articles/WQPDataHarmonization.html","id":"wqx-national-upper-and-lower-thresholds","dir":"Articles","previous_headings":"","what":"WQX national upper and lower thresholds","title":"WQP Data Harmonization","text":"Run following code flag remove results national upper lower bound characteristic unit combination. See documentation details: ?AboveNationalWQXUpperThreshold clean = FALSE, following column added dataframe: TADA.ResultValueAboveUpperThreshold.Flag. column flags rows data upper WQX threshold. clean = TRUE, data upper WQX threshold removed dataframe. default clean = TRUE. errorsonly = TRUE, dataframe filtered rows flagged upper WQX threshold; default errorsonly = FALSE. ?BelowNationalWQXLowerThreshold clean = FALSE, following column added dataframe: TADA.ResultValueBelowLowerThreshold.Flag. column flags rows data lower WQX threshold. clean = TRUE, data lower WQX threshold removed dataframe. default clean = TRUE. errorsonly = TRUE, dataframe filtered rows flagged lower WQX threshold; default errorsonly = FALSE.","code":"TADAProfileClean9 <- AboveNationalWQXUpperThreshold(TADAProfileClean8, clean = TRUE) #> [1] \"No data above the WQX Upper Threshold was found in your dataframe. Returning the input dataframe with TADA.ResultAboveUpperThreshold.Flag column for tracking.\" TADAProfileClean10 <- BelowNationalWQXLowerThreshold(TADAProfileClean9, clean = TRUE) #> [1] \"No data below the WQX Lower Threshold were found in your dataframe. Returning the input dataframe with TADA.ResultValueBelowLowerThreshold.Flag column for tracking.\""},{"path":"usepa.github.io/TADA/articles/WQPDataHarmonization.html","id":"potential-duplicates","dir":"Articles","previous_headings":"","what":"Potential duplicates","title":"WQP Data Harmonization","text":"Sometimes multiple organizations submit exact data Water Quality Portal (WQP), can affect water quality analyses assessments. function checks identifies data identical fields excluding organization-specific comment text fields. pair group potential duplicate rows flagged unique ID. information, review documentation entering following console: ?PotentialDuplicateRowID clean = FALSE, following column added dataframe: TADA.PotentialDupRowIDs.Flag. column flags potential duplicate rows data dataframe, assigns potential duplicate combination unique number linking two potential duplication rows. clean = TRUE, function retains first occurrence potential duplicate dataframe removes potential duplicate rows. column appended. default clean = TRUE. errorsonly = TRUE, dataframe filtered rows flagged potential duplicates; default errorsonly = FALSE.","code":"TADAProfileClean11 <- PotentialDuplicateRowID(TADAProfileClean10, clean = TRUE,                                               errorsonly = FALSE) #> [1] \"No potential duplicates found in your dataframe.\""},{"path":"usepa.github.io/TADA/articles/WQPDataHarmonization.html","id":"review-qapp-information","dir":"Articles","previous_headings":"","what":"Review QAPP information","title":"WQP Data Harmonization","text":"QAPPapproved function checks data approved QAPP. function checks see information column “QAPPApprovedIndicator”. organizations submit data field indicate data produced approved Quality Assurance Project Plan (QAPP) . field, Y indicates yes, N indicates . function three default inputs: clean = TRUE, cleanNA = FALSE, errorsonly = FALSE. defaults remove rows data QAPPApprovedIndicator equals “N”. Users alternatively remove N’s NA’s using inputs clean = TRUE, cleanNA = TRUE, errorsonly = FALSE. Additionally, users filter show N’s NA’s using inputs clean = FALSE, cleanNA = FALSE, errorsonly = TRUE. clean = FALSE, cleanNA = FALSE, errorsonly = FALSE, function anything. QAPPDocAvailable function checks see QAPP Doc Available function checks data submitted “ProjectFileUrl” column determine QAPP document available review. clean = FALSE, column appended flag results associated QAPP document URL provided. clean = TRUE, rows associated QAPP document removed dataframe column appended. errorsonly = TRUE, dataframe filtered show rows associated QAPP document. defaults clean = FALSE errorsonly = FALSE. function used remove data accompanying QAPP document required use data assessments.","code":"TADAProfileClean12 <- QAPPapproved(TADAProfileClean11, clean = FALSE,                                     cleanNA = FALSE) #> [1] \"Data is flagged but not removed because clean and cleanNA were FALSE\" TADAProfileClean13 <- QAPPDocAvailable(TADAProfileClean12, clean = FALSE) #> [1] \"No QAPP document url data found in your dataframe. Returning input dataframe with TADA.QAPPDocAvailable column for tracking.\""},{"path":"usepa.github.io/TADA/articles/WQPDataHarmonization.html","id":"filter-data-by-field","dir":"Articles","previous_headings":"","what":"Filter data by field","title":"WQP Data Harmonization","text":"section TADA user want review unique values specific fields may choose remove data particular values. start, review list fields number unique values field using FilterFields function. Next, choose field list see unique values field, well number times value appears dataframe using FilterFieldReview function. ’ll start ActivityTypeCode. list fields review: ResultCommentText often details relating additional QA. MeasureQualifierCode Contains information data flags codes may designate suspect data flags may  described detail **ResultLaboratoryCommentText** another column  ActivityTypeCode field four unique values – “Sample-Routine”, “Quality Control Sample-Field Replicate”, “Field Msr/Obs”, “Quality Control Sample-Field Blank.” example want remove quality control values ActivityTypeCode field, therefore, ’ll specify want remove “Quality Control Sample-Field Replicate” “Quality Control Sample-Field Blank” values ActivityTypeCode field.  ’ve completed review ActivityTypeCode field. Let’s move different field see values want remove – ’ll look values ResultStatusIdentifier field.  ActivityMediaSubdivisionName field unique values. example, show user leverage function remove specific values dataframe.","code":"FilterFields(TADAProfileClean13) #>                             FieldName Count #> 1              OrganizationFormalName     8 #> 2                    ActivityTypeCode    10 #> 3        ActivityMediaSubdivisionName     4 #> 4                         ProjectName    14 #> 5                 ActivityCommentText    17 #> 6                 HydrologicCondition     9 #> 7                     HydrologicEvent     4 #> 8                MeasureQualifierCode     6 #> 9             SampleTissueAnatomyName     1 #> 10                     LaboratoryName    12 #> 11 DetectionQuantitationLimitTypeName     7 #> 12         MonitoringLocationTypeName    14 #> 13             TADA.ActivityMediaName     1 #> 14            TADA.CharacteristicName     3 Other codes may designate suspect data or other flags which may be  described in detail in **ResultLaboratoryCommentText** or another column FilterFieldReview(\"ActivityTypeCode\", TADAProfileClean13) #>                                FieldValue Count #> 10                         Sample-Routine 11962 #> 9      Sample-Integrated Vertical Profile  1047 #> 5  Quality Control Sample-Field Replicate   797 #> 3  Quality Control Sample-Equipment Blank   671 #> 4      Quality Control Sample-Field Blank   250 #> 8        Sample-Composite Without Parents    18 #> 7    Quality Control Sample-Lab Duplicate     5 #> 1                           Field Msr/Obs     4 #> 6        Quality Control Sample-Lab Blank     3 #> 2  Quality Control Sample-Blind Duplicate     1 # This chunk of code removes rows where any value in the ActivityTypeCode filed includes the string \"Quality\") # See WQX domain file to review all the ActivityTypeCode allowable values: # https://cdx.epa.gov/wqx/download/DomainValues/ActivityType.CSV # Access all WQX Domain Files #https://www.epa.gov/waterdata/storage-and-retrieval-and-water-quality-exchange-domain-services-and-downloads TADAProfileClean14 <- dplyr::filter(TADAProfileClean13, !(ActivityTypeCode %in% ActivityTypeCode[grepl(\"Quality\",ActivityTypeCode)]))  FilterFieldReview(\"ActivityTypeCode\", TADAProfileClean14) #>                           FieldValue Count #> 4                     Sample-Routine 11962 #> 3 Sample-Integrated Vertical Profile  1047 #> 2   Sample-Composite Without Parents    18 #> 1                      Field Msr/Obs     4 FilterFieldReview(\"ActivityMediaSubdivisionName\", TADAProfileClean14) #>        FieldValue Count #> 3   Surface Water   995 #> 2     Groundwater   108 #> 1 Bulk deposition     1 TADAProfileClean15 <- dplyr::filter(TADAProfileClean14, !(ActivityMediaSubdivisionName %in% c(\"Groundwater\", \"Bulk deposition\")))  FilterFieldReview(\"ActivityMediaSubdivisionName\", TADAProfileClean15) #>      FieldValue Count #> 1 Surface Water   995"},{"path":"usepa.github.io/TADA/articles/WQPDataHarmonization.html","id":"censored-data","dir":"Articles","previous_headings":"","what":"Censored data","title":"WQP Data Harmonization","text":"Censored data measurements true value known, can estimate value based lower upper detection conditions limit types. TADA fills missing TADA.ResultMeasureValue TADA.ResultMeasure.MeasureUnitCode values values units TADA.DetectionQuantitationLimitMeasure.MeasureValue TADA.DetectionQuantitationLimitMeasure.MeasureUnitCode, respectively, using autoclean function. words, detection limit information copied pasted result value column original value NA detection limit information available. two columns TADA focuses define flag censored data ResultDetectionConditionText DetectionQuantitationLimitTypeName. TADA package currently functions summarize censored data incidence dataset perform simple substitutions censored data values, including x times detection limit random selection value 0 detection limit. user may specify methods used non-detects -detects separately input simpleCensoredMethods function. censored data functions depend first idCensoredData utility function, assigns TADA.CensoredData.Flag data records identifies -detects non-detects using ResultDetectionConditionText DetectionQuantitationLimitTypeName. utility function automatically run within summary simple methods functions dataset contain TADA.CensoredData.Flag. records receive one following classifications: - Uncensored - filled detection limit value; detection. - Non-Detect - Left-censored - -Detect - Right-censored - Condition/Limit Populated - detection condition limit type ambiguous associated lower/upper detection limit. - Conflict Condition Limit - detection condition limit type single record agree, e.g. one suggests -detect suggests non-detect. - Censored Categorized - detection condition limit type characterized TADA reference tables, based WQX domain tables. Causes function produce warning. example , first summarize censored data dataset using default grouping variables TADA.CharacteristicName, TADA.ResultMeasure.MeasureUnitCode,TADA.ResultSampleFractionText, TADA.MethodSpecificationName. user can specify columns TADA dataframe ’d like use aggregate censored data counts. example, may want aggregate characteristic HUC characteristic monitoring location. next step take example perform simple conversions censored data dataset: keep -detects (conversion made) convert non-detect values 0.5 times detection limit (half detection limit). Please review ?summarizeCensoredData ?simpleCensoredMethods information.","code":"TADAProfileClean16_censoredSummary = summarizeCensoredData(TADAProfileClean15, spec_cols = c(\"TADA.CharacteristicName\",\"TADA.ResultMeasure.MeasureUnitCode\",\"TADA.ResultSampleFractionText\",\"TADA.MethodSpecificationName\")) #> Warning in summarizeCensoredData(TADAProfileClean15, spec_cols = #> c(\"TADA.CharacteristicName\", : Dataset contains data missing both a result #> value and a detection limit. Suggest removing or handling before summarizing. #> [1] \"DetectionQuantitationLimitTypeName column dataset contains value(s) Historical Lower Reporting Limit which is/are not represented in the DetectionQuantitationLimitTypeName WQX domain table. These data records are placed under the TADA.CensoredData.Flag: Censored but not Categorized, and will not be used in censored data handling methods. Please contact TADA administrators to resolve.\"  TADAProfileClean16_censoredSummary #>   TADA.CharacteristicName TADA.ResultMeasure.MeasureUnitCode #> 1                 AMMONIA                               UG/L #> 2                 AMMONIA                               UG/L #> 3                 AMMONIA                               UG/L #> 4                 NITRATE                               UG/L #> 5                 NITRATE                               UG/L #> 6                NITROGEN                               MG/L #> 7                NITROGEN                               MG/L #> 8                NITROGEN                               MG/L #>   TADA.ResultSampleFractionText TADA.MethodSpecificationName Sample_Count #> 1                         TOTAL                         AS N           19 #> 2                    UNFILTERED                         AS N           30 #> 3                    UNFILTERED                         NONE            6 #> 4                         TOTAL                         AS N         1039 #> 5                    UNFILTERED                         AS N            9 #> 6                     DISSOLVED                         AS N         5611 #> 7                     SUSPENDED                         <NA>           85 #> 8                         TOTAL                         AS N         5194 #>   Censored_Count Percent_Censored Censoring_Levels TADA.CensoredData.Flag #> 1             19       100.000000                1             Non-Detect #> 2             28        93.333333                3             Non-Detect #> 3              6       100.000000                1             Non-Detect #> 4             12         1.154957                4             Non-Detect #> 5              5        55.555556                2             Non-Detect #> 6            900        16.039922                2             Non-Detect #> 7              4         4.705882                1             Non-Detect #> 8            189         3.638814                1             Non-Detect #>                                 TADA.Censored.Note #> 1 Percent censored too high for estimation methods #> 2 Percent censored too high for estimation methods #> 3 Percent censored too high for estimation methods #> 4                                     Kaplan-Meier #> 5               Robust Regression Order Statistics #> 6                                     Kaplan-Meier #> 7               Robust Regression Order Statistics #> 8               Robust Regression Order Statistics  TADAProfileClean16 = simpleCensoredMethods(TADAProfileClean15, nd_method = \"multiplier\", nd_multiplier = 0.5, od_method = \"as-is\", od_multiplier = \"null\") #> [1] \"DetectionQuantitationLimitTypeName column dataset contains value(s) Historical Lower Reporting Limit which is/are not represented in the DetectionQuantitationLimitTypeName WQX domain table. These data records are placed under the TADA.CensoredData.Flag: Censored but not Categorized, and will not be used in censored data handling methods. Please contact TADA administrators to resolve.\""},{"path":"usepa.github.io/TADA/articles/WQPDataHarmonization.html","id":"transform-characteristic-speciation-and-unit-values-to-tada-standards","dir":"Articles","previous_headings":"","what":"Transform Characteristic, Speciation, and Unit values to TADA Standards","title":"WQP Data Harmonization","text":"HarmonizeRefTable function generates harmonization reference table specific input dataframe. Users can review input data relates standard TADA values following elements: TADA.CharacteristicName TADA.ResultSampleFractionText TADA.MethodSpecificationName TADA.ResultMeasure.MeasureUnitCode HarmonizeData function compares input dataframe TADA Harmonization Reference Table. purpose function make similar data consistent therefore easier compare analyze. Users can also edit reference file meet needs desired. download argument can used save harmonization file current working directory download = TRUE, default download = FALSE. Optional outputs include: dataframe Harmonization columns appended, dataframe TADA.CharacteristicName, TADA.ResultSampleFractionText, TADA.MethodSpecificationName, TADA.ResultMeasure.MeasureUnitCode converted TADA standards four fields converted Harmonization Reference Table columns appended. Default transform = TRUE flag = TRUE. examples HarmonizeData function can used: TADA.ResultSampleFractionText specifies forms constituents. cases, single *TADA.CharacteristicName** “Total” “Dissolved” forms specified, combined. cases, TADA.CharacteristicName TADA.ResultSampleFractionText combination given different identifier. identifier can used later identify comparable data groups calculating statistics creating figures combination. variables different names represent constituent (e.g., “Total Kjeldahl nitrogen (Organic N & NH3)” “Kjeldahl nitrogen”). HarmonizeData function gives consistent name (identifier) synonyms.","code":"UniqueHarmonizationRef <- HarmonizationRefTable(TADAProfileClean16, download = FALSE) TADAProfileClean16 <- HarmonizeData(TADAProfileClean16, ref = UniqueHarmonizationRef, transform = TRUE, flag = TRUE)"},{"path":"usepa.github.io/TADA/articles/WQPDataHarmonization.html","id":"filter-data-by-field-subset-by-parameter","dir":"Articles","previous_headings":"","what":"Filter data by field, subset by parameter","title":"WQP Data Harmonization","text":"section TADA user want select parameter, review unique values associated parameter specific fields, choose remove particular values. start, review list parameters dataframe using FilterParList function. (list sorted highest lowest counts. first rows displayed save space page) Next, explore fields associated specific parameter using FilterParFields function: Selecting parameter generates list , subset selected parameter. list includes fields review, number unique values field. Next, choose field list. Review WQX domain files definitions: https://www.epa.gov/waterdata/storage--retrieval--water-quality-exchange-domain-services--downloads   Summarize results single comparable data group (.e., comparable characteristic, unit, speciation, fraction combination)","code":"FilterParList(TADAProfileClean16) #>                    FieldValue Count #> 3                    NITROGEN  5696 #> 4 TOTAL NITROGEN, MIXED FORMS  5194 #> 2                     NITRATE  1977 #> 1                     AMMONIA    55 FilterParFields(TADAProfileClean16, \"TOTAL NITROGEN, MIXED FORMS\") #>                                         FieldName Count #> 1         ResultAnalyticalMethod.MethodIdentifier     2 #> 2  ResultAnalyticalMethod.MethodIdentifierContext     2 #> 3                                ActivityTypeCode     3 #> 4                    ActivityMediaSubdivisionName     1 #> 5                             ActivityCommentText    13 #> 6                             HydrologicCondition     1 #> 7                                 HydrologicEvent     1 #> 8         SampleCollectionMethod.MethodIdentifier     1 #> 9  SampleCollectionMethod.MethodIdentifierContext     1 #> 10              SampleCollectionMethod.MethodName     1 #> 11                  SampleCollectionEquipmentName     1 #> 12                           MethodSpeciationName     1 #> 13                           MeasureQualifierCode     3 #> 14                         ResultStatusIdentifier     1 #> 15                            ResultValueTypeName     1 #> 16                          ResultWeightBasisText     1 #> 17                     ResultTemperatureBasisText     1 #> 18                    ResultParticleSizeBasisText     1 #> 19                          DataQuality.BiasValue     1 #> 20                              ResultCommentText    12 #> 21              ResultAnalyticalMethod.MethodName     2 #> 22                                 LaboratoryName     1 #> 23                    ResultLaboratoryCommentText     1 #> 24             DetectionQuantitationLimitTypeName     1 #> 25                     MonitoringLocationTypeName    10 #> 26                         TADA.ActivityMediaName     1 #> 27             TADA.ResultMeasure.MeasureUnitCode     1 #> 28                  TADA.ResultSampleFractionText     1 # In this example we remove certain values from the MeasureQualifierCode field FilterParFieldReview(field = \"MeasureQualifierCode\", TADAProfileClean16,                        parameter = \"TOTAL NITROGEN, MIXED FORMS\") #>                    FieldValue Count #> 3                    NITROGEN  5696 #> 4 TOTAL NITROGEN, MIXED FORMS  5194 #> 2                     NITRATE  1977 #> 1                     AMMONIA    55 #>                                         FieldName Count #> 1         ResultAnalyticalMethod.MethodIdentifier     2 #> 2  ResultAnalyticalMethod.MethodIdentifierContext     2 #> 3                                ActivityTypeCode     3 #> 4                    ActivityMediaSubdivisionName     1 #> 5                             ActivityCommentText    13 #> 6                             HydrologicCondition     1 #> 7                                 HydrologicEvent     1 #> 8         SampleCollectionMethod.MethodIdentifier     1 #> 9  SampleCollectionMethod.MethodIdentifierContext     1 #> 10              SampleCollectionMethod.MethodName     1 #> 11                  SampleCollectionEquipmentName     1 #> 12                           MethodSpeciationName     1 #> 13                           MeasureQualifierCode     3 #> 14                         ResultStatusIdentifier     1 #> 15                            ResultValueTypeName     1 #> 16                          ResultWeightBasisText     1 #> 17                     ResultTemperatureBasisText     1 #> 18                    ResultParticleSizeBasisText     1 #> 19                          DataQuality.BiasValue     1 #> 20                              ResultCommentText    12 #> 21              ResultAnalyticalMethod.MethodName     2 #> 22                                 LaboratoryName     1 #> 23                    ResultLaboratoryCommentText     1 #> 24             DetectionQuantitationLimitTypeName     1 #> 25                     MonitoringLocationTypeName    10 #> 26                         TADA.ActivityMediaName     1 #> 27             TADA.ResultMeasure.MeasureUnitCode     1 #> 28                  TADA.ResultSampleFractionText     1 #>   FieldValue Count #> 1          J   364 #> 2          U   189  # review WQX allowable values for MeasureQualifierCode # all allowable values lists can be found here: https://www.epa.gov/waterdata/storage-and-retrieval-and-water-quality-exchange-domain-services-and-downloads ReviewWQXDomainValue <- utils::read.csv(url(\"https://cdx.epa.gov/wqx/download/DomainValues/ResultMeasureQualifier.CSV\"))  # filter allowable values for MeasureQualifierCode down to the two in your dataset ReviewWQXDomainValue <- dplyr::filter(ReviewWQXDomainValue, Code == \"J\" | Code == \"U\")  # remove rows where MeasureQualifierCode = \"U\" (Not Detected: The analyte  # was analyzed for, but was not detected at a level greater than or equal to  # the level of the adjusted Contract Required Quantitation Limit (CRQL) for  # sample and method.)  TADAProfileClean17 <- dplyr::filter(TADAProfileClean16, !(TADA.CharacteristicName %in% \"TOTAL NITROGEN, MIXED FORMS\" & MeasureQualifierCode %in% \"U\"))  FilterParFieldReview(field = \"MeasureQualifierCode\", TADAProfileClean17,                        parameter = \"TOTAL NITROGEN, MIXED FORMS\") #>                    FieldValue Count #> 3                    NITROGEN  5696 #> 4 TOTAL NITROGEN, MIXED FORMS  5005 #> 2                     NITRATE  1977 #> 1                     AMMONIA    55 #>                                         FieldName Count #> 1         ResultAnalyticalMethod.MethodIdentifier     2 #> 2  ResultAnalyticalMethod.MethodIdentifierContext     2 #> 3                                ActivityTypeCode     3 #> 4                    ActivityMediaSubdivisionName     1 #> 5                             ActivityCommentText    13 #> 6                             HydrologicCondition     1 #> 7                                 HydrologicEvent     1 #> 8         SampleCollectionMethod.MethodIdentifier     1 #> 9  SampleCollectionMethod.MethodIdentifierContext     1 #> 10              SampleCollectionMethod.MethodName     1 #> 11                  SampleCollectionEquipmentName     1 #> 12                           MethodSpeciationName     1 #> 13                           MeasureQualifierCode     2 #> 14                         ResultStatusIdentifier     1 #> 15                            ResultValueTypeName     1 #> 16                          ResultWeightBasisText     1 #> 17                     ResultTemperatureBasisText     1 #> 18                    ResultParticleSizeBasisText     1 #> 19                          DataQuality.BiasValue     1 #> 20                              ResultCommentText    11 #> 21              ResultAnalyticalMethod.MethodName     2 #> 22                                 LaboratoryName     1 #> 23                    ResultLaboratoryCommentText     1 #> 24             DetectionQuantitationLimitTypeName     1 #> 25                     MonitoringLocationTypeName    10 #> 26                         TADA.ActivityMediaName     1 #> 27             TADA.ResultMeasure.MeasureUnitCode     1 #> 28                  TADA.ResultSampleFractionText     1 #>   FieldValue Count #> 1          J   364 # review TADA.ComparableDataIdentifier unique(TADAProfileClean17$TADA.ComparableDataIdentifier) #> [1] \"Ammonia_Total_as N_mg/L\"               #> [2] \"Ammonia_Unfiltered_as N_mg/L\"          #> [3] NA                                      #> [4] \"\"                                      #> [5] \"Nitrate_Total_as N_mg/L\"               #> [6] \"Nitrate_Unfiltered_as N_mg/L\"          #> [7] \"Nitrogen_Filterable_as N_mg/L\"         #> [8] \"Total Nitrogen, Mixed Forms_as N_mg/L\"  # filter dataframe to only \"NITROGEN\" TADAProfileClean18_TNonly <- dplyr::filter(TADAProfileClean17, TADA.CharacteristicName == \"TOTAL NITROGEN, MIXED FORMS\")  # review if any remaining result values are NA sum(is.na(TADAProfileClean18_TNonly$TADA.ResultMeasureValueDataTypes.Flag)) #> [1] 0  # review unique values in TADA.ResultMeasureValueDataTypes.Flag unique(TADAProfileClean18_TNonly$TADA.ResultMeasureValueDataTypes.Flag) #> [1] \"Numeric\"  # if applicable, substitute a value for NA. In this example, 0.02 MG/L is used for NITROGEN. TADAProfileClean18_TNonly$TADA.ResultMeasureValue <- ifelse(is.na(TADAProfileClean18_TNonly$TADA.ResultMeasureValue) == TRUE, 0.02, TADAProfileClean18_TNonly$TADA.ResultMeasureValue)  # generate summay stats summary(TADAProfileClean18_TNonly$TADA.ResultMeasureValue) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   0.084   0.338   0.618   2.044   1.240 365.000  # generate a histogram hist(TADAProfileClean18_TNonly$TADA.ResultMeasureValue, main = unique(TADAProfileClean18_TNonly$TADA.CharacteristicName), xlab = \"Values\") # generate interactive box plot TADA::TADA_boxplot(TADAProfileClean18_TNonly)"},{"path":"usepa.github.io/TADA/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Cristina Mullin. Author, maintainer. Michelle Thawley. Author. Jacob Greif. Author. Laura Shumway. Author. Elise Hinman. Author. Kathleen Healy. Author.","code":""},{"path":"usepa.github.io/TADA/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mullin et al., 2022, Water Quality Portal (WQP) Tools Automated Data Analysis (TADA), U.S. Environmental Protection Agency, Washington, DC","code":"@Manual{,   author = {Cristina A. Mullin and Jacob Greif and Michelle Thawley and Laura Shumway and Justin Bousquin and Laura Decicco and Katie Healy and Zach Smith and Florian Rupprecht and Brad Cooper},   title = {Water Quality Portal (WQP) Tools for Automated Data Analysis (TADA)},   address = {Washington, DC},   institution = {U.S. Environmental Protection Agency},   year = {2022},   url = {https://github.com/USEPA/TADA}, }"},{"path":"usepa.github.io/TADA/CONTRIBUTING.html","id":"package-development","dir":"","previous_headings":"","what":"Package Development","title":"NA","text":"article walk contribute TADA package. use git-forking workflow, full git tutorial. also complete guide R package development (comprehensive guide R Packages), instead meant checklist general steps. Several references included bottom information R-package development git workflows.","code":""},{"path":"usepa.github.io/TADA/CONTRIBUTING.html","id":"what-is-github","dir":"","previous_headings":"","what":"What is GitHub?","title":"NA","text":"GitHub third-party website offers version-controlled repositories developers scientists can use collaborate projects (e.g., software, text, manuscripts, etc.) real-time. GitHub also provides social networking features allow developers follow open-source projects, share code learn code changes made throughout development process. GitHub named utilizes open-source version control system (VCS) known Git. Setting Git Git Basics Comprehensive Guide: Happy Git GitHub useR","code":""},{"path":"usepa.github.io/TADA/CONTRIBUTING.html","id":"required-installations","dir":"","previous_headings":"","what":"Required Installations","title":"NA","text":"several programs needed work can begin. admin access computer, can install , otherwise create ticket group following requests. links provided assume Windows computer. Adjustments might needed Mac Linux OS: R RStudio Rtools Git installed, following R packages needed R-package development work:","code":"install.packages(c(\"devtools\", \"rmarkdown\"))"},{"path":"usepa.github.io/TADA/CONTRIBUTING.html","id":"issues","dir":"","previous_headings":"","what":"Issues","title":"NA","text":"see error feedback, best way let us know file issue. Issues labeled help indicate . example, using “Good First Issue” indicate issues good first pickings first contribution open-source project. Pull requests can directly linked specific issue. linked, Repository Administrators can easily review pull request issue time contributor submits pull request. issue can closed pull request merged.","code":""},{"path":"usepa.github.io/TADA/CONTRIBUTING.html","id":"branches","dir":"","previous_headings":"","what":"Branches","title":"NA","text":"new development currently happens develop branch. contribute specific change new code, outside contributors can fork repo develop branch. Contributors work personal fork one specific “task” time. complete, submit pull request request changes merged TADA develop branch. Contributors submit separate pull request “task”. “Tasks” small scope. example, may pertain bug fix update relevant single function. single “task” may also encompass changes made across many functions needed. Another example single “task” make changes documentation improve clarity, example. Furthermore, task may include developing new function, series related functions. cases, tasks can also synonymous issues, pull requests can directly linked specific issue (case, Repository Administrators review pull request issue time issue can closed pull request merged). Complete pull request detailing fixes contributions, tagging TADA repo admins review work. package, please tag cristinamullin (Cristina Mullin) mthawley (Shelly Thawley). Repository Administrators review code contributions external collaborators integrate code commits source code. done ensure code stability consistency prevent degradation code performance. review, admin either accept submission, recommend specific improvements submission, cases reject submission. avoid issues, developers contributing code contact repository admins (Cristina ) early development process maintain contact throughout help ensure submission compatible code base robust addition.","code":""},{"path":"usepa.github.io/TADA/CONTRIBUTING.html","id":"additional-references","dir":"","previous_headings":"","what":"Additional References","title":"NA","text":"R Packages testthat R markdown","code":""},{"path":"usepa.github.io/TADA/CONTRIBUTING.html","id":"open-source-code-policy","dir":"","previous_headings":"","what":"Open-Source Code Policy","title":"NA","text":"Effective August 8, 2016, OMB Mandate: M-16-21; Federal Source Code Policy: Achieving Efficiency, Transparency, Innovation Reusable Open Source Software applies new custom-developed code created procured EPA consistent scope applicability requirements Office Management Budget’s (OMB’s) Federal Source Code Policy. general, states new custom-developed code Federal Agencies made available reusable open-source code. EPA specific implementation OMB Mandate M-16-21 addressed System Life Cycle Management Procedure. EPA chosen use GitHub version control system well inventory open-source code projects. EPA uses GitHub inventory custom-developed, open-source code generate necessary metadata file posted code.gov broad reuse compliance OMB Mandate M-16-21. questions want read , check EPA Open Source Project Repo EPA’s Interim Open Source Code Guidance.","code":""},{"path":"usepa.github.io/TADA/CONTRIBUTING.html","id":"license","dir":"","previous_headings":"","what":"License","title":"NA","text":"contributions project released CCO-1.0 license file dedication. submitting pull request issue, agreeing comply waiver copyright interest.","code":""},{"path":"usepa.github.io/TADA/CONTRIBUTING.html","id":"disclaimer","dir":"","previous_headings":"","what":"Disclaimer","title":"NA","text":"United States Environmental Protection Agency (EPA) GitHub project code provided “” basis user assumes responsibility use. EPA relinquished control information longer responsibility protect integrity, confidentiality, availability information. reference specific commercial products, processes, services service mark, trademark, manufacturer, otherwise, constitute imply endorsement, recommendation favoring EPA. EPA seal logo shall used manner imply endorsement commercial product activity EPA United States Government.","code":""},{"path":"usepa.github.io/TADA/CONTRIBUTING.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"NA","text":"questions, please reach Cristina Mullin (mullin.cristina@epa.gov).","code":""},{"path":"usepa.github.io/TADA/index.html","id":"welcome-to-tada","dir":"","previous_headings":"","what":"Welcome to TADA!","title":"TADA (Tools for Automated Data Analysis) R Package","text":"encourage read package’s CONTRIBUTING, LICENSE, README files (). TADA draft R package developed help States, Tribes, Tribal Nations, Pueblos, stakeholders efficiently compile evaluate Water Quality Portal (WQP) data collected surface water monitoring sites. TADA building block support future development TADA R Shiny application. encourage stakeholders test functionality provide feedback. Moreover, open source software provides avenue water quality data originators users develop share code, welcome contributions! information contribute can found CONTRIBUTING file. file explains users can contribute R package submitting issue, requesting change, submitting inquiry. hope build collaborative community dedicated effort contributors can discover, share build package functionality time.","code":""},{"path":"usepa.github.io/TADA/index.html","id":"water-quality-portal","dir":"","previous_headings":"","what":"Water Quality Portal","title":"TADA (Tools for Automated Data Analysis) R Package","text":"2012, WQP deployed U.S. Geological Survey (USGS), U.S. Environmental Protection Agency (USEPA), National Water Quality Monitoring Council combine serve water-quality data numerous sources standardized format. WQP holds 420 million water quality sample results 1000 federal, state, tribal partners, nation’s largest source single point access water-quality data. Participating organizations submit data WQP using EPA’s Water Quality Exchange (WQX), framework designed map data holdings common data structure.","code":""},{"path":"usepa.github.io/TADA/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"TADA (Tools for Automated Data Analysis) R Package","text":"can install load recent version TADA R Package GitHub running:","code":"library (remotes) remotes::install_github(\"USEPA/TADA\", ref = \"develop\", dependencies = TRUE)"},{"path":"usepa.github.io/TADA/index.html","id":"open-source-code-policy","dir":"","previous_headings":"","what":"Open-Source Code Policy","title":"TADA (Tools for Automated Data Analysis) R Package","text":"Effective August 8, 2016, OMB Mandate: M-16-21; Federal Source Code Policy: Achieving Efficiency, Transparency, Innovation Reusable Open Source Software applies new custom-developed code created procured EPA consistent scope applicability requirements Office Management Budget’s (OMB’s) Federal Source Code Policy. general, states new custom-developed code Federal Agencies made available reusable open-source code. EPA specific implementation OMB Mandate M-16-21 addressed System Life Cycle Management Procedure. EPA chosen use GitHub version control system well inventory open-source code projects. EPA uses GitHub inventory custom-developed, open-source code generate necessary metadata file posted code.gov broad reuse compliance OMB Mandate M-16-21. questions want read , check EPA Open Source Project Repo EPA’s Interim Open Source Code Guidance.","code":""},{"path":"usepa.github.io/TADA/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"TADA (Tools for Automated Data Analysis) R Package","text":"contributions project released CCO-1.0 license file dedication. submitting pull request issue, agreeing comply waiver copyright interest.","code":""},{"path":"usepa.github.io/TADA/index.html","id":"disclaimer","dir":"","previous_headings":"","what":"Disclaimer","title":"TADA (Tools for Automated Data Analysis) R Package","text":"United States Environmental Protection Agency (EPA) GitHub project code provided “” basis user assumes responsibility use. EPA relinquished control information longer responsibility protect integrity, confidentiality, availability information. reference specific commercial products, processes, services service mark, trademark, manufacturer, otherwise, constitute imply endorsement, recommendation favoring EPA. EPA seal logo shall used manner imply endorsement commercial product activity EPA United States Government.","code":""},{"path":"usepa.github.io/TADA/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"TADA (Tools for Automated Data Analysis) R Package","text":"questions, please reach Cristina Mullin (mullin.cristina@epa.gov).","code":""},{"path":[]},{"path":"usepa.github.io/TADA/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"CC0 1.0 Universal","title":"CC0 1.0 Universal","text":"CREATIVE COMMONS CORPORATION LAW FIRM PROVIDE LEGAL SERVICES. DISTRIBUTION DOCUMENT CREATE ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES INFORMATION “-” BASIS. CREATIVE COMMONS MAKES WARRANTIES REGARDING USE DOCUMENT INFORMATION WORKS PROVIDED HEREUNDER, DISCLAIMS LIABILITY DAMAGES RESULTING USE DOCUMENT INFORMATION WORKS PROVIDED HEREUNDER.","code":""},{"path":"usepa.github.io/TADA/LICENSE.html","id":"statement-of-purpose","dir":"","previous_headings":"","what":"Statement of Purpose","title":"CC0 1.0 Universal","text":"laws jurisdictions throughout world automatically confer exclusive Copyright Related Rights (defined ) upon creator subsequent owner(s) (, “owner”) original work authorship /database (, “Work”). Certain owners wish permanently relinquish rights Work purpose contributing commons creative, cultural scientific works (“Commons”) public can reliably without fear later claims infringement build upon, modify, incorporate works, reuse redistribute freely possible form whatsoever purposes, including without limitation commercial purposes. owners may contribute Commons promote ideal free culture production creative, cultural scientific works, gain reputation greater distribution Work part use efforts others. /purposes motivations, without expectation additional consideration compensation, person associating CC0 Work (“Affirmer”), extent owner Copyright Related Rights Work, voluntarily elects apply CC0 Work publicly distribute Work terms, knowledge Copyright Related Rights Work meaning intended legal effect CC0 rights. Copyright Related Rights. Work made available CC0 may protected copyright related neighboring rights (“Copyright Related Rights”). Copyright Related Rights include, limited , following: right reproduce, adapt, distribute, perform, display, communicate, translate Work; moral rights retained original author(s) /performer(s); publicity privacy rights pertaining person’s image likeness depicted Work; rights protecting unfair competition regards Work, subject limitations paragraph 4(), ; rights protecting extraction, dissemination, use reuse data Work; database rights (arising Directive 96/9/EC European Parliament Council 11 March 1996 legal protection databases, national implementation thereof, including amended successor version directive); similar, equivalent corresponding rights throughout world based applicable law treaty, national implementations thereof. Waiver. greatest extent permitted , contravention , applicable law, Affirmer hereby overtly, fully, permanently, irrevocably unconditionally waives, abandons, surrenders Affirmer’s Copyright Related Rights associated claims causes action, whether now known unknown (including existing well future claims causes action), Work () territories worldwide, (ii) maximum duration provided applicable law treaty (including future time extensions), (iii) current future medium number copies, (iv) purpose whatsoever, including without limitation commercial, advertising promotional purposes (“Waiver”). Affirmer makes Waiver benefit member public large detriment Affirmer’s heirs successors, fully intending Waiver shall subject revocation, rescission, cancellation, termination, legal equitable action disrupt quiet enjoyment Work public contemplated Affirmer’s express Statement Purpose. Public License Fallback. part Waiver reason judged legally invalid ineffective applicable law, Waiver shall preserved maximum extent permitted taking account Affirmer’s express Statement Purpose. addition, extent Waiver judged Affirmer hereby grants affected person royalty-free, non transferable, non sublicensable, non exclusive, irrevocable unconditional license exercise Affirmer’s Copyright Related Rights Work () territories worldwide, (ii) maximum duration provided applicable law treaty (including future time extensions), (iii) current future medium number copies, (iv) purpose whatsoever, including without limitation commercial, advertising promotional purposes (“License”). License shall deemed effective date CC0 applied Affirmer Work. part License reason judged legally invalid ineffective applicable law, partial invalidity ineffectiveness shall invalidate remainder License, case Affirmer hereby affirms () exercise remaining Copyright Related Rights Work (ii) assert associated claims causes action respect Work, either case contrary Affirmer’s express Statement Purpose. Limitations Disclaimers. trademark patent rights held Affirmer waived, abandoned, surrendered, licensed otherwise affected document. Affirmer offers Work -makes representations warranties kind concerning Work, express, implied, statutory otherwise, including without limitation warranties title, merchantability, fitness particular purpose, non infringement, absence latent defects, accuracy, present absence errors, whether discoverable, greatest extent permissible applicable law. Affirmer disclaims responsibility clearing rights persons may apply Work use thereof, including without limitation person’s Copyright Related Rights Work. , Affirmer disclaims responsibility obtaining necessary consents, permissions rights required use Work. Affirmer understands acknowledges Creative Commons party document duty obligation respect CC0 use Work.","code":""},{"path":"usepa.github.io/TADA/readme.html","id":"welcome-to-tada","dir":"","previous_headings":"","what":"Welcome to TADA!","title":"NA","text":"encourage read package’s CONTRIBUTING, LICENSE, README files (). TADA draft R package developed help States, Tribes, Tribal Nations, Pueblos, stakeholders efficiently compile evaluate Water Quality Portal (WQP) data collected surface water monitoring sites. TADA building block support future development TADA R Shiny application. encourage stakeholders test functionality provide feedback. Moreover, open source software provides avenue water quality data originators users develop share code, welcome contributions! information contribute can found CONTRIBUTING file. file explains users can contribute R package submitting issue, requesting change, submitting inquiry. hope build collaborative community dedicated effort contributors can discover, share build package functionality time.","code":""},{"path":"usepa.github.io/TADA/readme.html","id":"water-quality-portal","dir":"","previous_headings":"","what":"Water Quality Portal","title":"NA","text":"2012, WQP deployed U.S. Geological Survey (USGS), U.S. Environmental Protection Agency (USEPA), National Water Quality Monitoring Council combine serve water-quality data numerous sources standardized format. WQP holds 420 million water quality sample results 1000 federal, state, tribal partners, nation’s largest source single point access water-quality data. Participating organizations submit data WQP using EPA’s Water Quality Exchange (WQX), framework designed map data holdings common data structure.","code":""},{"path":"usepa.github.io/TADA/readme.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"NA","text":"can install load recent version TADA R Package GitHub running:","code":"library (remotes) remotes::install_github(\"USEPA/TADA\", ref = \"develop\", dependencies = TRUE)"},{"path":"usepa.github.io/TADA/readme.html","id":"open-source-code-policy","dir":"","previous_headings":"","what":"Open-Source Code Policy","title":"NA","text":"Effective August 8, 2016, OMB Mandate: M-16-21; Federal Source Code Policy: Achieving Efficiency, Transparency, Innovation Reusable Open Source Software applies new custom-developed code created procured EPA consistent scope applicability requirements Office Management Budget’s (OMB’s) Federal Source Code Policy. general, states new custom-developed code Federal Agencies made available reusable open-source code. EPA specific implementation OMB Mandate M-16-21 addressed System Life Cycle Management Procedure. EPA chosen use GitHub version control system well inventory open-source code projects. EPA uses GitHub inventory custom-developed, open-source code generate necessary metadata file posted code.gov broad reuse compliance OMB Mandate M-16-21. questions want read , check EPA Open Source Project Repo EPA’s Interim Open Source Code Guidance.","code":""},{"path":"usepa.github.io/TADA/readme.html","id":"license","dir":"","previous_headings":"","what":"License","title":"NA","text":"contributions project released CCO-1.0 license file dedication. submitting pull request issue, agreeing comply waiver copyright interest.","code":""},{"path":"usepa.github.io/TADA/readme.html","id":"disclaimer","dir":"","previous_headings":"","what":"Disclaimer","title":"NA","text":"United States Environmental Protection Agency (EPA) GitHub project code provided “” basis user assumes responsibility use. EPA relinquished control information longer responsibility protect integrity, confidentiality, availability information. reference specific commercial products, processes, services service mark, trademark, manufacturer, otherwise, constitute imply endorsement, recommendation favoring EPA. EPA seal logo shall used manner imply endorsement commercial product activity EPA United States Government.","code":""},{"path":"usepa.github.io/TADA/readme.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"NA","text":"questions, please reach Cristina Mullin (mullin.cristina@epa.gov).","code":""},{"path":"usepa.github.io/TADA/reference/AboveNationalWQXUpperThreshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Result Value Against WQX Upper Threshold — AboveNationalWQXUpperThreshold","title":"Check Result Value Against WQX Upper Threshold — AboveNationalWQXUpperThreshold","text":"EPA's Water Quality Exchange (WQX) generated statistics data millions water quality data points around country. function leverages statistical data WQX flag data upper threshold result values submitted WQX given characteristic. clean = FALSE errorsonly = FALSE, column flags data upper WQX threshold appended dataframe. clean = FALSE errorsonly = TRUE, dataframe filtered show data found WQX threshold. clean = TRUE errorsonly = FALSE, rows values upper WQX threshold removed dataframe column appended. clean = TRUE errorsonly = TRUE, function executed error message returned. Defaults clean = TRUE errorsonly = FALSE.","code":""},{"path":"usepa.github.io/TADA/reference/AboveNationalWQXUpperThreshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Result Value Against WQX Upper Threshold — AboveNationalWQXUpperThreshold","text":"","code":"AboveNationalWQXUpperThreshold(.data, clean = TRUE, errorsonly = FALSE)"},{"path":"usepa.github.io/TADA/reference/AboveNationalWQXUpperThreshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Result Value Against WQX Upper Threshold — AboveNationalWQXUpperThreshold","text":".data TADA dataframe clean Boolean argument; removes data upper WQX threshold dataframe clean = TRUE. Default clean = TRUE. errorsonly Boolean argument; filters dataframe show data flagged upper WQX threshold. Default errorsonly = FALSE.","code":""},{"path":"usepa.github.io/TADA/reference/AboveNationalWQXUpperThreshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Result Value Against WQX Upper Threshold — AboveNationalWQXUpperThreshold","text":"clean = FALSE errorsonly = FALSE, column flags data upper WQX threshold appended dataframe. clean = FALSE errorsonly = TRUE, dataframe filtered show data found WQX threshold. clean = TRUE errorsonly = FALSE, rows values upper WQX threshold removed dataframe column appended. clean = TRUE errorsonly = TRUE, function executed error message returned. Defaults clean = TRUE errorsonly = FALSE.","code":""},{"path":"usepa.github.io/TADA/reference/AboveNationalWQXUpperThreshold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Result Value Against WQX Upper Threshold — AboveNationalWQXUpperThreshold","text":"","code":"# Load example dataset: data(Nutrients_Utah)  # Remove data that is above the upper WQX threshold from dataframe: WQXUpperThreshold_clean <- AboveNationalWQXUpperThreshold(Nutrients_Utah) #> [1] \"No data above the WQX Upper Threshold was found in your dataframe. Returning the input dataframe with TADA.ResultAboveUpperThreshold.Flag column for tracking.\"  # Flag, but do not remove, data that is above the upper WQX threshold in # new column titled \"TADA.ResultValueAboveUpperThreshold.Flag\": WQXUpperThreshold_flags <- AboveNationalWQXUpperThreshold(Nutrients_Utah, clean = FALSE) #> [1] \"No data above the WQX Upper Threshold was found in your dataframe. Returning the input dataframe with TADA.ResultAboveUpperThreshold.Flag column for tracking.\"  # Show only data flagged as above the upper WQX threshold: WQXUpperThreshold_flagsonly <- AboveNationalWQXUpperThreshold(Nutrients_Utah,  clean = FALSE, errorsonly = TRUE) #> [1] \"This dataframe is empty because no data above the WQX Upper Threshold was found in your dataframe\""},{"path":"usepa.github.io/TADA/reference/AggregatedContinuousData.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for Aggregated Continuous Data — AggregatedContinuousData","title":"Check for Aggregated Continuous Data — AggregatedContinuousData","text":"Water Quality Portal (WQP) currently designed store high-frequency sensor data (1 value per day). However, sometimes data providers choose aggregate continuous data daily avg, max, min value, submit aggregated data WQP WQX. Alternatively, organizations aggregate high frequency data (15 min 1 hour data) 2 4 hour interval averages, also submit data WQP WQX. type high frequency data may (may ) suitable integration discrete water quality data assessments. Therefore, function uses metadata submitted data providers flag rows aggregated continuous data. done flagging results ResultDetectionConditionText = \"Reported Raw Data (attached)\". clean = FALSE errorsonly = FALSE, column titled \"TADA.AggregatedContinuousData.Flag\" added dataframe indicate row includes aggregated continuous data, \"Y\", ,  \"N\". clean = FALSE errorsonly = TRUE, dataframe filtered show rows flagged \"Y\" aggregated continuous data. clean = TRUE errorsonly = FALSE, rows aggregated continuous data removed dataframe column appended. clean = TRUE errorsonly = TRUE, function execute error message returned. default clean = TRUE errorsonly = FALSE.","code":""},{"path":"usepa.github.io/TADA/reference/AggregatedContinuousData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for Aggregated Continuous Data — AggregatedContinuousData","text":"","code":"AggregatedContinuousData(.data, clean = TRUE, errorsonly = FALSE)"},{"path":"usepa.github.io/TADA/reference/AggregatedContinuousData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for Aggregated Continuous Data — AggregatedContinuousData","text":".data TADA dataframe clean Boolean argument; removes aggregated continuous data dataframe clean = TRUE. Default clean = TRUE. errorsonly Boolean argument; filters dataframe show aggregated continuous data errorsonly = TRUE. Default errorsonly = FALSE.","code":""},{"path":"usepa.github.io/TADA/reference/AggregatedContinuousData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for Aggregated Continuous Data — AggregatedContinuousData","text":"clean = FALSE errorsonly = FALSE, column flagging rows aggregated continuous data appended input data set. clean = FALSE errorsonly = TRUE, dataframe filtered show flagged aggregated continuous data flag column still appended. clean = TRUE errorsonly = FALSE, aggregated continuous data removed dataframe column appended. default clean = TRUE errorsonly = FALSE.","code":""},{"path":"usepa.github.io/TADA/reference/AggregatedContinuousData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for Aggregated Continuous Data — AggregatedContinuousData","text":"","code":"# Load example dataset data(Nutrients_Utah)  # Remove aggregated continuous data from dataframe: AggContinuous_clean <- AggregatedContinuousData(Nutrients_Utah) #> [1] \"No evidence of aggregated continuous data in your dataframe. Returning the input dataframe with TADA.AggregatedContinuousData.Flag column for tracking.\"  # Flag, but do not remove, aggregated continuous data in new column # titled \"TADA.AggregatedContinuousData.Flag\": AggContinuous_flags <- AggregatedContinuousData(Nutrients_Utah, clean = FALSE) #> [1] \"No evidence of aggregated continuous data in your dataframe. Returning the input dataframe with TADA.AggregatedContinuousData.Flag column for tracking.\"  # Show only rows flagged for aggregated continuous data: AggContinuous_errorsonly <- AggregatedContinuousData(Nutrients_Utah,  clean = FALSE, errorsonly = TRUE) #> [1] \"This dataframe is empty because we did not find any aggregated continuous data in your dataframe\""},{"path":"usepa.github.io/TADA/reference/autoclean.html","id":null,"dir":"Reference","previous_headings":"","what":"autoclean — autoclean","title":"autoclean — autoclean","text":"Removes rows data true duplicates. Creates new columns prefix \"TADA.\" capitalizes fields harmonize data. function includes runs TADA \"ConvertSpecialChars\" function well. function performs immediate QA steps (removes true duplicates, converts result values numeric, capitalizes letters, etc.) heavily used columns places new values column name added prefix \"TADA.\" makes certain fields uppercase interoperable WQX validation reference tables reduces issues case-sensitivity joining data.can run stand alone function can tacked onto functions.","code":""},{"path":"usepa.github.io/TADA/reference/autoclean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"autoclean — autoclean","text":"","code":"autoclean(.data)"},{"path":"usepa.github.io/TADA/reference/autoclean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"autoclean — autoclean","text":".data TADA dataframe","code":""},{"path":"usepa.github.io/TADA/reference/autoclean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"autoclean — autoclean","text":"autocleaned TADA data profile","code":""},{"path":"usepa.github.io/TADA/reference/AutoFilter.html","id":null,"dir":"Reference","previous_headings":"","what":"AutoFilter — AutoFilter","title":"AutoFilter — AutoFilter","text":"Function can used autofilter simplify WQP dataframe. applying function, dataframe contain result values water media types chemicals tissue (e.g. mercury fish tissue). complex biological data (counts macroinvertebrates) removed. function looks following fields autofilter: ActivityMediaName, ActivityMediaSubDivisionName, AssemblageSampledName","code":""},{"path":"usepa.github.io/TADA/reference/AutoFilter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AutoFilter — AutoFilter","text":"","code":"AutoFilter(.data, clean = TRUE)"},{"path":"usepa.github.io/TADA/reference/AutoFilter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AutoFilter — AutoFilter","text":".data TADA dataframe clean Indicates whether flag columns appended data (clean = FALSE), flagged data transformed/filtered dataframe columns appended (clean = TRUE).","code":""},{"path":"usepa.github.io/TADA/reference/AutoFilter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"AutoFilter — AutoFilter","text":"clean = FALSE, flag column appended dataframe. clean = TRUE, flag column appended relevant rows removed.","code":""},{"path":"usepa.github.io/TADA/reference/BelowNationalWQXLowerThreshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Result Value Against WQX Lower Threshold — BelowNationalWQXLowerThreshold","title":"Check Result Value Against WQX Lower Threshold — BelowNationalWQXLowerThreshold","text":"EPA's Water Quality Exchange (WQX) generated statistics data millions water quality data points around country. functions leverages statistical data WQX flag data lower threshold result values submitted WQX given characteristic. clean = TRUE, rows values lower WQX threshold removed dataframe column appended. Default clean = TRUE. errorsonly = TRUE, dataframe filtered show rows values flagged lower WQX threshold. Default errorsonly = FALSE","code":""},{"path":"usepa.github.io/TADA/reference/BelowNationalWQXLowerThreshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Result Value Against WQX Lower Threshold — BelowNationalWQXLowerThreshold","text":"","code":"BelowNationalWQXLowerThreshold(.data, clean = TRUE, errorsonly = FALSE)"},{"path":"usepa.github.io/TADA/reference/BelowNationalWQXLowerThreshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Result Value Against WQX Lower Threshold — BelowNationalWQXLowerThreshold","text":".data TADA dataframe clean Boolean argument; removes data lower WQX threshold dataframe clean = TRUE. Default clean = TRUE. errorsonly Boolean argument; filters data show values flagged lower WQX threshold errorsonly = TRUE. Default errorsonly = FALSE.","code":""},{"path":"usepa.github.io/TADA/reference/BelowNationalWQXLowerThreshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Result Value Against WQX Lower Threshold — BelowNationalWQXLowerThreshold","text":"clean = FALSE errorsonly = FALSE, following column added dataframe: TADA.ResultValueBelowLowerThreshold.Flag. column flags rows data lower WQX threshold. clean = FALSE errorsonly = TRUE, dataframe filtered show rows flagged WQX threshold; column TADA.ResultValueBelowLowerThreshold.Flag still appended. clean = TRUE errorsonly = FALSE, data lower WQX threshold removed dataframe. clean = TRUE errorsonly = TRUE, function execute error message returned. defaults clean = TRUE errorsonly = FALSE.","code":""},{"path":"usepa.github.io/TADA/reference/BelowNationalWQXLowerThreshold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Result Value Against WQX Lower Threshold — BelowNationalWQXLowerThreshold","text":"","code":"# Load example dataset: data(Nutrients_Utah)  # Remove data that is below the lower WQX threshold from the dataframe: WQXLowerThreshold_clean <- BelowNationalWQXLowerThreshold(Nutrients_Utah) #> [1] \"No data below the WQX Lower Threshold were found in your dataframe. Returning the input dataframe with TADA.ResultValueBelowLowerThreshold.Flag column for tracking.\"  # Flag, but do not remove, data that is below the lower WQX threshold in # new column titled \"TADA.ResultValueBelowLowerThreshold.Flag\": WQXLowerThreshold_flags <- BelowNationalWQXLowerThreshold(Nutrients_Utah, clean = FALSE) #> [1] \"No data below the WQX Lower Threshold were found in your dataframe. Returning the input dataframe with TADA.ResultValueBelowLowerThreshold.Flag column for tracking.\"  # Show only data that is below the lower WQX threshold: WQXLowerThreshold_flagsonly <- BelowNationalWQXLowerThreshold(Nutrients_Utah, clean = FALSE, errorsonly = TRUE) #> [1] \"This dataframe is empty because no data below the WQX Lower Threshold was found in your dataframe\""},{"path":"usepa.github.io/TADA/reference/BelowNationalWQXUpperThreshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Result Value Against WQX Lower Threshold — BelowNationalWQXUpperThreshold","title":"Check Result Value Against WQX Lower Threshold — BelowNationalWQXUpperThreshold","text":"EPA's Water Quality Exchange (WQX) generated statistics data millions water quality data points around country. functions leverages statistical data WQX flag data lower threshold result values submitted WQX given characteristic. clean = TRUE, rows values lower WQX threshold removed dataframe column appended. Default clean = TRUE.","code":""},{"path":"usepa.github.io/TADA/reference/BelowNationalWQXUpperThreshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Result Value Against WQX Lower Threshold — BelowNationalWQXUpperThreshold","text":"","code":"BelowNationalWQXUpperThreshold(.data, clean = TRUE)"},{"path":"usepa.github.io/TADA/reference/BelowNationalWQXUpperThreshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Result Value Against WQX Lower Threshold — BelowNationalWQXUpperThreshold","text":".data TADA dataframe clean Boolean argument; removes data lower WQX threshold dataframe clean = TRUE. Default clean = TRUE.","code":""},{"path":"usepa.github.io/TADA/reference/BelowNationalWQXUpperThreshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Result Value Against WQX Lower Threshold — BelowNationalWQXUpperThreshold","text":"clean = FALSE, following column added dataframe: BelowWQXUpperThreshold. column flags rows data lower WQX threshold. clean = TRUE, data lower WQX threshold removed dataframe.","code":""},{"path":"usepa.github.io/TADA/reference/CensoredDataStats.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates Censored Data Statistics — CensoredDataStats","title":"Generates Censored Data Statistics — CensoredDataStats","text":"Function summarizes censored data dataframe, including substitutions made.","code":""},{"path":"usepa.github.io/TADA/reference/CensoredDataStats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates Censored Data Statistics — CensoredDataStats","text":"","code":"CensoredDataStats(.data)"},{"path":"usepa.github.io/TADA/reference/CensoredDataStats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates Censored Data Statistics — CensoredDataStats","text":".data Optional argument; TADA dataframe","code":""},{"path":"usepa.github.io/TADA/reference/CensoredDataStats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates Censored Data Statistics — CensoredDataStats","text":"Summary table","code":""},{"path":"usepa.github.io/TADA/reference/checkColumns.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Columns — checkColumns","title":"Check Columns — checkColumns","text":"function checks expected column names dataframe. used beginning TADA functions ensure input data frame suitable (.e. either full physical/chemical results profile downloaded WQP TADA profile template downloaded EPA TADA webpage.)","code":""},{"path":"usepa.github.io/TADA/reference/checkColumns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Columns — checkColumns","text":"","code":"checkColumns(.data, expected_cols)"},{"path":"usepa.github.io/TADA/reference/checkColumns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Columns — checkColumns","text":".data dataframe expected_cols vector expected column names strings","code":""},{"path":"usepa.github.io/TADA/reference/checkType.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Type — checkType","title":"Check Type — checkType","text":"function checks inputs function expected type. used beginning TADA functions ensure inputs suitable.","code":""},{"path":"usepa.github.io/TADA/reference/checkType.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Type — checkType","text":"","code":"checkType(arg, type, paramName)"},{"path":"usepa.github.io/TADA/reference/checkType.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Type — checkType","text":"arg input argument check type Expected class input argument paramName Optional name argument use error message","code":""},{"path":"usepa.github.io/TADA/reference/ConvertDepthUnits.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Depth Units — ConvertDepthUnits","title":"Convert Depth Units — ConvertDepthUnits","text":"Default transform = TRUE. transform = TRUE, depth data converted consistent unit. converted depth value unit placed NEW column name original, plus prefix \"TADA.\" New columns created values/units column(s) interest. default unit \"m\" (meters), user can also choose \"ft\" \"\". transform = FALSE, depth data populated, function appends columns indicating target unit conversion factor row; depth field. conversions done time. user can review conversion factor information desired using feature. transformations performed columns created function prefix \"TADA.\" WQP columns retain original values.","code":""},{"path":"usepa.github.io/TADA/reference/ConvertDepthUnits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Depth Units — ConvertDepthUnits","text":"","code":"ConvertDepthUnits(   .data,   unit = \"m\",   fields = c(\"ActivityDepthHeightMeasure\", \"ActivityTopDepthHeightMeasure\",     \"ActivityBottomDepthHeightMeasure\", \"ResultDepthHeightMeasure\"),   transform = TRUE )"},{"path":"usepa.github.io/TADA/reference/ConvertDepthUnits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Depth Units — ConvertDepthUnits","text":".data TADA dataframe unit Character string input indicating target depth unit use conversions. Allowable values 'unit' either \"m\" (meters), \"ft\" (feet), \"\" (inches). 'unit' accepts one allowable value input. default unit = \"m\". fields Character string input indicating relevant depth data fields converted desired target unit new TADA column. Allowable values 'fields' \"ActivityDepthHeightMeasure\", \"ActivityTopDepthHeightMeasure\", \"ActivityBottomDepthHeightMeasure\", \"ResultDepthHeightMeasure\". default include depth fields. transform Boolean argument; default transform = TRUE. transform = TRUE, depth data converted target unit; additional columns added. transform = FALSE, depth data populated, function appends columns indicating target unit conversion factor row; depth field. conversions done time. user can review conversion factor information desired using feature.","code":""},{"path":"usepa.github.io/TADA/reference/ConvertDepthUnits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Depth Units — ConvertDepthUnits","text":"transform = TRUE, input dataframe returned depth data converted target unit; additional columns added. transform = FALSE, input dataframe returned additional columns including... specific ...","code":""},{"path":"usepa.github.io/TADA/reference/ConvertDepthUnits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Depth Units — ConvertDepthUnits","text":"","code":"# Load example dataset: data(Nutrients_Utah)  # Convert all depth units to meters: DepthUnitsConverted_m <- ConvertDepthUnits(Nutrients_Utah)  # Convert all depth units to feet: DepthUnitsConverted_ft <- ConvertDepthUnits(Nutrients_Utah, unit = \"ft\")  # Convert only the \"TADA.ActivityTopDepthHeightMeasure\" field to inches: TopDepthUnitsConverted_in <- ConvertDepthUnits(Nutrients_Utah,  unit = \"in\", fields = \"ActivityTopDepthHeightMeasure\")  # Do not convert any depth units, but add columns for target units and  # conversion factors for each depth measure: DepthUnitsNotConverted <- ConvertDepthUnits(Nutrients_Utah, transform = FALSE)"},{"path":"usepa.github.io/TADA/reference/ConvertResultUnits.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform Units to WQX Target Units — ConvertResultUnits","title":"Transform Units to WQX Target Units — ConvertResultUnits","text":"function compares measure units input data Water Quality Exchange (WQX) 3.0 QAQC Characteristic Validation table.","code":""},{"path":"usepa.github.io/TADA/reference/ConvertResultUnits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform Units to WQX Target Units — ConvertResultUnits","text":"","code":"ConvertResultUnits(.data, transform = TRUE)"},{"path":"usepa.github.io/TADA/reference/ConvertResultUnits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform Units to WQX Target Units — ConvertResultUnits","text":".data TADA dataframe transform Boolean argument two possible values, “TRUE” “FALSE”. Default transform = TRUE.","code":""},{"path":"usepa.github.io/TADA/reference/ConvertResultUnits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform Units to WQX Target Units — ConvertResultUnits","text":"transform=TRUE, result values units converted WQX target units. function changes values within \"TADA.ResultMeasure.MeasureUnitCode\" \"TADA.DetectionQuantitationLimitMeasure.MeasureUnitCode\" WQX target units converts respective values within \"TADA.ResultMeasureValue\" \"TADA.DetectionQuantitationLimitMeasure.MeasureValue\" fields. addition \"WQX.ResultMeasureValue.UnitConversion\" \"WQX.DetectionLimitMeasureValue.UnitConversion\", transform=TRUE add following two fields input dataframe, \"ResultMeasureUnitCode.Original\", \"DetectionLimitMeasureUnitCode.Original\", retain original result unit values. transform = FALSE, result values units converted WQX target units, columns appended indicate target units conversion factors , data can converted. addition \"WQX.ResultMeasureValue.UnitConversion\" \"WQX.DetectionLimitMeasureValue.UnitConversion\",  transform=FALSE add following two fields input dataframe: \"WQX.ConversionFactor\" \"WQX.TargetUnit\".","code":""},{"path":"usepa.github.io/TADA/reference/ConvertResultUnits.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transform Units to WQX Target Units — ConvertResultUnits","text":"function ALWAYS add following two columns input dataframe: \"WQX.ResultMeasureValue.UnitConversion\", \"WQX.DetectionLimitMeasureValue.UnitConversion\" two fields indicate data can converted.\"NoResultValue\" means data converted ResultMeasureValue, \"NoTargetUnit\" means data converted original unit associated target unit WQX. \"Convert\" means data can transformed, \"Converted\" means function run input transform = TRUE, values already converted. also uses following six fields autocleaned input dataframe: \"TADA.CharacteristicName\", \"TADA.ActivityMediaName\", \"TADA.ResultMeasureValue\", \"TADA.ResultMeasure.MeasureUnitCode\", \"TADA.DetectionQuantitationLimitMeasure.MeasureValue\", \"TADA.DetectionQuantitationLimitMeasure.MeasureUnitCode\" function adds following two fields transform=FALSE: Adds: \"WQX.ConversionFactor\" \"WQX.TargetUnit\".","code":""},{"path":"usepa.github.io/TADA/reference/ConvertResultUnits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform Units to WQX Target Units — ConvertResultUnits","text":"","code":"# Load example dataset: data(Nutrients_Utah)  ResultUnitsConverted <- ConvertResultUnits(Nutrients_Utah)  # Do not convert result values and units, but add two new columns titled # \"WQX.ConversionFactor\" and \"WQX.TargetUnit\": ResultUnitsNotConverted <- ConvertResultUnits(Nutrients_Utah, transform = FALSE) #> [1] \"Conversions required for range checks and TADATargetUnit conversions -- Unit conversions, data summaries, and data calculations may be affected.\""},{"path":"usepa.github.io/TADA/reference/ConvertSpecialChars.html","id":null,"dir":"Reference","previous_headings":"","what":"ConvertSpecialChars — ConvertSpecialChars","title":"ConvertSpecialChars — ConvertSpecialChars","text":"function screen column user's choice special characters. creates new column describes content column prior conversion numeric. also creates new column hold new, numeric column","code":""},{"path":"usepa.github.io/TADA/reference/ConvertSpecialChars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ConvertSpecialChars — ConvertSpecialChars","text":"","code":"ConvertSpecialChars(.data, col)"},{"path":"usepa.github.io/TADA/reference/ConvertSpecialChars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ConvertSpecialChars — ConvertSpecialChars","text":".data TADA profile object col character column converted numeric","code":""},{"path":"usepa.github.io/TADA/reference/ConvertSpecialChars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ConvertSpecialChars — ConvertSpecialChars","text":"Returns original dataframe two new columns: input column prefix \"TADA.\", holds numeric form original column, \"TADA.ResultValueDataTypes.Flag\", text describing type data contained within column interest, including \"Numeric\",\"Less \" (<), \"Greater \" (>), \"Approximate Value\" (~), \"Text\" (-z), \"Percentage\" (%), \"Comma-Separated Numeric\" (#,###)","code":""},{"path":"usepa.github.io/TADA/reference/CreateAnimatedMap.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Animated Map — CreateAnimatedMap","title":"Generate Animated Map — CreateAnimatedMap","text":"Animated map code adapted USGS blog: https://waterdata.usgs.gov/blog/large_sample_pull/","code":""},{"path":"usepa.github.io/TADA/reference/CreateAnimatedMap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Animated Map — CreateAnimatedMap","text":"","code":"CreateAnimatedMap(.data)"},{"path":"usepa.github.io/TADA/reference/CreateAnimatedMap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Animated Map — CreateAnimatedMap","text":".data TADA dataframe","code":""},{"path":"usepa.github.io/TADA/reference/CreateAnimatedMap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Animated Map — CreateAnimatedMap","text":"Animated map","code":""},{"path":"usepa.github.io/TADA/reference/decimalnumcount.html","id":null,"dir":"Reference","previous_headings":"","what":"decimalnumcount — decimalnumcount","title":"decimalnumcount — decimalnumcount","text":"character data type","code":""},{"path":"usepa.github.io/TADA/reference/decimalnumcount.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"decimalnumcount — decimalnumcount","text":"","code":"decimalnumcount(x)"},{"path":"usepa.github.io/TADA/reference/decimalnumcount.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"decimalnumcount — decimalnumcount","text":"x Numeric data field TADA profile","code":""},{"path":"usepa.github.io/TADA/reference/decimalnumcount.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"decimalnumcount — decimalnumcount","text":"Number values right decimal point character type data.","code":""},{"path":"usepa.github.io/TADA/reference/decimalplaces.html","id":null,"dir":"Reference","previous_headings":"","what":"decimalplaces — decimalplaces","title":"decimalplaces — decimalplaces","text":"numeric data type","code":""},{"path":"usepa.github.io/TADA/reference/decimalplaces.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"decimalplaces — decimalplaces","text":"","code":"decimalplaces(x)"},{"path":"usepa.github.io/TADA/reference/decimalplaces.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"decimalplaces — decimalplaces","text":"x Numeric data field TADA profile","code":""},{"path":"usepa.github.io/TADA/reference/decimalplaces.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"decimalplaces — decimalplaces","text":"Number values right decimal point numeric type data.","code":""},{"path":"usepa.github.io/TADA/reference/DepthProfileData.html","id":null,"dir":"Reference","previous_headings":"","what":"Depth Profile Flag & Unit Conversion — DepthProfileData","title":"Depth Profile Flag & Unit Conversion — DepthProfileData","text":"Function checks dataset depth profile data. depth profile columns populated, function appends 'Conversion.Factor' columns populates columns based original unit (MeasureUnitCode columns) target unit, defined 'unit' argument. 'WQX.Depth.TargetUnit' column also appended, indicating unit selected depth data converted . transform = FALSE, output includes 'Conversion.Factor' columns 'WQX.Depth.TargetUnit' column. transform = TRUE, output includes converted depth data 'WQX.Depth.TargetUnit' column, acts flag indicating rows converted. Default transform = TRUE.","code":""},{"path":"usepa.github.io/TADA/reference/DepthProfileData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Depth Profile Flag & Unit Conversion — DepthProfileData","text":"","code":"DepthProfileData(   .data,   unit = \"m\",   fields = c(\"ActivityDepthHeightMeasure\", \"ActivityTopDepthHeightMeasure\",     \"ActivityBottomDepthHeightMeasure\", \"ResultDepthHeightMeasure\"),   transform = TRUE )"},{"path":"usepa.github.io/TADA/reference/DepthProfileData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Depth Profile Flag & Unit Conversion — DepthProfileData","text":".data TADA dataframe unit Character string input indicating uniform unit depth data converted . Allowable values 'unit' either 'm' (meter), 'ft' (feet), '' (inch). 'unit' accepts one allowable value input. Default unit = \"m\". fields Character string input indicating depth fields checked data. Allowable values 'fields' 'ActivityDepthHeightMeasure,' 'ActivityTopDepthHeightMeasure,' 'ActivityBottomDepthHeightMeasure,' 'ResultDepthHeightMeasure.'. Default include allowable values. transform Boolean argument; transform = FALSE, output includes 'Conversion.Factor' columns 'WQX.Depth.TargetUnit' column. transform = TRUE, output includes converted depth data 'Depth Target Unit' column, acts flag indicating rows converted. Default transform = TRUE.","code":""},{"path":"usepa.github.io/TADA/reference/DepthProfileData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Depth Profile Flag & Unit Conversion — DepthProfileData","text":"Full dataset converted uniform depth units 'WQX.Depth.TargetUnit' column, acts flag indicating rows converted. transform = FALSE, output full dataset 'Conversion.Factor' columns 'WQX.Depth.TargetUnit' column.","code":""},{"path":"usepa.github.io/TADA/reference/FilterFieldReview.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate list of unique values in a given field — FilterFieldReview","title":"Generate list of unique values in a given field — FilterFieldReview","text":"Function creates table pie chart unique values, counts values chosen field dataframe.","code":""},{"path":"usepa.github.io/TADA/reference/FilterFieldReview.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate list of unique values in a given field — FilterFieldReview","text":"","code":"FilterFieldReview(field, .data)"},{"path":"usepa.github.io/TADA/reference/FilterFieldReview.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate list of unique values in a given field — FilterFieldReview","text":"field Field name .data Optional argument; TADA dataframe","code":""},{"path":"usepa.github.io/TADA/reference/FilterFieldReview.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate list of unique values in a given field — FilterFieldReview","text":"table pie chart unique values selected field.","code":""},{"path":"usepa.github.io/TADA/reference/FilterFieldReview.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate list of unique values in a given field — FilterFieldReview","text":"","code":"# Load example dataset: data(Nutrients_Utah)  # Create table and pie chart of \"Hydrologic Condition\" unique values and counts: FieldReview_HydrologicCondition <- FilterFieldReview(field = \"HydrologicCondition\", Nutrients_Utah)  #>             FieldValue Count #> 7 Stable, normal stage   649 #> 2       Not applicable   247 #> 6    Stable, low stage   120 #> 1        Falling stage    13 #> 5   Stable, high stage     7 #> 4         Rising stage     5 #> 3       Not determined     3"},{"path":"usepa.github.io/TADA/reference/FilterFields.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate list of field names — FilterFields","title":"Generate list of field names — FilterFields","text":"Function creates list fields input dataframe well number unique values field. list intended inform users specific fields explore filter.","code":""},{"path":"usepa.github.io/TADA/reference/FilterFields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate list of field names — FilterFields","text":"","code":"FilterFields(.data)"},{"path":"usepa.github.io/TADA/reference/FilterFields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate list of field names — FilterFields","text":".data TADA dataframe","code":""},{"path":"usepa.github.io/TADA/reference/FilterFields.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate list of field names — FilterFields","text":"table fields count unique values field.","code":""},{"path":"usepa.github.io/TADA/reference/FilterFields.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate list of field names — FilterFields","text":"","code":"# Load example dataset: data(Nutrients_Utah)  # Create a table of fields and count of unique values in each field: Fields_Nutrients_Utah <- FilterFields(Nutrients_Utah) #>                             FieldName Count #> 1              OrganizationFormalName     8 #> 2                    ActivityTypeCode    10 #> 3        ActivityMediaSubdivisionName     4 #> 4                         ProjectName    14 #> 5                 ActivityCommentText    12 #> 6                 HydrologicCondition     8 #> 7                     HydrologicEvent     4 #> 8                MeasureQualifierCode     6 #> 9             SampleTissueAnatomyName     1 #> 10                     LaboratoryName    12 #> 11 DetectionQuantitationLimitTypeName     7 #> 12         MonitoringLocationTypeName    14 #> 13             TADA.ActivityMediaName     1 #> 14            TADA.CharacteristicName     3"},{"path":"usepa.github.io/TADA/reference/FilterParFieldReview.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate list of unique values in a given field subset by parameter — FilterParFieldReview","title":"Generate list of unique values in a given field subset by parameter — FilterParFieldReview","text":"Function creates table pie chart unique values, counts values, chosen field dataframe subset parameter.","code":""},{"path":"usepa.github.io/TADA/reference/FilterParFieldReview.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate list of unique values in a given field subset by parameter — FilterParFieldReview","text":"","code":"FilterParFieldReview(field, .data, parameter)"},{"path":"usepa.github.io/TADA/reference/FilterParFieldReview.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate list of unique values in a given field subset by parameter — FilterParFieldReview","text":"field Field name .data Optional argument; TADA dataframe parameter Characteristic name (parameter name) dataframe.","code":""},{"path":"usepa.github.io/TADA/reference/FilterParFieldReview.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate list of unique values in a given field subset by parameter — FilterParFieldReview","text":"table pie chart unique values selected field.","code":""},{"path":"usepa.github.io/TADA/reference/FilterParFieldReview.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate list of unique values in a given field subset by parameter — FilterParFieldReview","text":"","code":"# Load example dataset: data(Nutrients_Utah)  # Create table and pie chart of monitoring locations for the parameter \"AMMONIA\" in dataframe: AmmoniaMonitoringLocations <- FilterParFieldReview(field = \"MonitoringLocationIdentifier\", Nutrients_Utah, parameter = \"AMMONIA\")  #>                FieldValue Count #> 2            NTHRNUTE-DRB     8 #> 1            NTHRNUTE-DDC     6 #> 7            NTHRNUTE-IDR     6 #> 17           NTHRNUTE-WRB     6 #> 23        UTEMTN-RARE - 1     6 #> 15           NTHRNUTE-UFD     5 #> 3            NTHRNUTE-G4C     4 #> 8            NTHRNUTE-RKD     3 #> 26       UTEMTN-WM_GWMW_E     3 #> 27       UTEMTN-WM_GWMW_W     3 #> 9            NTHRNUTE-SCC     2 #> 19            UTEMTN-CW-N     2 #> 20           UTEMTN-CW-S2     2 #> 24          UTEMTN-RARE-2     2 #> 25        UTEMTN-RUIN_SPG     2 #> 4           NTHRNUTE-GW03     1 #> 5           NTHRNUTE-GW04     1 #> 6           NTHRNUTE-GW08     1 #> 10          NTHRNUTE-SW01     1 #> 11          NTHRNUTE-SW02     1 #> 12          NTHRNUTE-SW03     1 #> 13          NTHRNUTE-SW04     1 #> 14          NTHRNUTE-SW08     1 #> 16          NTHRNUTE-WGR2     1 #> 18   UTEMTN-CW Wash HW 95     1 #> 21 UTEMTN-Cow Camp Spring     1 #> 22    UTEMTN-ENTRANCE_SPG     1"},{"path":"usepa.github.io/TADA/reference/FilterParFields.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate list of field names subset by parameter — FilterParFields","title":"Generate list of field names subset by parameter — FilterParFields","text":"Function subsets input dataframe input parameter creates list fields subset dataframe well number unique values field. list intended inform users specific fields explore filter subset parameter.","code":""},{"path":"usepa.github.io/TADA/reference/FilterParFields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate list of field names subset by parameter — FilterParFields","text":"","code":"FilterParFields(.data, parameter)"},{"path":"usepa.github.io/TADA/reference/FilterParFields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate list of field names subset by parameter — FilterParFields","text":".data TADA dataframe parameter Characteristic name (parameter name) dataframe.","code":""},{"path":"usepa.github.io/TADA/reference/FilterParFields.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate list of field names subset by parameter — FilterParFields","text":"table fields count unique values field, subset parameter.","code":""},{"path":"usepa.github.io/TADA/reference/FilterParFields.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate list of field names subset by parameter — FilterParFields","text":"","code":"# Load example dataset: data(Nutrients_Utah)  # Create list of fields for parameter \"AMMONIA\" with number of unique values in each field: AmmoniaFields <- FilterParFields(Nutrients_Utah, parameter = \"AMMONIA\") #>                                         FieldName Count #> 1                                ActivityTypeCode     5 #> 2                    ActivityMediaSubdivisionName     1 #> 3                             ActivityCommentText     1 #> 4                             HydrologicCondition     1 #> 5                                 HydrologicEvent     1 #> 6         SampleCollectionMethod.MethodIdentifier     2 #> 7  SampleCollectionMethod.MethodIdentifierContext     2 #> 8               SampleCollectionMethod.MethodName     2 #> 9                   SampleCollectionEquipmentName     1 #> 10                           MethodSpeciationName     2 #> 11                           MeasureQualifierCode     3 #> 12                         ResultStatusIdentifier     1 #> 13                            ResultValueTypeName     1 #> 14                          ResultWeightBasisText     1 #> 15                     ResultTemperatureBasisText     1 #> 16                    ResultParticleSizeBasisText     1 #> 17                          DataQuality.BiasValue     1 #> 18                              ResultCommentText     1 #> 19        ResultAnalyticalMethod.MethodIdentifier     1 #> 20 ResultAnalyticalMethod.MethodIdentifierContext     1 #> 21              ResultAnalyticalMethod.MethodName     1 #> 22                                 LaboratoryName     3 #> 23                    ResultLaboratoryCommentText     1 #> 24             DetectionQuantitationLimitTypeName     3 #> 25                     MonitoringLocationTypeName     3 #> 26                         TADA.ActivityMediaName     1 #> 27             TADA.ResultMeasure.MeasureUnitCode     1 #> 28                  TADA.ResultSampleFractionText     2"},{"path":"usepa.github.io/TADA/reference/FilterParList.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate list of parameters — FilterParList","title":"Generate list of parameters — FilterParList","text":"Function generates list characteristics input dataframe, well number records . list intended inform users parameters explore filter.","code":""},{"path":"usepa.github.io/TADA/reference/FilterParList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate list of parameters — FilterParList","text":"","code":"FilterParList(.data)"},{"path":"usepa.github.io/TADA/reference/FilterParList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate list of parameters — FilterParList","text":".data TADA dataframe","code":""},{"path":"usepa.github.io/TADA/reference/FilterParList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate list of parameters — FilterParList","text":"list unique characteristics counts","code":""},{"path":"usepa.github.io/TADA/reference/FilterParList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate list of parameters — FilterParList","text":"","code":"# Load example dataset: data(Nutrients_Utah)  # Create a list of parameters in the dataset and the number of records of each paramter: ParameterList <- FilterParList(Nutrients_Utah) #>   FieldValue Count #> 3   NITROGEN  9037 #> 2    NITRATE  1979 #> 1    AMMONIA    72"},{"path":"usepa.github.io/TADA/reference/GenerateCensoredDataStats.html","id":null,"dir":"Reference","previous_headings":"","what":"Function summarizes censored data in dataset, including any substitutions made. — GenerateCensoredDataStats","title":"Function summarizes censored data in dataset, including any substitutions made. — GenerateCensoredDataStats","text":"Function summarizes censored data dataset, including substitutions made.","code":""},{"path":"usepa.github.io/TADA/reference/GenerateCensoredDataStats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function summarizes censored data in dataset, including any substitutions made. — GenerateCensoredDataStats","text":"","code":"GenerateCensoredDataStats(.data)"},{"path":"usepa.github.io/TADA/reference/GenerateCensoredDataStats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function summarizes censored data in dataset, including any substitutions made. — GenerateCensoredDataStats","text":".data Optional argument; TADA dataframe","code":""},{"path":"usepa.github.io/TADA/reference/GenerateCensoredDataStats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function summarizes censored data in dataset, including any substitutions made. — GenerateCensoredDataStats","text":"Summary table","code":""},{"path":"usepa.github.io/TADA/reference/GenerateMap.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Map — GenerateMap","title":"Generate Map — GenerateMap","text":"Function plot WQP stations map. Stations invalid imprecise latitude longitude colored red; stations colored blue.","code":""},{"path":"usepa.github.io/TADA/reference/GenerateMap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Map — GenerateMap","text":"","code":"GenerateMap(.data, flag = TRUE)"},{"path":"usepa.github.io/TADA/reference/GenerateMap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Map — GenerateMap","text":".data TADA dataframe flag Boolean argument; set equal \"TRUE\" \"FALSE\".","code":""},{"path":"usepa.github.io/TADA/reference/GenerateMap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Map — GenerateMap","text":"flag = TRUE, function colors invalid imprecise latitude longitude values red; colors stations blue. flag = FALSE, stations colored blue. default flag = TRUE.","code":""},{"path":"usepa.github.io/TADA/reference/GetDetCondRef.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Result Detection Condition Reference Table — GetDetCondRef","title":"Update Result Detection Condition Reference Table — GetDetCondRef","text":"Function downloads returns latest WQX ResultDetectionCondition Domain table, adds additional target unit information, writes data sysdata.rda.","code":""},{"path":"usepa.github.io/TADA/reference/GetDetCondRef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Result Detection Condition Reference Table — GetDetCondRef","text":"","code":"GetDetCondRef()"},{"path":"usepa.github.io/TADA/reference/GetDetCondRef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update Result Detection Condition Reference Table — GetDetCondRef","text":"sysdata.rda updated WQXResultDetectionConditionRef object (detection condition reference table censored data)","code":""},{"path":"usepa.github.io/TADA/reference/GetDetCondRef.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update Result Detection Condition Reference Table — GetDetCondRef","text":"function caches table called subsequent calls faster.","code":""},{"path":"usepa.github.io/TADA/reference/GetDetLimitRef.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Detection Quantitation Limit Type Reference Table — GetDetLimitRef","title":"Update Detection Quantitation Limit Type Reference Table — GetDetLimitRef","text":"Function downloads returns latest WQX DetectionQuantitationLimitType Domain table, adds additional target unit information, writes data sysdata.rda.","code":""},{"path":"usepa.github.io/TADA/reference/GetDetLimitRef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Detection Quantitation Limit Type Reference Table — GetDetLimitRef","text":"","code":"GetDetLimitRef()"},{"path":"usepa.github.io/TADA/reference/GetDetLimitRef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update Detection Quantitation Limit Type Reference Table — GetDetLimitRef","text":"sysdata.rda updated WQXDetectionQuantitationLimitTypeRef object (detection limit type reference table censored data)","code":""},{"path":"usepa.github.io/TADA/reference/GetDetLimitRef.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update Detection Quantitation Limit Type Reference Table — GetDetLimitRef","text":"function caches table called subsequent calls faster.","code":""},{"path":"usepa.github.io/TADA/reference/GetMeasureUnitRef.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Measure Unit Reference Table — GetMeasureUnitRef","title":"Update Measure Unit Reference Table — GetMeasureUnitRef","text":"Function downloads returns latest WQX MeasureUnit Domain table, adds additional target unit information, writes data sysdata.rda.","code":""},{"path":"usepa.github.io/TADA/reference/GetMeasureUnitRef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Measure Unit Reference Table — GetMeasureUnitRef","text":"","code":"GetMeasureUnitRef()"},{"path":"usepa.github.io/TADA/reference/GetMeasureUnitRef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update Measure Unit Reference Table — GetMeasureUnitRef","text":"sysdata.rda updated WQXunitRef object (unit conversion reference table)","code":""},{"path":"usepa.github.io/TADA/reference/GetMeasureUnitRef.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update Measure Unit Reference Table — GetMeasureUnitRef","text":"function caches table called subsequent calls faster.","code":""},{"path":"usepa.github.io/TADA/reference/GetWQXCharValRef.html","id":null,"dir":"Reference","previous_headings":"","what":"WQX QAQC Characteristic Validation Reference Table — GetWQXCharValRef","title":"WQX QAQC Characteristic Validation Reference Table — GetWQXCharValRef","text":"Function downloads returns newest available (cleaned) raw Water Quality Exchange (WQX) QAQC Characteristic Validation reference table. WQXcharValRef data frame contains information four functions: InvalidFraction, InvalidResultUnit, InvalidSpeciation, UncommonAnalyticalMethodID.","code":""},{"path":"usepa.github.io/TADA/reference/GetWQXCharValRef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"WQX QAQC Characteristic Validation Reference Table — GetWQXCharValRef","text":"","code":"GetWQXCharValRef()"},{"path":"usepa.github.io/TADA/reference/GetWQXCharValRef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"WQX QAQC Characteristic Validation Reference Table — GetWQXCharValRef","text":"Updated sysdata.rda updated WQXcharValRef object","code":""},{"path":"usepa.github.io/TADA/reference/GetWQXCharValRef.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"WQX QAQC Characteristic Validation Reference Table — GetWQXCharValRef","text":"function caches table called subsequent calls faster.","code":""},{"path":"usepa.github.io/TADA/reference/HarmonizationRefTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Unique Harmonization Reference Table — HarmonizationRefTable","title":"Generate Unique Harmonization Reference Table — HarmonizationRefTable","text":"Function generates harmonization reference table specific input dataframe. Users can review input data relates standard TADA values CharacteristicName, ResultSampleFractionText, MethodSpecificationName, ResultMeasure.MeasureUnitCode can optionally edit reference file meet needs.","code":""},{"path":"usepa.github.io/TADA/reference/HarmonizationRefTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Unique Harmonization Reference Table — HarmonizationRefTable","text":"","code":"HarmonizationRefTable(.data, download = FALSE)"},{"path":"usepa.github.io/TADA/reference/HarmonizationRefTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Unique Harmonization Reference Table — HarmonizationRefTable","text":".data TADA dataframe download Boolean argument; download = TRUE, output downloaded current working directory.","code":""},{"path":"usepa.github.io/TADA/reference/HarmonizationRefTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Unique Harmonization Reference Table — HarmonizationRefTable","text":"Harmonization Reference Table unique input dataframe","code":""},{"path":"usepa.github.io/TADA/reference/HarmonizationRefTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Unique Harmonization Reference Table — HarmonizationRefTable","text":"","code":"# Load example dataset: data(Nutrients_Utah)  # Create a harmonization reference table for dataframe: CreateRefTable <- HarmonizationRefTable(Nutrients_Utah)  # Create and download (to your working directory) a harmonization reference # table for dataframe:  if (FALSE) { DownloadRefTable <- HarmonizationRefTable(Nutrients_Utah, download = TRUE) }"},{"path":"usepa.github.io/TADA/reference/HarmonizeCensoredData.html","id":null,"dir":"Reference","previous_headings":"","what":"Harmonize censored data — HarmonizeCensoredData","title":"Harmonize censored data — HarmonizeCensoredData","text":"Function substitutes monitoring device/method detection limits (available) result values applicable.","code":""},{"path":"usepa.github.io/TADA/reference/HarmonizeCensoredData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Harmonize censored data — HarmonizeCensoredData","text":"","code":"HarmonizeCensoredData(transform, .data)"},{"path":"usepa.github.io/TADA/reference/HarmonizeCensoredData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Harmonize censored data — HarmonizeCensoredData","text":"transform Boolean argument two possible values, “TRUE” “FALSE”. Default transform = TRUE. .data Optional argument; TADA dataframe","code":""},{"path":"usepa.github.io/TADA/reference/HarmonizeCensoredData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Harmonize censored data — HarmonizeCensoredData","text":"transform=TRUE, monitoring device/method detection limits (available) substituted result values units. transform = FALSE, monitoring device/method detection limits (available) substituted result values units - Instead, columns appended rows may include censored data. flag indicates 1) row contains censored data, 2) monitoring device/method detection limits available.","code":""},{"path":"usepa.github.io/TADA/reference/HarmonizeData.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform CharacteristicName, ResultSampleFractionText, MethodSpecificationName,\r\nand ResultMeasure.MeasureUnitCode values to TADA standards. — HarmonizeData","title":"Transform CharacteristicName, ResultSampleFractionText, MethodSpecificationName,\r\nand ResultMeasure.MeasureUnitCode values to TADA standards. — HarmonizeData","text":"Function compares input dataframe TADA Harmonization Reference Table, makes synonymous data consistent. Optional outputs include: 1) dataframe Harmonization columns appended, 2) dataframe CharacteristicName, ResultSampleFractionText, MethodSpecificationName, ResultMeasure.MeasureUnitCode converted TADA standards 3) four fields converted Harmonization Reference Table columns appended. Default transform = TRUE flag = TRUE.","code":""},{"path":"usepa.github.io/TADA/reference/HarmonizeData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform CharacteristicName, ResultSampleFractionText, MethodSpecificationName,\r\nand ResultMeasure.MeasureUnitCode values to TADA standards. — HarmonizeData","text":"","code":"HarmonizeData(.data, ref, transform = TRUE, flag = TRUE)"},{"path":"usepa.github.io/TADA/reference/HarmonizeData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform CharacteristicName, ResultSampleFractionText, MethodSpecificationName,\r\nand ResultMeasure.MeasureUnitCode values to TADA standards. — HarmonizeData","text":".data TADA dataframe ref Optional argument specify dataframe use reference file. primary use argument user generated harmonization reference file unique data, made changes file. transform Boolean argument; transforms /converts original values dataframe TADA Harmonization Reference Table values following fields: CharacteristicName, ResultSampleFractionText, MethodSpecificationName, ResultMeasure.MeasureUnitCode. Default transform = TRUE. flag Boolean argument; appends columns TADA Harmonization Reference Table dataframe. Default flag = TRUE.","code":""},{"path":"usepa.github.io/TADA/reference/HarmonizeData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform CharacteristicName, ResultSampleFractionText, MethodSpecificationName,\r\nand ResultMeasure.MeasureUnitCode values to TADA standards. — HarmonizeData","text":"transform = FALSE flag = TRUE, Harmonization Reference Table columns appended dataframe . transform = TRUE flag = TRUE, Harmonization columns appended dataframe transformations executed. transform = TRUE flag = FALSE, transformations executed . transform = FALSE flag = FALSE, error returned (function return input dataframe unchanged input allowed).","code":""},{"path":"usepa.github.io/TADA/reference/HarmonizeData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform CharacteristicName, ResultSampleFractionText, MethodSpecificationName,\r\nand ResultMeasure.MeasureUnitCode values to TADA standards. — HarmonizeData","text":"","code":"# Load example dataset: data(Nutrients_Utah)  # Append harmonization reference table columns to dataframe and transform/convert # data to the reference table values: Nutrients_Harmonized <- HarmonizeData(Nutrients_Utah)  # Transform/convert data to the harmonization reference table values, but # do not append any columns to dataframe: Nutrients_Harmonized_noflags <- HarmonizeData(Nutrients_Utah, flag = FALSE)  # Append harmonization reference table columns to dataframe, but do not # transform/convert data to the reference table values: Nutrients_NotHarmonized <- HarmonizeData(Nutrients_Utah, transform = FALSE) #> [1] \"Be aware that you must run this function with transform = TRUE to use subsequent TADA functions.\"  # Append harmonization reference table columns to dataframe and transform/convert # data to the USER SUPPLIED reference table values: UniqueHarmonizationRef <- HarmonizationRefTable(Nutrients_Utah, download = FALSE) Nutrients_Harmonized_UserSuppliedRef <- HarmonizeData(Nutrients_Utah, ref = UniqueHarmonizationRef)"},{"path":"usepa.github.io/TADA/reference/idCensoredData.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare Censored Data — idCensoredData","title":"Prepare Censored Data — idCensoredData","text":"function identifies censored data records characterizes non-detects -detects based ResultDetectionConditionText DetectionQuantitationLimitTypeName. also identifies records populated limits conditions grouped - non-detects \"\", flags records conflict ResultDetectionConditionText DetectionQuantitationLimitTypeName. function used default simpleCensoredMethods summarizeCensoredData functions, can used .","code":""},{"path":"usepa.github.io/TADA/reference/idCensoredData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare Censored Data — idCensoredData","text":"","code":"idCensoredData(.data)"},{"path":"usepa.github.io/TADA/reference/idCensoredData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare Censored Data — idCensoredData","text":".data TADA dataframe","code":""},{"path":"usepa.github.io/TADA/reference/idCensoredData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare Censored Data — idCensoredData","text":"TADA dataframe additional column named TADA.CensoredData.Flag, indicates disagreements ResultDetectionCondition DetectionQuantitationLimitTypeName.","code":""},{"path":"usepa.github.io/TADA/reference/identifyPotentialDuplicates.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Potential Duplicate Data Uploads — identifyPotentialDuplicates","title":"Identify Potential Duplicate Data Uploads — identifyPotentialDuplicates","text":"Identifies data records uploaded different organizations date, time, characteristic name, result value within X meters flags potential duplicates. However, discretion data user determine data records unique represent overlap cause issues data analysis.","code":""},{"path":"usepa.github.io/TADA/reference/identifyPotentialDuplicates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Potential Duplicate Data Uploads — identifyPotentialDuplicates","text":"","code":"identifyPotentialDuplicates(.data, dist_buffer = 100)"},{"path":"usepa.github.io/TADA/reference/identifyPotentialDuplicates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Potential Duplicate Data Uploads — identifyPotentialDuplicates","text":".data TADA dataframe dist_buffer Numeric. distance meters two sites measurements time day parameter flagged potential duplicates.","code":""},{"path":"usepa.github.io/TADA/reference/identifyPotentialDuplicates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Potential Duplicate Data Uploads — identifyPotentialDuplicates","text":"TADA dataframe two additional columns, duplicate flag column, distance sites (meters) column.","code":""},{"path":"usepa.github.io/TADA/reference/InvalidCoordinates.html","id":null,"dir":"Reference","previous_headings":"","what":"Invalid coordinates — InvalidCoordinates","title":"Invalid coordinates — InvalidCoordinates","text":"function identifies flags invalid coordinate data. clean_outsideUSA = \"\" clean_imprecise = FALSE, column appended titled \"TADA.InvalidCoordinates.Flag\" following flags: 1) latitude less zero, row flagged \"LAT_OutsideUSA\" (exception American Samoa, Northern Mariana Islands, Guam), 2) longitude greater zero less 145, row flagged \"LONG_OutsideUSA\" (exception American Samoa, Northern Mariana Islands, Guam), 3) latitude longitude contains string, \"999\", row flagged invalid, 4) Finally, precision can measured number decimal places latitude longitude provided. either latitude longitude least three numbers right decimal point, row flagged \"Imprecise\". Occasionally latitude longitude measurements flagged outside United States data entered negative positive vice versa. function offers option clean_outsideUSA = \"change sign\" fix issue. However, data owners fix raw data WQX. assistance changing raw data, email WQX help desk: WQX@epa.gov","code":""},{"path":"usepa.github.io/TADA/reference/InvalidCoordinates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Invalid coordinates — InvalidCoordinates","text":"","code":"InvalidCoordinates(   .data,   clean_outsideUSA = c(\"no\", \"remove\", \"change sign\"),   clean_imprecise = FALSE,   errorsonly = FALSE )"},{"path":"usepa.github.io/TADA/reference/InvalidCoordinates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Invalid coordinates — InvalidCoordinates","text":".data TADA dataframe clean_outsideUSA Character argument options \"\", \"remove\", \"change sign\"; flags coordinates outside USA clean_outsideUSA = \"\"; removes data coordinates outside United States clean_outsideUSA = \"remove\"; changes sign lat/long coordinates flagged outside USA clean_outside = \"change sign\"; Default clean_outsideUSA = \"\". clean_imprecise Boolean argument; removes imprecise data clean_imprecise = TRUE. Default clean_imprecise = FALSE. errorsonly Boolean argument; Return flagged data errorsonly = TRUE; default errorsonly = FALSE.","code":""},{"path":"usepa.github.io/TADA/reference/InvalidCoordinates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Invalid coordinates — InvalidCoordinates","text":"clean_outsideUSA \"\", \"change sign\", clean_imprecise argument FALSE, column flagging rows respective QA check appended input dataframe. clean_outsideUSA \"remove\" clean_imprecise TRUE, \"invalid\" \"imprecise\" data removed, respectively. errorsonly TRUE, dataframe filtered show data flagged invalid, imprecise, United States. Defaults clean_outsideUSA = \"\", clean_imprecise = FALSE, errorsonly = FALSE.","code":""},{"path":"usepa.github.io/TADA/reference/InvalidCoordinates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Invalid coordinates — InvalidCoordinates","text":"","code":"# Load example dataset: data(Nutrients_Utah)  # Flag, but do not remove, data with invalid coordinates in new column  # titled \"TADA.InvalidCoordinates.Flag\": # Return ALL data: InvalidCoord_flags <- InvalidCoordinates(Nutrients_Utah)  # Flag, but do not remove, data with invalid coordinates in new column  # titled \"TADA.InvalidCoordinates.Flag\" # Return ONLY the flagged data: InvalidCoord_flags_errorsonly <- InvalidCoordinates(Nutrients_Utah, errorsonly = TRUE)  # Remove data with coordinates outside the USA, but keep flagged data with  # imprecise coordinates: OutsideUSACoord_removed <- InvalidCoordinates(Nutrients_Utah, clean_outsideUSA = \"remove\")  # Change the sign of coordinates flagged as outside the USA and keep all # flagged data: OutsideUSACoord_changed <- InvalidCoordinates(Nutrients_Utah, clean_outsideUSA = \"change sign\") #> [1] \"When clean_outsideUSA == change sign, the sign for any lat/long coordinates flagged as outside of USA are switched. This is a temporary solution. Data owners should fix the raw data to address invalid coordinates through WQX. For assistance fixing data errors you see in the WQP, email the WQX helpdesk (WQX@epa.gov).\"  # Remove data with imprecise coordinates, but keep flagged data with coordinates outside the USA; # imprecise data may include a series of 999's to the right of the decimal points; # alternatively, imprecise data may have less than 3 significant figures to the right # of the decimal point: ImpreciseCoord_removed <- InvalidCoordinates(Nutrients_Utah, clean_imprecise = TRUE)  # Remove data with imprecise coordinates or coordinates outside the USA from the dataframe: InvalidCoord_removed <- InvalidCoordinates(Nutrients_Utah, clean_outsideUSA = \"remove\", clean_imprecise = TRUE) #> [1] \"All invalid coordinates were removed. Returning input dataframe with TADA.InvalidCoordinates.Flag column for tracking.\""},{"path":"usepa.github.io/TADA/reference/InvalidFraction.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Sample Fraction Validity — InvalidFraction","title":"Check Sample Fraction Validity — InvalidFraction","text":"Function checks validity characteristic-fraction combination dataframe. clean = TRUE, rows invalid characteristic-fraction combinations removed. Default clean = TRUE. errorsonly = TRUE, invalid characteristic-fraction combinations returned. Default errorsonly = FALSE.","code":""},{"path":"usepa.github.io/TADA/reference/InvalidFraction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Sample Fraction Validity — InvalidFraction","text":"","code":"InvalidFraction(.data, clean = TRUE, errorsonly = FALSE)"},{"path":"usepa.github.io/TADA/reference/InvalidFraction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Sample Fraction Validity — InvalidFraction","text":".data TADA dataframe clean Boolean argument; removes \"Invalid\" characteristic-fraction combinations dataframe clean = TRUE. Default clean = TRUE. errorsonly Boolean argument; filters show \"Invalid\" characteristic-fraction combinations dataframe errorsonly = TRUE. Default errorsonly = FALSE.","code":""},{"path":"usepa.github.io/TADA/reference/InvalidFraction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Sample Fraction Validity — InvalidFraction","text":"clean = FALSE errorsonly = FALSE, function adds following column dataframe: TADA.SampleFraction.Flag. column flags CharacteristicName ResultSampleFractionText combination dataframe either \"Nonstandardized\", \"Invalid\", \"Valid\". clean = FALSE errorsonly = TRUE, TADA.SampleFraction.Flag still added data filtered show \"Invalid\" rows . clean = TRUE errorsonly = FALSE, \"Invalid\" rows removed dataframe column appended. clean = TRUE errorsonly = TRUE, function execute error message returned.","code":""},{"path":"usepa.github.io/TADA/reference/InvalidFraction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Sample Fraction Validity — InvalidFraction","text":"","code":"# Load example dataset: data(Nutrients_Utah)  # Remove data with invalid characteristic-fraction combinations: InvalidFraction_clean <- InvalidFraction(Nutrients_Utah) #> [1] \"All characteristic/fraction combinations are valid in your dataframe. Returning input dataframe with TADA.SampleFraction.Flag column for tracking.\"  # Flag, but do not remove, data with invalid characteristic-fraction combinations # in new column titled \"TADA.SampleFraction.Flag\": InvalidFraction_flags <- InvalidFraction(Nutrients_Utah, clean = FALSE) #> [1] \"All characteristic/fraction combinations are valid in your dataframe. Returning input dataframe with TADA.SampleFraction.Flag column for tracking.\"  # Show only invalid characteristic-fraction combinations: InvalidFraction_errorsonly <- InvalidFraction(Nutrients_Utah, clean = FALSE, errorsonly = TRUE) #> [1] \"This dataframe is empty because we did not find any invalid fraction/characteristic combinations in your dataframe\""},{"path":"usepa.github.io/TADA/reference/InvalidMethod.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for Invalid Analytical Methods — InvalidMethod","title":"Check for Invalid Analytical Methods — InvalidMethod","text":"Function checks validity characteristic-analytical method combination dataframe. clean = TRUE, rows invalid characteristic-analytical method combinations removed. Default clean = TRUE. errorsonly = TRUE, dataframe filtered show invalid characteristic-analytical method combinations. Default errorsonly = FALSE.","code":""},{"path":"usepa.github.io/TADA/reference/InvalidMethod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for Invalid Analytical Methods — InvalidMethod","text":"","code":"InvalidMethod(.data, clean = TRUE, errorsonly = FALSE)"},{"path":"usepa.github.io/TADA/reference/InvalidMethod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for Invalid Analytical Methods — InvalidMethod","text":".data TADA dataframe clean Boolean argument; removes \"Invalid\" characteristic-analytical method combinations dataframe clean = TRUE. Default clean = TRUE. errorsonly Boolean argument; filters dataframe show \"Invalid\" characteristic-analytical method combinations errorsonly = TRUE. Default errorsonly = FALSE.","code":""},{"path":"usepa.github.io/TADA/reference/InvalidMethod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for Invalid Analytical Methods — InvalidMethod","text":"clean = FALSE errorsonly = FALSE, function adds following column dataframe: TADA.AnalyticalMethod.Flag. column flags invalid CharacteristicName, ResultAnalyticalMethod/MethodIdentifier, ResultAnalyticalMethod/MethodIdentifierContext combinations dataframe either \"Nonstandardized\", \"Invalid\", \"Valid\". clean = FALSE errorsonly = TRUE, dataframe filtered show \"Invalid\" characteristic-analytical method combinations; column TADA.AnalyticalMethod.Flag still appended. clean = TRUE errorsonly = FALSE, \"Invalid\" rows removed dataframe column appended.","code":""},{"path":"usepa.github.io/TADA/reference/InvalidMethod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for Invalid Analytical Methods — InvalidMethod","text":"","code":"# Load example dataset data(Nutrients_Utah)  # Remove invalid characteristic-analytical method combinations from dataframe: InvalidMethod_clean <- InvalidMethod(Nutrients_Utah) #> [1] \"No invalid method/characteristic combinations in your dataframe. Returning the input dataframe with TADA.AnalyticalMethod.Flag column for tracking.\"  # Flag, but do not remove, invalid characteristic-analytical method combinations # in new column titled \"TADA.AnalyticalMethod.Flag\": InvalidMethod_flags <- InvalidMethod(Nutrients_Utah, clean = FALSE) #> [1] \"No invalid method/characteristic combinations in your dataframe. Returning the input dataframe with TADA.AnalyticalMethod.Flag column for tracking.\"  # Show only invalid characteristic-analytical method combinations: InvalidMethod_errorsonly <- InvalidMethod(Nutrients_Utah, clean = FALSE, errorsonly = TRUE) #> [1] \"This dataframe is empty because we did not find any invalid method/characteristic combinations in your dataframe\""},{"path":"usepa.github.io/TADA/reference/InvalidResultUnit.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Result Unit Validity — InvalidResultUnit","title":"Check Result Unit Validity — InvalidResultUnit","text":"Function checks validity characteristic-media-result unit combination dataframe. clean = \"invalid_only\", rows invalid characteristic-media-result unit combinations removed. Default clean = \"invalid_only\". errorsonly = TRUE, dataframe filtered show rows invalid nonstandardized characteristic-media-result unit combinations. Default errorsonly = FALSE.","code":""},{"path":"usepa.github.io/TADA/reference/InvalidResultUnit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Result Unit Validity — InvalidResultUnit","text":"","code":"InvalidResultUnit(   .data,   clean = c(\"invalid_only\", \"nonstandardized_only\", \"both\", \"none\"),   errorsonly = FALSE )"},{"path":"usepa.github.io/TADA/reference/InvalidResultUnit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Result Unit Validity — InvalidResultUnit","text":".data TADA dataframe clean Character argument options \"invalid_only\", \"nonstandardized_only\", \"\", \"none.\" default clean = \"invalid_only\" removes rows data flagged \"Invalid\" characteristic-media-result unit combinations. clean = \"nonstandardized_only\", function removes rows data flagged \"Nonstandardized\" characteristic-media-result unit combinations. clean = \"\", function removes rows data flagged either \"Invalid\" \"Nonstandardized\". clean = \"none\", function remove \"Invalid\" \"Nonstandardized\" rows data. errorsonly Boolean argument; filters dataframe show \"Invalid\" characteristic-media-result unit combinations errorsonly = TRUE. Default errorsonly = FALSE.","code":""},{"path":"usepa.github.io/TADA/reference/InvalidResultUnit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Result Unit Validity — InvalidResultUnit","text":"clean = \"none\" errorsonly = FALSE, function adds following column dataframe: TADA.ResultUnit.Flag. column flags CharacteristicName, ActivityMediaName, ResultMeasure/MeasureUnitCode combination dataframe either \"Nonstandardized\", \"Invalid\", \"Valid\". clean = \"none\" errorsonly = TRUE, dataframe filtered show \"Invalid\" \"Nonstandardized data; column TADA.ResultUnit.Flag still appended. clean = \"invalid_only\" errorsonly = FALSE, \"Invalid\" rows removed dataframe, \"Nonstandardized\" rows retained. clean = \"nonstandardized_only\" errorsonly = FALSE, \"Nonstandardized\" rows removed, \"Invalid\" rows retained. default clean = \"invalid_only\" errorsonly = FALSE.","code":""},{"path":"usepa.github.io/TADA/reference/InvalidResultUnit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Result Unit Validity — InvalidResultUnit","text":"","code":"# Load example dataset: data(Nutrients_Utah)  # Remove data with invalid characteristic-media-result unit combinations from dataframe,  # but retain nonstandardized combinations flagged in new column 'TADA.ResultUnit.Flag': InvalidUnit_clean <- InvalidResultUnit(Nutrients_Utah)  # Remove data with nonstandardized characteristic-media-result unit combinations  # from dataframe but retain invalid combinations flagged in new column 'TADA.ResultUnit.Flag: NonstandardUnit_clean <- InvalidResultUnit(Nutrients_Utah, clean = \"nonstandardized_only\")  # Remove both invalid and nonstandardized characteristic-media-result unit combinations # from dataframe: ResultUnit_clean <- InvalidResultUnit(Nutrients_Utah, clean = \"both\")  # Flag, but do not remove, data with invalid or nonstandardized characteristic-media-result unit # combinations in new column titled \"TADA.ResultUnit.Flag\": InvalidUnit_flags <- InvalidResultUnit(Nutrients_Utah, clean = \"none\") #> Warning: Metadata transformations may be adversely affected by choosing to retain 'Invalid' result units. Check these records before proceeding with transformations and/or set clean = 'invalid_only' or 'both'.  # Show only invalid characteristic-media-result unit combinations: InvalidUnit_errorsonly <- InvalidResultUnit(Nutrients_Utah, clean = \"nonstandardized_only\", errorsonly = TRUE) #> [1] \"This dataframe is empty because either we did not find any invalid/nonstandardized characteristic-media-result unit combinations or they were all filtered out\"  # Show only nonstandardized characteristic-media-result unit combinations: NonstandardUnit_errorsonly <- InvalidResultUnit(Nutrients_Utah, clean = \"invalid_only\", errorsonly = TRUE)"},{"path":"usepa.github.io/TADA/reference/InvalidSpeciation.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Method Speciation Validity — InvalidSpeciation","title":"Check Method Speciation Validity — InvalidSpeciation","text":"Function checks validity characteristic-method speciation combination dataframe. clean = \"invalid_only\", rows invalid characteristic-method speciation combinations removed. Default clean = \"invalid_only\". errorsonly = TRUE, dataframe filtered show rows invalid nonstandardized characteristic-method speciation combinations. Default errorsonly = FALSE.","code":""},{"path":"usepa.github.io/TADA/reference/InvalidSpeciation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Method Speciation Validity — InvalidSpeciation","text":"","code":"InvalidSpeciation(   .data,   clean = c(\"invalid_only\", \"nonstandardized_only\", \"both\", \"none\"),   errorsonly = FALSE )"},{"path":"usepa.github.io/TADA/reference/InvalidSpeciation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Method Speciation Validity — InvalidSpeciation","text":".data TADA dataframe clean Character argument options \"invalid_only\", \"nonstandardized_only\", \"\", \"none.\" default clean = \"invalid_only\" removes rows data flagged \"Invalid\" characteristic-method speciation combinations. clean = \"nonstandardized_only\", function removes rows data flagged \"Nonstandardized\" characteristic-method speciation combinations. clean = \"\", function removes rows data flagged either \"Invalid\" \"Nonstandardized\". clean = \"none\", function remove \"Invalid\" \"Nonstandardized\" rows data. errorsonly Boolean argument; filters show \"Invalid\" characteristic-method speciation combinations dataframe errorsonly = TRUE. Default errorsonly = FALSE.","code":""},{"path":"usepa.github.io/TADA/reference/InvalidSpeciation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Method Speciation Validity — InvalidSpeciation","text":"clean = \"none\" errorsonly = FALSE, function adds following column dataframe: TADA.MethodSpeciation.Flag. column flags CharacteristicName MethodSpecificationName combination dataframe either \"Nonstandardized\", \"Invalid\", \"Valid\". clean = \"none\" errorsonly = TRUE, dataframe filtered show \"Invalid\" \"Nonstandardized data; column TADA.MethodSpeciation.Flag still appended. clean = \"invalid_only\" errorsonly = FALSE, \"Invalid\" rows removed dataframe, \"Nonstandardized\" rows retained. clean = \"nonstandardized_only\" errorsonly = FALSE, \"Nonstandardized\" rows removed, \"Invalid\" rows retained. default clean = \"invalid_only\" errorsonly = FALSE.","code":""},{"path":"usepa.github.io/TADA/reference/InvalidSpeciation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Method Speciation Validity — InvalidSpeciation","text":"","code":"# Load example dataset: data(Nutrients_Utah)  # Remove data with invalid characteristic-method speciation combinations from dataframe,  # but retain nonstandardized combinations flagged in new column 'TADA.MethodSpeciation.Flag': InvalidSpeciation_clean <- InvalidSpeciation(Nutrients_Utah)  # Remove data with nonstandardized characteristic-method speciation combinations  # from dataframe but retain invalid combinations flagged in new column 'TADA.MethodSpeciation.Flag': NonstandardSpeciation_clean <- InvalidSpeciation(Nutrients_Utah, clean = \"nonstandardized_only\")  # Remove both invalid and nonstandardized characteristic-method speciation combinations # from dataframe: Speciation_clean <- InvalidSpeciation(Nutrients_Utah, clean = \"both\")  # Flag, but do not remove, data with invalid or nonstandardized characteristic-method speciation # combinations in new column titled \"TADA.MethodSpeciation.Flag\": InvalidSpeciation_flags <- InvalidSpeciation(Nutrients_Utah, clean = \"none\") #> Warning: Metadata transformations may be adversely affected by choosing to retain 'Invalid' speciation. Check these records before proceeding with transformations and/or set clean = 'invalid_only' or 'both'.  # Show only invalid characteristic-method speciation combinations: InvalidSpeciation_errorsonly <- InvalidSpeciation(Nutrients_Utah, clean = \"nonstandardized_only\", errorsonly = TRUE) #> [1] \"This dataframe is empty because either we did not find any invalid/nonstandardized characteristic-method speciation combinations or they were all filtered out\"  # Show only nonstandardized characteristic-method speciation combinations: NonstandardSpeciation_errorsonly <- InvalidSpeciation(Nutrients_Utah, clean = \"invalid_only\", errorsonly = TRUE)"},{"path":"usepa.github.io/TADA/reference/JoinWQPProfiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Join WQP Profiles — JoinWQPProfiles","title":"Join WQP Profiles — JoinWQPProfiles","text":"retrieving multiple result metadata profiles WQP, can use function join profiles together one dataframe. FullPhysChem data input required run function.","code":""},{"path":"usepa.github.io/TADA/reference/JoinWQPProfiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join WQP Profiles — JoinWQPProfiles","text":"","code":"JoinWQPProfiles(   FullPhysChem = \"null\",   Sites = \"null\",   Narrow = \"null\",   Projects = \"null\" )"},{"path":"usepa.github.io/TADA/reference/JoinWQPProfiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join WQP Profiles — JoinWQPProfiles","text":"FullPhysChem Full physical chemical data profile Sites Sites data profile Narrow Full biological data profile Projects Projects data profile","code":""},{"path":"usepa.github.io/TADA/reference/JoinWQPProfiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Join WQP Profiles — JoinWQPProfiles","text":"TADA-compatible dataframe","code":""},{"path":"usepa.github.io/TADA/reference/JoinWQPProfiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Join WQP Profiles — JoinWQPProfiles","text":"","code":"join = TADA::JoinWQPProfiles(FullPhysChem = resultphyschem, Sites = station, Narrow = narrow)"},{"path":"usepa.github.io/TADA/reference/MeasureValueSpecialCharacters.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for Special Characters in Measure Value Fields - Deprecated — MeasureValueSpecialCharacters","title":"Check for Special Characters in Measure Value Fields - Deprecated — MeasureValueSpecialCharacters","text":"Function checks special characters non-numeric values ResultMeasureValue DetectionQuantitationLimitMeasure.MeasureValue fields appends flag columns indicating special characters included , special characters . ResultMeasureValue DetectionQuantitationLimitMeasure.MeasureValue fields also converted class numeric. function deprecated, please use ConvertSpecialChars() function.","code":""},{"path":"usepa.github.io/TADA/reference/MeasureValueSpecialCharacters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for Special Characters in Measure Value Fields - Deprecated — MeasureValueSpecialCharacters","text":"","code":"MeasureValueSpecialCharacters(.data)"},{"path":"usepa.github.io/TADA/reference/MeasureValueSpecialCharacters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for Special Characters in Measure Value Fields - Deprecated — MeasureValueSpecialCharacters","text":".data TADA dataframe","code":""},{"path":"usepa.github.io/TADA/reference/MeasureValueSpecialCharacters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for Special Characters in Measure Value Fields - Deprecated — MeasureValueSpecialCharacters","text":"Full dataframe column indicating presence special characters ResultMeasureValue DetectionQuantitationLimitMeasure.MeasureValue fields. Additionally, ResultMeasureValue DetectionQuantitationLimitMeasure.MeasureValue fields converted class numeric, copies column created preserve original character values.","code":""},{"path":"usepa.github.io/TADA/reference/narrow.html","id":null,"dir":"Reference","previous_headings":"","what":"narrow — narrow","title":"narrow — narrow","text":"narrow dataset containing WQP data 5 day period 1/5/2023-1/10/2023","code":""},{"path":"usepa.github.io/TADA/reference/narrow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"narrow — narrow","text":"","code":"data(narrow)"},{"path":"usepa.github.io/TADA/reference/narrow.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"narrow — narrow","text":"data frame 898 rows 78 variables","code":""},{"path":"usepa.github.io/TADA/reference/Nutrients_Utah.html","id":null,"dir":"Reference","previous_headings":"","what":"Utah Nutrient Data — Nutrients_Utah","title":"Utah Nutrient Data — Nutrients_Utah","text":"dataset containing Ammonia, Nitrate, Nitrogen data Utah: TADAProfile <- TADAdataRetrieval(statecode = \"UT\", characteristicName = c(\"Ammonia\", \"Nitrate\", \"Nitrogen\"), startDate = \"2020-10-01\", endDate = \"2022-09-30\")","code":""},{"path":"usepa.github.io/TADA/reference/Nutrients_Utah.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utah Nutrient Data — Nutrients_Utah","text":"","code":"data(Nutrients_Utah)"},{"path":"usepa.github.io/TADA/reference/Nutrients_Utah.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Utah Nutrient Data — Nutrients_Utah","text":"data frame 11086 rows 136 variables","code":""},{"path":"usepa.github.io/TADA/reference/Nutrients_Utah_Clean_TNonly.html","id":null,"dir":"Reference","previous_headings":"","what":"Nutrients_Utah_Clean_TNonly — Nutrients_Utah_Clean_TNonly","title":"Nutrients_Utah_Clean_TNonly — Nutrients_Utah_Clean_TNonly","text":"dataset containing Nutrient data Utah: TADAProfile <- TADAdataRetrieval(statecode = \"UT\", characteristicName = c(\"Ammonia\", \"Nitrate\", \"Nitrogen\"), startDate = \"2020-10-01\", endDate = \"2022-09-30\")","code":""},{"path":"usepa.github.io/TADA/reference/Nutrients_Utah_Clean_TNonly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nutrients_Utah_Clean_TNonly — Nutrients_Utah_Clean_TNonly","text":"","code":"data(Nutrients_Utah_Clean_TNonly)"},{"path":"usepa.github.io/TADA/reference/Nutrients_Utah_Clean_TNonly.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Nutrients_Utah_Clean_TNonly — Nutrients_Utah_Clean_TNonly","text":"data frame 5005 rows 168 variables","code":""},{"path":"usepa.github.io/TADA/reference/Nutrients_Utah_Clean_TNonly.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Nutrients_Utah_Clean_TNonly — Nutrients_Utah_Clean_TNonly","text":"Data cleaned using TADA harmonize vignette. Data filtered Total Nitrogen.","code":""},{"path":"usepa.github.io/TADA/reference/OrderTADACols.html","id":null,"dir":"Reference","previous_headings":"","what":"Order TADA Columns — OrderTADACols","title":"Order TADA Columns — OrderTADACols","text":"utility function moves TADA-created columns end dataframe order improves readability.","code":""},{"path":"usepa.github.io/TADA/reference/OrderTADACols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Order TADA Columns — OrderTADACols","text":"","code":"OrderTADACols(.data)"},{"path":"usepa.github.io/TADA/reference/OrderTADACols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Order TADA Columns — OrderTADACols","text":".data TADA dataframe","code":""},{"path":"usepa.github.io/TADA/reference/OrderTADACols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Order TADA Columns — OrderTADACols","text":"TADA handled dataframe TADA-created columns end.","code":""},{"path":"usepa.github.io/TADA/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"usepa.github.io/TADA/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"usepa.github.io/TADA/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"usepa.github.io/TADA/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"usepa.github.io/TADA/reference/PotentialDuplicateRowID.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for Potential Duplicates — PotentialDuplicateRowID","title":"Check for Potential Duplicates — PotentialDuplicateRowID","text":"Sometimes multiple organizations submit exact data set Water Quality Portal (WQP), can affect water quality analyses. function checks identifies data identical fields excluding organization-specific comment text fields. clean = FALSE, column titled \"TADA.PotentialDupRowIDs.Flag\" added dataframe assigns pair potential duplicates unique ID review. clean = TRUE, function retains first occurrence potential duplicate dataframe. Default clean = TRUE.","code":""},{"path":"usepa.github.io/TADA/reference/PotentialDuplicateRowID.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for Potential Duplicates — PotentialDuplicateRowID","text":"","code":"PotentialDuplicateRowID(.data, clean = TRUE, errorsonly = FALSE)"},{"path":"usepa.github.io/TADA/reference/PotentialDuplicateRowID.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for Potential Duplicates — PotentialDuplicateRowID","text":".data TADA dataframe clean Boolean argument; removes potential duplicate data dataframe clean = TRUE. clean = FALSE, column titled \"TADA.PotentialDupRowIDs.Flag\" added dataframe assigns pair potential duplicates unique ID review. Default clean = TRUE. errorsonly Boolean argument; filters dataframe show potential duplicate rows data errorsonly = TRUE. Default errorsonly = FALSE.","code":""},{"path":"usepa.github.io/TADA/reference/PotentialDuplicateRowID.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for Potential Duplicates — PotentialDuplicateRowID","text":"clean = FALSE, following column added dataframe: TADA.PotentialDupRowIDs.Flag. column flags potential duplicate rows data dataframe, assigns potential duplicate combination unique number linking two potential duplication rows. clean = FALSE first group potential duplicate rows removed dataframe column appended.","code":""},{"path":"usepa.github.io/TADA/reference/PotentialDuplicateRowID.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for Potential Duplicates — PotentialDuplicateRowID","text":"","code":"# Load example dataset: data(Nutrients_Utah)  # Remove potential duplicate data from dataframe: PotentialDup_clean <- PotentialDuplicateRowID(Nutrients_Utah) #> [1] \"No potential duplicates found in your dataframe.\"  # Flag, but do not remove, potential duplicate data in new column titled \"TADA.PotentialDupRowIDs.Flag\": PotentialDup_flagcolumnadded <- PotentialDuplicateRowID(Nutrients_Utah, clean = FALSE) #> [1] \"No potential duplicates found in your dataframe.\"  # Flag and review potential duplicate data only: PotentialDup_reviewduplicatesonly <- PotentialDuplicateRowID(Nutrients_Utah, clean = FALSE, errorsonly = TRUE)  #> [1] \"This dataframe is empty because we did not find any potential duplicates in your dataframe\""},{"path":"usepa.github.io/TADA/reference/QAPPapproved.html","id":null,"dir":"Reference","previous_headings":"","what":"Check data for an approved QAPP — QAPPapproved","title":"Check data for an approved QAPP — QAPPapproved","text":"Function checks data submitted column \"QAPPApprovedIndicator\". organizations submit data field indicate data produced approved Quality Assurance Project Plan (QAPP) . Y indicates yes, N indicates .  function three default inputs: clean = TRUE, cleanNA = FALSE, errorsonly == FALSE. default removes rows data QAPPApprovedIndicator equals \"N\". Users remove NA's addition N's using inputs clean = TRUE, cleanNA = TRUE, errorsonly = FALSE. errorsonly = TRUE, function filter rows QAPPApprovedIndicator 'Y'. clean = FALSE, cleanNA = FALSE, errorsonly = FALSE, function make changes data.","code":""},{"path":"usepa.github.io/TADA/reference/QAPPapproved.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check data for an approved QAPP — QAPPapproved","text":"","code":"QAPPapproved(.data, clean = TRUE, cleanNA = FALSE, errorsonly = FALSE)"},{"path":"usepa.github.io/TADA/reference/QAPPapproved.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check data for an approved QAPP — QAPPapproved","text":".data TADA dataframe clean Boolean argument two possible values called \"TRUE\" \"FALSE\". clean=TRUE, rows data QAPPApprovedIndicator equals \"N\" removed. , clean=FALSE, rows data QAPPApprovedIndicator equals \"N\" retained. cleanNA Boolean argument two possible values called \"TRUE\" \"FALSE\". cleanNA=TRUE, rows data QAPPApprovedIndicator equals \"NA\" removed. , cleanNA=FALSE, rows data QAPPApprovedIndicator equals \"NA\" retained. errorsonly Boolean argument; errorsonly = TRUE, dataframe filtered remove rows QAPPApprovedIndicator equals \"Y\".","code":""},{"path":"usepa.github.io/TADA/reference/QAPPapproved.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check data for an approved QAPP — QAPPapproved","text":"Several combinations inputs possible: clean = TRUE, cleanNA = FALSE, errorsonly = FALSE, dataframe filtered show rows QAPPAprrovedIndicator \"Y\" \"NA\"; clean = TRUE, cleanNA = TRUE, errorsonly = FALSE, dataframe filtered show rows QAPPApprovedIndicator \"Y\"; clean = FALSE, cleanNA = TRUE, errorsonly = FALSE, dataframe filtered show rows QAPPApprovedIndicator \"Y\" \"N\"; clean = FALSE, cleanNA = FALSE, errorsonly = FALSE, rows removed dataframe; clean = TRUE, cleanNA = TRUE, errorsonly = TRUE, function execute error message returned; clean = TRUE, cleanNA = FALSE, errorsonly = TRUE, dataframe filtered show rows QAPPApprovedIndicator \"NA\"; clean = FALSE, cleanNA = TRUE, errorsonly = TRUE, dataframe filtered show rows QAPPApprovedIndicator \"N\"; clean = FALSE, cleanNA = FALSE, errorsonly = TRUE, dataframe filtered show rows QAPPApprovedIndicator \"N\" \"NA\"","code":""},{"path":"usepa.github.io/TADA/reference/QAPPapproved.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check data for an approved QAPP — QAPPapproved","text":"Note: required field, often left blank (NA) even data associated QAPP. states tribes collect monitoring data using 106 funding (almost state tribal data WQX) required EPA approved QAPP receive 106 funding. Therefore, organizations data approved QAPP even data submitted WQP NA.","code":""},{"path":"usepa.github.io/TADA/reference/QAPPapproved.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check data for an approved QAPP — QAPPapproved","text":"","code":"# Load example dataset: data(Nutrients_Utah)  # Show data where the QAPPApprovedIndicator equals \"Y\" or \"NA\": QAPPapproved_clean <- QAPPapproved(Nutrients_Utah)  # Show only data where the QAPPApprovedIndicator equals \"Y\": QAPPapproved_cleanNAs <- QAPPapproved(Nutrients_Utah, cleanNA = TRUE) #> [1] \"All QAPPApprovedIndicator data is NA or N\"  # Show data where the QAPPApprovedIndicator equals \"N\" or \"NA\": QAPPIndicator_N_NA <- QAPPapproved(Nutrients_Utah, clean = FALSE,  cleanNA = FALSE, errorsonly = TRUE)  # Show data where the QAPPApprovedIndicator equals \"N\": QAPPIndicator_N <- QAPPapproved(Nutrients_Utah, clean = FALSE,  cleanNA = TRUE, errorsonly = TRUE)  # Note: When clean = FALSE, cleanNA = FALSE, and errorsonly = FALSE, no data is removed # Note: When clean = TRUE, cleanNA = TRUE, and errorsonly = TRUE, an error message is returned"},{"path":"usepa.github.io/TADA/reference/QAPPDocAvailable.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an approved QAPP document URL is provided — QAPPDocAvailable","title":"Check if an approved QAPP document URL is provided — QAPPDocAvailable","text":"Function checks data submitted \"ProjectFileUrl\" column determine QAPP document available review. clean = FALSE, column appended flag results associated QAPP document URL provided. clean = TRUE, rows associated QAPP document removed dataframe column appended. function used remove data accompanying QAPP document required use data assessments.","code":""},{"path":"usepa.github.io/TADA/reference/QAPPDocAvailable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an approved QAPP document URL is provided — QAPPDocAvailable","text":"","code":"QAPPDocAvailable(.data, clean = FALSE)"},{"path":"usepa.github.io/TADA/reference/QAPPDocAvailable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an approved QAPP document URL is provided — QAPPDocAvailable","text":".data TADA dataframe clean Boolean argument; removes data without associated QAPP document dataframe clean = TRUE. Default clean = FALSE.","code":""},{"path":"usepa.github.io/TADA/reference/QAPPDocAvailable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an approved QAPP document URL is provided — QAPPDocAvailable","text":"clean = FALSE, column appended input data set flags rows associated QAPP document. clean = TRUE, data without associated QAPP document removed dataframe.","code":""},{"path":"usepa.github.io/TADA/reference/QAPPDocAvailable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an approved QAPP document URL is provided — QAPPDocAvailable","text":"","code":"# Load example dataset: data(Nutrients_Utah)  # Flag, but do not remove, data without an associated QAPP document in # new column titled \"TADA.QAPPDocAvailable\": FlagData_MissingQAPPDocURLs <- QAPPDocAvailable(Nutrients_Utah) #> [1] \"No QAPP document url data found in your dataframe. Returning input dataframe with TADA.QAPPDocAvailable column for tracking.\"  # Remove data without an associated QAPP document available: RemoveData_MissingQAPPDocURLs <- QAPPDocAvailable(Nutrients_Utah, clean = TRUE) #> [1] \"This dataframe is empty because we did not find any QAPP document url data in your dataframe\""},{"path":"usepa.github.io/TADA/reference/readWQPwebservice.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in WQP data using WQP web services directly — readWQPwebservice","title":"Read in WQP data using WQP web services directly — readWQPwebservice","text":"Go WQP website (https://www.waterqualitydata.us/) fill advanced query form. Choose Full Physical Chemical Data Profile, data sources, file format Comma-Separated. finished, hit download button. Instead, copy web service URL located bottom page header \"Result\". Use \"Result\" web service URL input function download data directly R.","code":""},{"path":"usepa.github.io/TADA/reference/readWQPwebservice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in WQP data using WQP web services directly — readWQPwebservice","text":"","code":"readWQPwebservice(webservice)"},{"path":"usepa.github.io/TADA/reference/readWQPwebservice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in WQP data using WQP web services directly — readWQPwebservice","text":"webservice WQP Web Service URL, entered within quotes \"url\"","code":""},{"path":"usepa.github.io/TADA/reference/readWQPwebservice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read in WQP data using WQP web services directly — readWQPwebservice","text":"WQP Full Physical Chemical Results Data Profile","code":""},{"path":"usepa.github.io/TADA/reference/readWQPwebservice.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read in WQP data using WQP web services directly — readWQPwebservice","text":"Note: may useful save Query URL well comment within code. URL return WQP query page original data filters.","code":""},{"path":"usepa.github.io/TADA/reference/RemoveEmptyColumns.html","id":null,"dir":"Reference","previous_headings":"","what":"RemoveEmptyColumns — RemoveEmptyColumns","title":"RemoveEmptyColumns — RemoveEmptyColumns","text":"Removes columns NA values. Used quickly reduce number columns dataframe improve management readability dataframe.","code":""},{"path":"usepa.github.io/TADA/reference/RemoveEmptyColumns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RemoveEmptyColumns — RemoveEmptyColumns","text":"","code":"RemoveEmptyColumns(.data)"},{"path":"usepa.github.io/TADA/reference/RemoveEmptyColumns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RemoveEmptyColumns — RemoveEmptyColumns","text":".data Dataframe","code":""},{"path":"usepa.github.io/TADA/reference/RemoveEmptyColumns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"RemoveEmptyColumns — RemoveEmptyColumns","text":"Full dataframe empty data columns removed","code":""},{"path":"usepa.github.io/TADA/reference/resultphyschem.html","id":null,"dir":"Reference","previous_headings":"","what":"resultphyschem — resultphyschem","title":"resultphyschem — resultphyschem","text":"resultphyschem dataset containing WQP data 5 day period 1/5/2023-1/10/2023","code":""},{"path":"usepa.github.io/TADA/reference/resultphyschem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"resultphyschem — resultphyschem","text":"","code":"data(resultphyschem)"},{"path":"usepa.github.io/TADA/reference/resultphyschem.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"resultphyschem — resultphyschem","text":"data frame 898 rows 81 variables","code":""},{"path":"usepa.github.io/TADA/reference/simpleCensoredMethods.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple Tools for Censored Data Handling — simpleCensoredMethods","title":"Simple Tools for Censored Data Handling — simpleCensoredMethods","text":"function determines detection limit type detection condition parsimonious applying simple tools non-detect -detect data handling, including filling values -, X times detection limit, random number 0 LOWER detection limit. methods depend upon censored data frequency dataset.","code":""},{"path":"usepa.github.io/TADA/reference/simpleCensoredMethods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple Tools for Censored Data Handling — simpleCensoredMethods","text":"","code":"simpleCensoredMethods(   .data,   nd_method = \"multiplier\",   nd_multiplier = 0.5,   od_method = \"as-is\",   od_multiplier = \"null\" )"},{"path":"usepa.github.io/TADA/reference/simpleCensoredMethods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple Tools for Censored Data Handling — simpleCensoredMethods","text":".data TADA dataframe nd_method text string indicating type method used populate non-detect (lower limit) data value. Can set \"multiplier\" (default),\"randombelowlimit\", \"-\". nd_multiplier number multiplied LOWER detection limit entry obtain censored data value. Must supplied nd_method = \"multiplier\". Defaults 0.5, half detection limit. od_method text string indicating type method used populate -detect (upper limit) data value. Can set \"multiplier\" \"-\" (default). od_multiplier number multiplied UPPER detection limit entry obtain censored data value. Must supplied od_method = \"multiplier\". Defaults 0.5, half detection limit.","code":""},{"path":"usepa.github.io/TADA/reference/simpleCensoredMethods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple Tools for Censored Data Handling — simpleCensoredMethods","text":"TADA dataframe additional columns named TADA.CensoredData.Flag, indicates disagreements ResultDetectionCondition DetectionQuantitationLimitTypeName, TADA.CensoredMethod, documents method used fill censored data values.","code":""},{"path":"usepa.github.io/TADA/reference/simpleCensoredMethods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple Tools for Censored Data Handling — simpleCensoredMethods","text":"","code":"#' # Load example dataset: data(Nutrients_Utah) # Check for agreement between detection condition and detection limit type, and in instances where the sample is non-detect, set the result value to half of the detection limit value. For over-detect samples, retain the detection limit value as the result value as-is.  Nutrients_Utah_CensoredFlag = simpleCensoredMethods(Nutrients_Utah, nd_method = \"multiplier\", nd_multiplier = 0.5, od_method = \"as-is\", od_multiplier = \"null\") #> [1] \"DetectionQuantitationLimitTypeName column dataset contains value(s) Historical Lower Reporting Limit which is/are not represented in the DetectionQuantitationLimitTypeName WQX domain table. These data records are placed under the TADA.CensoredData.Flag: Censored but not Categorized, and will not be used in censored data handling methods. Please contact TADA administrators to resolve.\"  # Check for agreement between detection condition and detection limit type, and in instances where the sample is non-detect, set the result value to a random value between 0 and the detection limit value. For over-detect samples, retain the detection limit value as the result value as-is.  Nutrients_Utah_CensoredFlag = simpleCensoredMethods(Nutrients_Utah, nd_method = \"randombelowlimit\", nd_multiplier = \"null\", od_method = \"as-is\", od_multiplier = \"null\") #> [1] \"DetectionQuantitationLimitTypeName column dataset contains value(s) Historical Lower Reporting Limit which is/are not represented in the DetectionQuantitationLimitTypeName WQX domain table. These data records are placed under the TADA.CensoredData.Flag: Censored but not Categorized, and will not be used in censored data handling methods. Please contact TADA administrators to resolve.\""},{"path":"usepa.github.io/TADA/reference/station.html","id":null,"dir":"Reference","previous_headings":"","what":"station — station","title":"station — station","text":"station dataset containing WQP data 5 day period 1/5/2023-1/10/2023","code":""},{"path":"usepa.github.io/TADA/reference/station.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"station — station","text":"","code":"data(station)"},{"path":"usepa.github.io/TADA/reference/station.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"station — station","text":"data frame 55 rows 37 variables","code":""},{"path":"usepa.github.io/TADA/reference/summarizeCensoredData.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize Censored Data — summarizeCensoredData","title":"Summarize Censored Data — summarizeCensoredData","text":"function creates summary table percentage non-detects specified ID columns. can used determine best method handling censored data estimation methods depend upon distribution dataset.","code":""},{"path":"usepa.github.io/TADA/reference/summarizeCensoredData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize Censored Data — summarizeCensoredData","text":"","code":"summarizeCensoredData(   .data,   spec_cols = c(\"TADA.CharacteristicName\", \"TADA.ResultMeasure.MeasureUnitCode\",     \"TADA.ResultSampleFractionText\", \"TADA.MethodSpecificationName\") )"},{"path":"usepa.github.io/TADA/reference/summarizeCensoredData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize Censored Data — summarizeCensoredData","text":".data TADA dataframe spec_cols vector column names used aggregating variables summarizing censored data information.","code":""},{"path":"usepa.github.io/TADA/reference/summarizeCensoredData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize Censored Data — summarizeCensoredData","text":"summary dataframe yielding sample ncounts, censored data ncounts, percent dataset censored, aggregated user-defined grouping variables. Also produces column \"TADA.Censored.Note\" identifies sufficient non-censored data estimate censored data using statistical methods including Maximum Likelihood Estimation, Robust ROS Kaplan Meier. decision tree used identify applicable statistical analyses based Baseline Assessment Left-Censored Environmental Data Using R Tech Note. info can found : https://www.epa.gov/sites/default/files/2016-05/documents/tech_notes_10_jun2014_r.pdf","code":""},{"path":"usepa.github.io/TADA/reference/SummarizeCharacteristics.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize data downloaded for each Characteristic — SummarizeCharacteristics","title":"Summarize data downloaded for each Characteristic — SummarizeCharacteristics","text":"Function summarize number sites records downloaded WQP CharacteristicName.","code":""},{"path":"usepa.github.io/TADA/reference/SummarizeCharacteristics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize data downloaded for each Characteristic — SummarizeCharacteristics","text":"","code":"SummarizeCharacteristics(.data)"},{"path":"usepa.github.io/TADA/reference/SummarizeCharacteristics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize data downloaded for each Characteristic — SummarizeCharacteristics","text":".data TADA data frame containing data downloaded WQP, row represents unique data record.","code":""},{"path":"usepa.github.io/TADA/reference/SummarizeCharacteristics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize data downloaded for each Characteristic — SummarizeCharacteristics","text":"Saves .csv file containing total number sites records downloaded Water Quality Portal requested characteristic name.","code":""},{"path":"usepa.github.io/TADA/reference/SummarizeColumn.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize data downloaded by specified column — SummarizeColumn","title":"Summarize data downloaded by specified column — SummarizeColumn","text":"Function summarize number sites records downloaded WQP unique column group.","code":""},{"path":"usepa.github.io/TADA/reference/SummarizeColumn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize data downloaded by specified column — SummarizeColumn","text":"","code":"SummarizeColumn(.data, col = \"TADA.CharacteristicName\")"},{"path":"usepa.github.io/TADA/reference/SummarizeColumn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize data downloaded by specified column — SummarizeColumn","text":".data TADA data frame containing data downloaded WQP, row represents unique data record. col text string name column user like summarized.","code":""},{"path":"usepa.github.io/TADA/reference/SummarizeColumn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize data downloaded by specified column — SummarizeColumn","text":"dataframe containing column unique element, number sites element populated, number records element populated.","code":""},{"path":"usepa.github.io/TADA/reference/TADA.env.html","id":null,"dir":"Reference","previous_headings":"","what":"Used with multiple filter functions in this .R file — TADA.env","title":"Used with multiple filter functions in this .R file — TADA.env","text":"Used multiple filter functions .R file","code":""},{"path":"usepa.github.io/TADA/reference/TADA.env.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Used with multiple filter functions in this .R file — TADA.env","text":"","code":"TADA.env"},{"path":"usepa.github.io/TADA/reference/TADA.env.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Used with multiple filter functions in this .R file — TADA.env","text":"object class environment length 0.","code":""},{"path":"usepa.github.io/TADA/reference/TADABigdataRetrieval.html","id":null,"dir":"Reference","previous_headings":"","what":"Large WQP data pulls using dataRetrieval — TADABigdataRetrieval","title":"Large WQP data pulls using dataRetrieval — TADABigdataRetrieval","text":"function multiple synchronous data calls WQP (waterqualitydata.us). uses WQP summary service limit amount downloaded relevant data, pulls back data 100 stations time joins data back together produces single TADA compatible dataframe output. large data sets, can save lot time ultimately reduce complexity subsequent data processing. Using function, able download data available sites contiguous United States available time period, characteristicName, siteType requested. Computer memory may limit size datasets R console able hold one session. Function requires characteristicName, siteType, statecode, huc, start/ end date input. recommendation specific can large data call. function allows user run autoclean dataset, default checking large dataframes exact duplicate rows can time consuming better performed query completed.","code":""},{"path":"usepa.github.io/TADA/reference/TADABigdataRetrieval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Large WQP data pulls using dataRetrieval — TADABigdataRetrieval","text":"","code":"TADABigdataRetrieval(   startDate = \"null\",   endDate = \"null\",   statecode = \"null\",   characteristicName = \"null\",   sampleMedia = \"Water\",   siteType = \"null\",   huc = \"null\",   maxsitesquery = 20,   applyautoclean = FALSE )"},{"path":"usepa.github.io/TADA/reference/TADABigdataRetrieval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Large WQP data pulls using dataRetrieval — TADABigdataRetrieval","text":"startDate Start Date YYYY-MM-DD format, example, \"1995-01-01\" endDate end date YYYY-MM-DD format, example, \"2020-12-31\" statecode Character/character vector. State/territory abbreviations FIPS codes consist two letters characteristicName Name water quality parameter sampleMedia Defaults \"Water\". Refer WQP domain tables options. siteType Name water body type (e.g., \"Stream\", \"Lake, Reservoir, Impoundment\") huc numeric code denoting hydrologic unit. Example: \"04030202\". Different size hucs can entered. maxsitesquery Numeric. maximum number sites query -loop TADABigdataRetrieval function. input flexible sites often variable data richness. several data rich sites within download chunk, time outs errors likely. Thus, smaller maxsitesquery (especially large datacalls), lower probability overwhelming WQP. applyautoclean Defaults FALSE. TRUE, runs TADA's autoclean function final combined dataset.","code":""},{"path":"usepa.github.io/TADA/reference/TADABigdataRetrieval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Large WQP data pulls using dataRetrieval — TADABigdataRetrieval","text":"TADA-compatible dataframe","code":""},{"path":"usepa.github.io/TADA/reference/TADABigdataRetrieval.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Large WQP data pulls using dataRetrieval — TADABigdataRetrieval","text":"code function adapted USGS Blog (Author: Aliesha Krall) Large Sample Pull See ?autoclean documentation information optional input.","code":""},{"path":"usepa.github.io/TADA/reference/TADABigdataRetrieval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Large WQP data pulls using dataRetrieval — TADABigdataRetrieval","text":"","code":"if (FALSE) { tada1 <- TADABigdataRetrieval(startDate = \"2019-01-01\", endDate = \"2021-12-31\", characteristicName = \"Temperature, water\", statecode = c(\"AK\",\"AL\")) tada2 <- TADABigdataRetrieval(startDate = \"2016-10-01\",endDate = \"2022-09-30\", statecode = \"UT\") tada3 = TADABigdataRetrieval(huc = \"04030202\", characteristicName = \"Escherichia coli\") tada4 = TADABigdataRetrieval(huc = c(\"04030202\",\"04030201\"), characteristicName = \"Temperature, water\") }"},{"path":"usepa.github.io/TADA/reference/TADAdataRetrieval.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate TADA-compatible dataframe from WQP Data — TADAdataRetrieval","title":"Generate TADA-compatible dataframe from WQP Data — TADAdataRetrieval","text":"Retrieve data Water Quality Portal (WQP) generate TADA-compatible dataframe. Note inputs (e.g. project, organization, siteType) exceptions endDate startDate match web service call format online WQP GUI. endDate startDate match format suggested USGS's dataRetrieval package (endDate = \"YYYY-MM-DD\"), familiar date format R users WQP GUI's endDateHi = \"MM-DD-YYYY\".","code":""},{"path":"usepa.github.io/TADA/reference/TADAdataRetrieval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate TADA-compatible dataframe from WQP Data — TADAdataRetrieval","text":"","code":"TADAdataRetrieval(   startDate = \"null\",   endDate = \"null\",   characteristicName = \"null\",   sampleMedia = \"null\",   siteType = \"null\",   statecode = \"null\",   countycode = \"null\",   siteid = \"null\",   organization = \"null\",   project = \"null\",   applyautoclean = TRUE )"},{"path":"usepa.github.io/TADA/reference/TADAdataRetrieval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate TADA-compatible dataframe from WQP Data — TADAdataRetrieval","text":"startDate Start Date string format YYYY-MM-DD, example, \"2020-01-01\" endDate End Date string format YYYY-MM-DD characteristicName Name parameter sampleMedia Sampling substrate water, air, sediment siteType Type waterbody statecode Code identifies state countycode Code identifies county siteid Unique monitoring station identifier organization string letters /numbers (additional characters also possible) used signify organization data Water Quality Portal project string letters /numbers (additional characters also possible) used signify project data Water Quality Portal applyautoclean Logical, defaults TRUE. Applies TADA's autoclean function returned data profile.","code":""},{"path":"usepa.github.io/TADA/reference/TADAdataRetrieval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate TADA-compatible dataframe from WQP Data — TADAdataRetrieval","text":"TADA-compatible dataframe","code":""},{"path":"usepa.github.io/TADA/reference/TADAdataRetrieval.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate TADA-compatible dataframe from WQP Data — TADAdataRetrieval","text":"function create /edit following columns: TADA.DetectionLimitMeasureValue.Flag DetectionQuantitationLimitMeasure.MeasureValue DetectionLimitMeasureValue.Original ResultMeasureValue.Original TADA.ResultMeasureValue.Flag ResultMeasureValue Keep mind query filters WQP work , within fields ORs. example, within characteristicName – enter, c(\"pH\", \"Dissolved oxygen ()), – ’s . Meaning back \"pH\" \"Dissolved oxygen ()\" data. Similarly, enter c(\"Virginia\", \"Illinois\"), ’s . combo fields ANDs. State/Virginia Characteristic/Dissolved oxygen ()\". Meaning, get get back Dissolved oxygen () Virginia. characteristicName Characteristic Group also work , therefore characteristicName must fall within Characteristic Group entered. data cleaning transformations done directly \"ResultMeasureValue\" \"DetectionLimitMeasureValue\" columns, however original \"ResultMeasureValue\" \"DetectionLimitMeasureValue\" columns values WQP preserved new fields, \"ResultMeasureValue.Original\" \"DetectionLimitMeasureValue.Original\". Additionally, \"TADA.ResultMeasureValue.Flag\" \"TADA.DetectionLimitMeasureValue.Flag\" created track changes made \"ResultMeasureValue\" \"DetectionLimitMeasureValue\" columns; provide information result values needed address censored data later (.e., nondetections) Users can reference WQX domain tables find allowable values queries, e.g., reference WQX domain table find countycode statecode: https://cdx.epa.gov/wqx/download/DomainValues/County_CSV.zip Alternatively, can use WQP services find areas data available US: https://www.waterqualitydata.us/Codes/countycode See ?ConvertSpecialChars ?autoclean documentation information.","code":""},{"path":"usepa.github.io/TADA/reference/TADAdataRetrieval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate TADA-compatible dataframe from WQP Data — TADAdataRetrieval","text":"","code":"if (FALSE) { tada1 <- TADAdataRetrieval(statecode = \"WI\",                            countycode = \"Dane\",                            characteristicName = \"Phosphorus\")  tada2 <- TADAdataRetrieval(project = \"Anchorage Bacteria 20-21\")  tada3 <- TADAdataRetrieval(statecode = \"UT\",                             characteristicName = c(\"Ammonia\", \"Nitrate\", \"Nitrogen\"),                             startDate = \"2020-10-01\")  tada4 <- TADAdataRetrieval(statecode = \"SC\", countycode  = \"Abbeville\")  # note that countycode queries require a statecode (see example below) tada5 <- TADAdataRetrieval(countycode = \"US:02:020\") }"},{"path":"usepa.github.io/TADA/reference/TADAprofileCheck.html","id":null,"dir":"Reference","previous_headings":"","what":"TADA Profile Check — TADAprofileCheck","title":"TADA Profile Check — TADAprofileCheck","text":"function checks column names dataframe include TADA profile fields. used beginning TADA functions ensure input data frame suitable (.e. either full physical/chemical results profile downloaded WQP TADA profile template downloaded EPA TADA webpage.)","code":""},{"path":"usepa.github.io/TADA/reference/TADAprofileCheck.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TADA Profile Check — TADAprofileCheck","text":"","code":"TADAprofileCheck(.data)"},{"path":"usepa.github.io/TADA/reference/TADAprofileCheck.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"TADA Profile Check — TADAprofileCheck","text":".data dataframe","code":""},{"path":"usepa.github.io/TADA/reference/TADAprofileCheck.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"TADA Profile Check — TADAprofileCheck","text":"Boolean result indicating whether input dataframe contains TADA profile fields.","code":""},{"path":"usepa.github.io/TADA/reference/TADAProfile_AllUS_LakeWaterT_Jan2000toJuly2022.html","id":null,"dir":"Reference","previous_headings":"","what":"Lake Water Temperature — TADAProfile_AllUS_LakeWaterT_Jan2000toJuly2022","title":"Lake Water Temperature — TADAProfile_AllUS_LakeWaterT_Jan2000toJuly2022","text":"TADA example dataset containing lake water temperature data U.S. Jan. 2000 July 2022. dataset can reproduced following TADABigdataRetrieval call:","code":""},{"path":"usepa.github.io/TADA/reference/TADAProfile_AllUS_LakeWaterT_Jan2000toJuly2022.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lake Water Temperature — TADAProfile_AllUS_LakeWaterT_Jan2000toJuly2022","text":"","code":"data(TADAProfile_AllUS_LakeWaterT_Jan2000toJuly2022)"},{"path":"usepa.github.io/TADA/reference/TADAProfile_AllUS_LakeWaterT_Jan2000toJuly2022.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Lake Water Temperature — TADAProfile_AllUS_LakeWaterT_Jan2000toJuly2022","text":"data frame 14237 rows 103 variables","code":""},{"path":"usepa.github.io/TADA/reference/TADAProfile_AllUS_LakeWaterT_Jan2000toJuly2022.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lake Water Temperature — TADAProfile_AllUS_LakeWaterT_Jan2000toJuly2022","text":"AllWaterTempData <- TADABigdataRetrieval(startDate = \"2000-01-01\", endDate = \"2022-07-01\", characteristicName = \"Temperature, water\", siteType = \"Lake, Reservoir, Impoundment\")","code":""},{"path":"usepa.github.io/TADA/reference/TADAProfile_UT_Nutrients.html","id":null,"dir":"Reference","previous_headings":"","what":"Utah Nutrient Data — TADAProfile_UT_Nutrients","title":"Utah Nutrient Data — TADAProfile_UT_Nutrients","text":"dataset containing Ammonia, Nitrate, Nitrogen data Utah: TADAProfile <- TADAdataRetrieval(statecode = \"UT\", characteristicName = c(\"Ammonia\", \"Nitrate\", \"Nitrogen\"), startDate = \"10-01-2020\")","code":""},{"path":"usepa.github.io/TADA/reference/TADAProfile_UT_Nutrients.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utah Nutrient Data — TADAProfile_UT_Nutrients","text":"","code":"data(TADAProfile_UT_Nutrients)"},{"path":"usepa.github.io/TADA/reference/TADAProfile_UT_Nutrients.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Utah Nutrient Data — TADAProfile_UT_Nutrients","text":"data frame 6608 rows 110 variables","code":""},{"path":"usepa.github.io/TADA/reference/TADAReadWQPWebServices.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in WQP data using the Water Quality Portal (WQP) web services — TADAReadWQPWebServices","title":"Read in WQP data using the Water Quality Portal (WQP) web services — TADAReadWQPWebServices","text":"Go WQP website (https://www.waterqualitydata.us/) fill advanced query form. Choose file format Comma-Separated. , choose data profile. finished, hit download button. Instead, copy web service URL located bottom page header \"Station\" \"Result\". url second box top. Use web service URL input function download data directly R.","code":""},{"path":"usepa.github.io/TADA/reference/TADAReadWQPWebServices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in WQP data using the Water Quality Portal (WQP) web services — TADAReadWQPWebServices","text":"","code":"TADAReadWQPWebServices(webservice)"},{"path":"usepa.github.io/TADA/reference/TADAReadWQPWebServices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in WQP data using the Water Quality Portal (WQP) web services — TADAReadWQPWebServices","text":"webservice WQP Web Service URL, entered within quotes, .e., \"webserviceurl\"","code":""},{"path":"usepa.github.io/TADA/reference/TADAReadWQPWebServices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read in WQP data using the Water Quality Portal (WQP) web services — TADAReadWQPWebServices","text":"WQP Data Profile","code":""},{"path":"usepa.github.io/TADA/reference/TADAReadWQPWebServices.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read in WQP data using the Water Quality Portal (WQP) web services — TADAReadWQPWebServices","text":"recommend retrieving data following profiles (can run function four separate times bring four profiles): Sample Results (physical/chemical metadata) Sample Results (narrow) Project Data Site Data retrieve four profiles, can use TADA::JoinWQPProfiles joining four dataframes single dataframe. Note: may useful save Query URL WQP well comment within code. URL return WQP query page selected data filters. example, query used examples function: https://www.waterqualitydata.us/#statecode=US%3A09&sampleMedia=water&sampleMedia=Water&startDateLo=01-01-2021&mimeType=csv&dataProfile=biological&providers=NWIS&providers=STEWARDS&providers=STORET","code":""},{"path":"usepa.github.io/TADA/reference/TADAReadWQPWebServices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read in WQP data using the Water Quality Portal (WQP) web services — TADAReadWQPWebServices","text":"","code":"if (FALSE) { physchemresults1 <- TADAReadWQPWebServices(\"https://www.waterqualitydata.us/data/Result/search?statecode=US%3A09&sampleMedia=water&sampleMedia=Water&startDateLo=01-01-2021&mimeType=csv&zip=yes&dataProfile=biological&providers=NWIS&providers=STEWARDS&providers=STORET\") sites1 <- TADAReadWQPWebServices(\"https://www.waterqualitydata.us/data/Station/search?statecode=US%3A09&sampleMedia=water&sampleMedia=Water&startDateLo=01-01-2021&mimeType=csv&zip=yes&providers=NWIS&providers=STEWARDS&providers=STORET\") projects1 <- TADAReadWQPWebServices(\"https://www.waterqualitydata.us/data/Project/search?statecode=US%3A09&sampleMedia=water&sampleMedia=Water&startDateLo=01-01-2021&mimeType=csv&zip=yes&providers=NWIS&providers=STEWARDS&providers=STORET\") narrow1 <- TADAReadWQPWebServices(\"https://www.waterqualitydata.us/data/Result/search?statecode=US%3A09&sampleMedia=water&sampleMedia=Water&startDateLo=01-01-2021&mimeType=csv&zip=yes&dataProfile=narrowResult&providers=NWIS&providers=STEWARDS&providers=STORET\") }"},{"path":"usepa.github.io/TADA/reference/TADA_boxplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Boxplot — TADA_boxplot","title":"Create Boxplot — TADA_boxplot","text":"Create Boxplot","code":""},{"path":"usepa.github.io/TADA/reference/TADA_boxplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Boxplot — TADA_boxplot","text":"","code":"TADA_boxplot(filtered.data)"},{"path":"usepa.github.io/TADA/reference/TADA_boxplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Boxplot — TADA_boxplot","text":"filtered.data TADA data frame containing data downloaded WQP, row represents unique data record. Data frame must include columns 'TADA.ComparableDataIdentifier\", 'TADA.ResultMeasureValue', 'TADA.ResultMeasure.MeasureUnitCode' run function. columns can added data frame running function HarmonizeData(). data frame must filtered single comparable data identifier run function.","code":""},{"path":"usepa.github.io/TADA/reference/TADA_boxplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Boxplot — TADA_boxplot","text":"plotly boxplot figure showing median, 25th percentile, 75th percentile, upper fence, lower fence, minimum, maximum, data outliers given comparable data identifier.","code":""},{"path":"usepa.github.io/TADA/reference/TADA_boxplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Boxplot — TADA_boxplot","text":"","code":"# Load example dataset: data(Nutrients_Utah)  # Note for future: consider creating example dataset which has been cleaned  # Filter out quality control samples: Utah_qc <- dplyr::filter(Nutrients_Utah, !(ActivityTypeCode %in% ActivityTypeCode[grepl(\"Quality\",ActivityTypeCode)]))  # Run HarmonizeData function: Utah_harmonized <- HarmonizeData(Utah_qc)  # Filter to 1 Comparable Data Identifier: Utah_filtered <- dplyr::filter(Utah_harmonized, TADA.ComparableDataIdentifier == \"Total Nitrogen, Mixed Forms_as N_mg/L\")  # Create boxplot: TADA_boxplot(Utah_filtered)  {\"x\":{\"visdat\":{\"16cc32352807\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"16cc32352807\",\"attrs\":{\"16cc32352807\":{\"y\":[[0.485,1.65,2.72,3.55,0.384,0.242,0.2,1.49,0.708,0.453,3.57,0.529,0.19,9.96,2.43,0.688,0.41,0.806,0.569,0.759,0.472,0.203,0.86,0.682,4.95,0.174,0.15,0.824,0.2,0.198,2.38,0.933,2.83,0.329,0.094,0.776,0.999,0.251,0.801,0.143,0.174,1.4,0.888,3.22,0.277,20.1,12.5,0.211,3.65,0.877,0.389,2.22,0.678,1.23,1.03,0.393,0.296,0.978,0.212,7.63,1.13,0.42,0.591,0.574,0.637,2.43,0.651,0.645,0.367,0.776,0.29,0.653,4.38,0.64,1.21,0.617,0.389,13.1,0.2,0.212,0.573,6.66,0.528,0.824,0.393,0.61,0.421,0.194,0.859,1.63,0.588,0.726,0.357,0.546,0.381,0.33,0.272,1.46,1.16,0.491,0.869,0.848,0.849,3.05,14.5,12.8,1.28,1.24,0.213,0.456,0.504,0.559,0.308,2.22,0.356,12.5,1.19,0.921,0.556,0.334,0.572,0.218,0.677,1.14,0.179,0.133,0.268,0.791,4.29,0.83,1.06,0.427,0.232,0.214,0.622,0.2,0.831,0.344,0.835,0.6,0.118,0.501,29.2,1.7,10.4,0.375,7.05,0.191,0.643,2.79,1.24,0.087,0.195,0.249,0.386,0.204,9.23,0.424,0.839,0.294,0.68,2.21,3.24,0.922,0.346,0.401,4.34,0.239,0.436,0.959,0.385,7.84,0.108,0.421,1.24,0.225,1,0.99,1.3,1.64,1.3,1.17,0.349,1.37,0.689,0.883,1.1,1.52,9.29,9.98,0.296,1.17,0.987,0.136,2.33,2.85,2.3,0.577,0.2,0.938,0.222,0.392,0.361,36.7,0.163,0.366,0.2,0.088,3.39,0.133,1.44,0.338,2.41,1.04,0.337,0.535,18,7.9,1.45,0.13,2.73,0.516,0.534,2.03,3.32,0.188,0.358,0.215,0.183,3.82,6.19,1.01,1.99,2.06,8.76,0.451,0.609,0.489,4.11,0.2,1.01,1.69,0.559,0.713,0.708,0.597,0.592,0.528,1.97,0.919,1.8,0.849,0.14,0.839,0.46,0.693,0.328,0.2,0.441,0.386,0.515,7.09,0.729,0.806,11.3,0.424,15.1,3.35,0.322,0.242,0.532,3.91,0.808,0.624,3.96,1.62,0.646,365,1.22,1.27,1.56,0.442,0.533,0.602,14.8,26.8,3.42,0.186,0.559,4.09,0.232,0.321,0.2,0.254,0.183,0.729,19.3,0.249,0.729,0.919,0.6,1.43,0.212,0.427,2.68,2.92,0.358,3.48,0.55,22.6,0.311,0.108,0.359,0.4,0.405,0.6,1.21,1.08,0.814,0.217,8.61,0.894,0.403,3.01,2.18,3.62,0.862,3.45,0.301,0.753,0.74,8.74,1.55,0.167,7.72,0.771,0.766,1.27,0.647,0.436,10.6,0.214,2.98,0.2,0.242,0.262,0.368,0.71,0.33,0.47,0.8,10.4,0.177,0.368,3.4,0.586,0.131,0.279,1.67,0.298,1.14,1.84,0.134,0.513,0.161,0.788,0.599,0.237,1.54,0.201,0.769,1.26,0.658,7.49,1.23,0.361,0.38,2.47,0.869,18.2,0.265,0.357,0.751,1.05,1.24,3.25,0.407,0.206,1.21,10.6,0.163,0.582,0.826,1.12,0.218,0.529,7.27,0.243,0.752,0.505,0.578,0.521,11.7,2.39,1.13,0.573,0.154,11.3,0.268,0.2,0.651,1.94,0.789,0.695,0.802,1.06,0.455,18.2,1.83,1.81,0.433,3.44,0.544,7.86,0.41,1.77,0.151,2.17,0.18,0.172,0.2,2.47,1.29,1.65,0.361,0.219,0.886,0.74,1.08,0.415,4.26,0.19,0.452,2.96,0.295,0.598,0.905,0.318,0.088,0.331,0.83,0.836,0.834,17.7,1.58,0.481,0.377,14.7,0.32,6.85,2.1,0.296,0.246,0.546,9.63,0.201,1.09,0.78,1.32,0.396,0.861,0.247,3,0.308,10.3,0.293,3.72,0.411,1.2,0.409,2.66,0.377,0.185,0.701,0.259,0.201,0.49,0.184,0.827,0.2,3.13,18.8,0.218,0.221,0.177,0.732,0.735,0.381,0.246,14,0.419,0.862,0.601,2.61,0.628,0.369,0.893,43,0.93,0.56,0.774,0.69,5.86,1.2,0.214,0.93,0.497,0.419,0.315,3.12,0.52,3.9,0.573,0.817,7.75,0.753,0.998,0.818,3.88,0.25,8.5,0.384,0.141,0.865,0.198,0.653,2.84,2.02,0.2,0.326,5.24,0.186,0.102,0.268,0.135,0.596,4.78,13.5,1.6,0.307,0.802,0.912,0.577,1.1,3.48,0.288,0.555,4.03,0.321,1.61,0.283,0.426,0.407,0.665,19.3,0.42,0.528,1.94,0.592,0.297,0.945,0.404,2.31,1.04,1.54,0.377,0.793,1.77,0.607,0.951,7.24,2.43,0.329,0.094,1.04,4.73,0.797,4.99,3.09,0.776,0.645,0.294,5.16,0.302,0.2,0.561,0.664,0.579,0.795,0.211,2.33,11.6,0.945,0.221,9.63,0.912,0.562,1.37,0.431,0.17,8.44,0.847,0.152,0.683,1.14,0.213,1.33,0.259,0.777,1.8,0.404,0.251,9.28,0.653,3.38,0.365,0.405,0.578,0.2,0.214,0.342,2.77,0.2,2.37,0.393,1.2,0.79,0.695,0.219,7.8,2.65,0.506,0.189,2.19,0.36,0.764,0.468,0.64,0.143,0.104,1.61,0.264,0.2,0.901,0.708,0.397,0.303,0.129,1.12,0.365,0.389,0.15,0.359,9.83,7.16,0.503,0.561,0.415,3.54,0.74,2.68,0.195,0.605,10.7,1.57,2.89,1.31,0.9,1.43,0.511,0.123,5.04,0.89,0.728,0.568,0.267,0.406,0.376,0.845,0.297,0.207,16.2,0.211,0.466,4.13,0.244,11.2,3.98,0.852,0.341,21,0.2,0.615,0.09,1.09,14.4,0.396,0.181,3.89,0.392,22.6,0.296,1,0.55,0.464,2.61,4.92,0.869,0.298,0.221,0.648,0.316,1.62,0.89,0.157,0.2,0.2,0.387,0.334,2.71,5.46,0.254,0.317,0.824,18.4,1.07,13,1.03,18.5,0.574,0.453,0.742,0.24,0.437,4.97,0.351,0.737,0.282,0.777,0.397,0.247,21.8,0.698,0.193,0.229,8.68,0.903,0.2,0.098,1.52,0.813,4.45,0.968,0.147,0.17,0.274,0.441,0.342,1.94,3.84,0.346,2.14,0.38,0.38,0.278,0.148,0.366,0.364,0.751,0.242,0.598,0.474,0.271,0.234,0.263,3.52,0.919,0.44,0.148,7.39,0.305,2.37,0.362,4.87,0.396,0.832,0.342,0.366,0.477,1.77,0.558,0.503,0.732,0.342,0.589,0.461,1.5,3.8,2.21,0.478,0.858,0.187,0.2,0.309,4.95,0.532,1.24,1.31,1.06,0.198,0.2,0.09,0.305,0.907,0.762,0.313,6.59,0.268,0.201,30.8,1.31,0.377,0.789,0.678,0.739,0.432,0.454,0.466,0.315,0.111,0.463,0.123,1.36,1.72,0.654,2.81,0.519,1.02,0.296,0.35,0.341,0.558,0.89,10.1,0.228,1.6,0.443,0.092,1.47,0.48,0.104,0.138,13.2,2.66,8.99,1.39,3.07,1.69,3.32,0.158,0.647,1.4,0.543,2.12,0.468,0.47,0.706,1.13,11.4,0.451,33.1,0.47,0.384,0.232,0.269,0.286,0.251,0.316,0.246,0.809,2.52,0.642,0.394,0.534,0.202,0.388,0.496,0.81,1.31,27.9,2.11,1.21,0.443,0.615,1.62,0.447,0.215,0.659,0.693,0.253,0.781,2.07,0.327,0.247,1.04,0.771,0.608,0.287,0.233,10.4,1.28,0.681,0.2,0.857,0.762,0.433,0.61,0.223,2.46,0.135,0.363,1.09,0.263,0.785,2.04,2.92,0.95,0.2,0.095,0.304,9.1,0.52,0.392,0.467,0.342,3.26,0.742,0.809,0.391,0.154,12.2,0.917,0.2,0.599,0.099,0.386,0.255,0.397,0.37,0.835,0.584,0.201,0.43,0.373,1.16,0.55,0.681,0.305,24.1,0.607,0.321,0.538,0.578,6.28,0.469,0.685,3.53,0.844,0.571,0.85,1.01,0.45,0.217,0.293,0.145,0.271,0.458,0.242,32.8,0.538,1.29,0.848,3.41,0.781,0.597,0.383,0.658,0.629,0.637,0.828,18.5,0.291,0.16,10.8,0.386,22.4,2,0.531,0.658,0.478,0.387,0.426,1.33,0.599,0.245,7.69,0.2,1.4,0.595,1.42,0.2,0.2,0.592,0.481,4.27,0.478,0.384,0.849,11.4,0.17,0.199,2.46,0.2,0.411,0.426,0.443,0.183,9.77,0.2,0.407,0.189,0.114,1.02,0.13,1.55,0.639,0.614,2.92,0.6,0.2,0.2,0.309,0.456,0.798,0.727,0.312,0.635,43.4,0.123,0.245,0.202,2.22,2.51,0.5,0.162,3.61,0.6,0.225,1.32,2.12,0.237,3.55,12.7,1.16,2.32,0.32,1.68,0.121,1.11,0.464,0.568,0.696,0.922,4.05,1.53,3.34,0.221,0.361,0.224,1.29,0.427,1.3,1.08,0.388,0.228,0.82,6.18,0.424,3.66,0.547,1.62,0.366,0.979,0.534,0.302,0.588,0.753,0.2,0.73,0.431,1.09,0.658,79.6,0.401,0.356,0.62,0.321,0.205,0.158,0.299,0.398,0.233,3.91,0.097,1.22,1.38,1.74,0.223,0.198,0.36,1.37,0.687,9.28,1.33,0.41,0.138,0.619,0.736,1.15,17.4,0.706,1.91,0.685,0.476,1.36,1.85,1.36,0.35,0.661,0.883,9.43,0.431,0.312,0.146,0.29,0.45,0.386,0.133,1.13,0.333,0.324,0.675,3.45,0.185,0.633,4.79,11.2,1.07,0.959,0.288,0.299,0.428,1.54,0.492,0.571,1.43,0.408,2.93,2.13,1.26,0.2,0.42,0.794,0.162,3.62,0.945,1.36,1.69,1.05,0.423,1.04,0.938,0.37,9.57,3.78,0.851,0.2,0.933,9.98,0.38,1.49,0.728,0.264,0.689,0.537,0.235,0.789,17.9,0.404,0.704,1.22,0.732,1.22,0.474,0.339,9.42,0.27,0.504,3,0.825,0.169,0.299,0.255,1.33,0.451,0.471,21.8,0.105,1.11,12.9,0.521,4.24,0.842,0.596,0.455,0.614,0.23,0.146,1.49,0.284,0.237,16.9,0.991,0.791,0.742,1.09,0.095,0.133,0.441,0.389,2.12,2.55,0.718,1.33,0.671,0.459,8.84,0.271,0.222,1.36,2.09,0.2,1.22,0.612,0.314,0.433,0.951,0.677,0.459,0.867,0.654,0.796,0.627,0.213,0.819,0.17,1.16,0.541,0.68,1.36,0.266,0.236,0.717,7.93,0.481,39.9,0.466,0.966,0.784,0.278,2.83,2.25,2.43,0.278,0.2,0.893,0.771,0.99,1.67,0.846,0.257,0.761,2.28,0.429,0.304,4.53,1.59,11.2,1.3,0.316,0.805,0.617,2.43,0.293,0.243,0.925,1.72,1.38,5.99,0.126,0.171,0.267,1.98,1.73,0.309,0.779,0.419,4.39,0.802,12.8,0.648,5.19,0.142,0.292,0.361,0.183,9.95,2.62,0.614,0.256,0.572,0.502,1.06,0.766,37.8,0.614,0.803,0.681,0.447,0.228,0.843,3.22,3.12,0.381,0.352,0.653,3.59,7.89,0.993,0.561,2.99,0.614,0.328,0.821,0.233,1.13,0.347,0.552,0.228,0.789,0.271,0.421,4.89,4.01,0.2,1.28,0.517,3.39,0.563,0.555,0.216,0.446,0.19,0.544,21.2,4.03,0.206,1.03,1.16,0.334,0.227,3.51,0.863,9.91,0.676,0.2,1.82,0.467,0.652,0.2,0.2,9.9,0.528,0.729,0.2,0.44,0.132,0.737,0.511,0.2,13.1,0.422,0.627,0.62,0.843,1.51,2.18,1.07,0.314,0.2,7.6,0.423,0.533,0.179,0.172,0.665,0.489,0.2,0.271,0.874,0.379,0.198,0.87,0.261,17.5,1.75,0.321,0.749,0.304,8.74,0.619,2.45,1.1,0.524,2.25,0.324,0.874,0.259,1.33,0.212,6.1,0.2,0.649,2.83,1.7,1.57,0.919,0.376,0.31,0.773,0.6,1.29,0.54,3.75,0.51,0.276,0.955,0.38,0.89,0.6,0.224,0.7,1.42,9.85,0.458,1.12,1.12,0.551,0.6,3.46,0.302,0.818,0.2,0.103,0.182,1.23,1.39,0.691,0.899,4.79,0.235,1.92,0.727,0.84,0.723,0.255,3.19,0.52,0.622,1.56,3.46,0.249,0.192,0.479,0.825,4.76,2.39,0.101,4.15,0.617,0.431,1.62,6.61,0.816,0.575,3.59,1.22,1.06,0.406,16.4,1.69,0.174,0.2,0.316,3.74,0.724,0.24,0.262,0.906,4.75,0.108,0.618,1.16,0.446,3.33,0.255,0.23,0.312,0.786,7.5,0.338,0.199,0.15,0.73,0.589,0.74,0.567,2.77,0.914,0.2,0.783,0.61,2.32,10.9,0.287,0.648,0.369,0.26,1.71,0.815,45.7,0.993,0.773,0.299,3.19,0.193,1.16,0.23,2.39,2.23,0.453,5.56,0.578,1.54,0.961,0.607,0.522,0.3,3.57,0.494,1.21,3.23,1.28,6.47,1.18,0.755,1.82,2.84,0.24,3.6,5.02,0.408,1.3,7.35,16.9,0.623,0.892,0.322,0.244,1.89,0.132,3,0.555,0.774,0.105,2.02,0.85,0.395,0.362,0.198,0.254,1.03,1.66,0.479,0.455,0.138,1.07,0.249,0.318,1.04,15.9,1.51,0.51,0.289,0.984,0.31,1.87,0.2,0.192,0.801,1.19,0.654,0.191,0.205,3.13,0.392,1.23,1.17,0.426,0.229,0.739,0.23,0.467,0.304,0.409,9.31,1.53,0.975,1.22,1.16,0.617,0.88,0.366,3.8,0.367,2.37,0.837,1.03,0.48,0.618,0.15,0.26,1.1,8.57,0.43,0.438,1.29,0.754,1.2,0.145,0.513,0.2,0.23,0.315,0.372,0.158,0.21,1.92,0.197,1.02,3.82,0.926,0.2,0.183,5.2,4.52,9.35,0.338,2.68,0.451,0.314,0.661,0.259,0.823,0.335,0.558,0.56,0.351,1.76,0.25,0.7,0.624,2.63,2.36,1.92,3.27,0.2,0.795,0.929,0.194,11.5,0.678,0.367,18.4,0.668,1.42,0.2,0.246,0.589,0.27,0.543,0.916,6.13,19.3,6.1,0.748,2.61,4.22,0.187,0.599,11.6,0.19,0.798,0.2,0.337,0.446,1.16,2.28,0.798,0.431,0.373,0.666,0.198,3.45,1.58,0.251,1.37,0.297,2.33,0.208,0.782,0.346,0.422,3.88,0.503,2.66,0.514,0.922,1.1,3.11,0.549,2.59,0.217,0.396,0.479,0.637,0.19,0.158,0.273,1.53,1.26,0.59,0.59,0.28,0.444,1.3,0.103,0.284,0.22,3.84,1.69,0.32,0.412,0.604,0.445,8.04,0.411,0.207,0.308,0.467,0.2,0.747,0.303,0.62,0.495,0.846,0.796,1.63,8.53,0.229,0.569,0.12,0.205,0.701,16.1,0.493,0.259,0.109,9.02,0.614,4.51,0.466,0.547,5.68,0.482,0.486,0.35,132,0.741,0.338,0.542,0.23,0.155,0.471,1.02,0.473,19.2,0.585,0.1,0.21,4.49,1.07,1.87,0.902,0.882,21.3,0.325,0.2,0.906,0.533,0.842,0.215,0.247,1.11,0.455,0.795,0.456,0.979,40,2.36,1.1,0.975,10.8,0.145,0.693,4.7,0.952,1.24,1.29,0.401,1.92,1.63,2.78,0.266,4.03,0.484,0.383,7.63,1.26,3.56,0.396,1.05,0.102,0.48,0.203,0.705,0.2,0.257,0.126,0.498,1.5,0.397,0.769,0.305,1.28,36.5,0.129,2.02,0.676,0.801,0.249,1.22,0.184,0.653,0.394,0.356,0.379,0.391,0.272,2.31,1.42,0.316,0.166,10.4,0.962,4.07,0.157,0.16,4.3,0.185,4.55,0.828,0.697,1.15,0.483,1.57,0.355,0.232,1,1.5,11.4,3.79,0.191,4.12,0.51,0.773,0.22,1.95,0.545,0.641,1.13,0.656,0.309,4.28,0.581,0.77,0.402,0.185,0.845,0.549,24.7,1.64,0.469,2.43,0.098,0.299,0.251,0.397,8.01,5.26,0.2,0.679,1.54,0.563,2.45,0.133,0.567,0.199,1.08,0.81,0.708,10.3,1.12,0.91,11.3,0.608,0.904,0.749,0.234,0.234,3.12,3.77,0.743,0.392,0.456,0.1,0.163,0.294,0.663,0.111,0.93,0.383,4.15,31.1,0.961,0.348,0.773,0.673,0.86,0.435,0.25,9.69,0.279,0.614,0.608,0.63,0.426,0.472,1.15,3.02,0.265,0.761,0.517,1.04,0.817,0.238,0.663,0.631,17.8,4.37,2.08,0.347,0.418,0.2,0.27,1.68,0.291,0.264,1.49,1.7,0.434,1.74,0.302,0.562,0.462,0.248,3.65,0.634,0.263,0.536,4.41,0.275,0.107,3.3,1.2,0.201,6.81,0.776,0.58,8.82,0.706,1.17,0.785,0.534,0.337,0.985,1.34,0.763,2.73,0.809,0.232,7.89,0.286,0.286,3.29,1.55,4.94,9.04,0.725,0.23,0.389,0.395,1.26,1.54,0.534,0.722,0.456,0.298,0.245,21.5,0.492,1.07,0.316,0.2,1.1,0.268,1.6,1.18,0.2,0.776,0.612,0.762,0.397,1.32,0.246,1.63,18.2,0.283,0.275,0.284,0.676,0.622,0.223,0.325,0.2,0.934,0.714,0.774,0.2,0.961,1.38,1.13,0.715,1.7,3.96,0.378,0.571,0.21,13.4,1.39,0.457,21.3,0.476,1.17,0.21,0.412,0.522,0.555,0.232,0.693,10.5,0.809,0.264,0.308,0.101,1.04,7.35,1.02,0.219,0.409,3.39,0.486,1.5,0.11,0.347,0.183,0.545,1.96,0.2,3.83,0.143,1.21,0.94,2.22,0.128,0.489,0.197,16.4,0.393,1.62,4.14,0.333,8.75,1.64,0.368,0.474,0.748,0.645,4.05,0.376,1.48,0.207,11.5,0.228,2.08,5.16,1.08,0.763,0.565,0.735,1.05,16.5,1.34,0.372,0.812,0.2,0.354,0.775,2.51,0.399,1.09,1.89,0.302,0.339,0.538,0.15,1.35,0.3,0.33,0.255,0.163,18,0.674,1.09,0.428,3.65,0.558,0.372,0.635,0.665,0.642,0.116,0.232,0.571,11.1,0.735,0.559,0.25,0.2,0.351,1.48,0.355,1.4,0.306,0.307,0.714,0.657,6.9,0.233,0.225,1.34,0.157,0.476,0.522,1.42,2.38,2.07,0.621,2.39,0.562,0.786,0.28,0.465,1.05,1.02,0.368,0.374,0.135,0.683,1.37,0.152,1.7,4.46,0.413,0.2,0.559,6.99,1.2,0.586,0.641,1.04,0.188,2.25,13.9,0.404,1.25,0.665,0.247,0.158,0.275,0.93,1.14,4.36,2.96,0.263,0.301,0.852,0.697,1.89,21.8,0.087,1.04,1.02,0.33,0.382,0.561,0.38,2.45,0.759,0.358,0.54,1.3,0.392,3.89,0.321,9.44,3.61,0.272,0.178,0.28,0.342,0.499,2.98,0.163,0.2,0.21,3.43,0.965,1.28,3.41,0.356,0.203,1.3,6.15,0.693,0.268,0.2,0.52,0.491,1.26,0.373,0.499,9.66,0.122,0.457,0.115,0.289,0.628,0.422,0.294,0.2,1.18,0.243,0.563,0.13,2.71,1.28,1.98,7.65,0.144,1.13,0.278,0.33,0.247,0.958,0.587,0.2,0.141,0.187,0.573,0.2,0.406,0.091,3.13,1.79,0.786,0.358,12.9,1.2,0.574,14.9,0.323,22.6,0.2,0.194,0.225,0.65,0.795,5.62,0.196,0.365,1.02,1.58,0.446,0.68,8.75,0.169,0.508,3.17,0.78,0.753,6.09,1.04,0.292,0.363,0.447,10.3,0.269,5.62,0.276,0.27,8.28,0.332,1.18,0.087,0.098,0.92,0.248,1.29,0.78,2.59,0.709,0.353,0.473,0.334,0.544,0.33,0.378,0.861,0.314,3.36,0.167,1.25,0.812,0.736,1.61,0.733,0.364,0.624,0.305,40.8,0.437,4.38,0.4,0.974,0.756,0.632,0.345,0.632,2.92,0.25,0.676,25.2,0.786,0.77,0.287,2.3,0.537,0.672,1.18,0.536,1.21,0.251,3.16,0.175,1.17,15.8,0.389,4.97,2.03,0.455,0.304,0.662,0.171,0.525,3.22,3.08,0.905,0.799,2.79,0.315,1.41,0.648,0.202,1.23,8.56,1.02,1.15,3.17,1.19,0.239,1.22,0.821,0.738,0.11,0.139,0.198,0.396,0.474,1.8,15,0.989,0.285,3.49,1.15,0.235,6.13,2.48,0.242,0.923,1.33,3.76,0.257,0.467,1.15,0.65,4.54,1.36,0.856,0.433,0.562,0.312,0.926,24.5,0.329,0.912,0.532,6.06,0.91,0.788,0.558,1.16,0.566,0.383,3.23,0.756,7.85,0.979,1.87,0.336,0.634,1.72,1.68,1.91,3.14,23.9,0.803,1.21,2.1,1.12,0.205,0.221,1.39,0.406,0.602,0.668,0.332,2.42,0.467,9.33,0.319,0.355,16.4,0.431,1.43,3.27,0.302,1.84,1.57,1.34,0.275,12,0.655,0.471,0.163,0.802,0.959,1.84,1.58,0.787,1.57,0.219,0.439,0.404,0.733,0.415,0.152,0.884,0.461,0.167,1.38,0.117,0.499,0.115,0.263,1.2,1.71,2.6,1.09,0.508,1.94,0.909,1.38,0.226,2,0.717,0.507,0.648,0.3,0.107,1.8,0.466,6.27,0.507,0.199,0.53,1.84,0.299,0.377,0.157,0.799,4.8,0.686,1.19,0.215,0.633,0.406,0.519,0.535,0.089,0.2,21.1,0.332,0.714,0.456,16.1,1.47,3.51,0.431,0.586,1.45,0.39,1.9,0.415,0.669,0.202,0.105,0.389,0.292,1.96,4.42,0.246,0.133,1.25,0.658,0.2,1.08,0.154,0.625,0.562,3.09,0.947,0.505,0.254,0.37,3.49,3.29,0.545,17.9,0.424,0.128,0.4,0.621,0.938,0.611,1.25,0.318,1.34,0.847,3.98,15.3,19.1,0.232,1,0.425,2.8,0.254,2.2,0.291,0.493,8.94,0.413,4.04,21.1,1.74,0.233,0.175,0.895,0.857,0.372,0.617,0.611,2.49,0.21,0.085,0.313,0.455,2.45,0.416,0.147,0.61,0.674,0.644,19.8,1.1,0.34,0.762,13.9,0.487,0.3,1.65,0.11,1.81,0.667,0.898,4.2,27.6,0.569,8.35,1.66,0.53,6.1,0.87,0.345,1.45,0.563,11.7,0.105,1.48,1.57,4.67,0.502,0.749,0.236,0.498,0.177,2.8,0.432,0.428,11.2,3.14,2.03,0.526,0.111,0.802,0.464,1.12,0.636,0.196,0.552,1.49,0.48,0.269,0.462,0.743,0.272,0.62,1.93,6.36,3.37,0.106,5.45,0.799,0.264,5.69,0.454,25.3,0.2,18,1.55,0.713,0.424,0.658,0.533,0.173,0.325,0.558,32.3,0.689,0.653,0.62,11.4,3.56,2.38,10.6,0.578,1.3,0.112,0.617,1.59,1,0.608,0.902,0.898,0.56,0.38,13.2,1.23,1.06,0.209,0.42,0.572,0.283,0.193,0.396,0.575,11.8,0.111,0.186,0.254,0.609,1.05,1.39,3.67,0.842,0.175,0.2,0.392,0.2,0.839,0.139,3.52,1.57,0.474,0.587,0.54,0.141,1.74,0.741,3.5,0.191,0.692,0.716,97.2,0.249,0.2,10.4,0.642,0.309,0.604,0.333,0.311,0.433,0.725,1.39,0.164,2.08,0.678,0.568,0.654,0.581,0.691,7.74,0.28,1.36,0.123,1.21,0.549,0.64,0.348,0.675,1.04,6,0.698,0.404,0.298,9.87,0.776,0.115,5.86,1.07,3.49,0.416,0.132,1.55,0.553,0.97,0.9,15.8,0.599,0.2,1.11,2.86,12.6,0.573,1.21,4.88,0.2,0.43,1.18,0.215,0.812,2.94,0.447,0.804,0.663,0.556,10.6,0.256,0.349,0.845,0.274,0.604,0.205,11.9,1.05,0.771,37.6,9.65,0.215,0.203,0.868,0.761,3.7,0.407,0.183,0.267,0.333,0.949,1.85,0.65,0.316,0.124,1.5,0.628,1.38,0.855,0.292,1.51,0.377,0.766,2.59,1.56,6.82,0.27,10.8,0.25,0.419,9.41,0.366,2.65,20.3,0.261,1.09,0.298,0.214,0.666,1.32,4.39,1.42,2.72,0.378,0.584,0.3,0.553,1.02,8.47,0.374,0.788,21.3,0.392,0.156,1.44,1.65,0.643,0.332,0.2,4.69,2.24,0.319,1.21,0.448,0.499,0.141,0.766,0.772,0.611,0.836,0.4,10.6,0.233,0.912,0.193,1.31,2.05,4.46,17.4,0.623,1.41,0.445,0.918,0.282,0.372,5.88,41.1,0.2,0.216,0.323,0.757,13.6,0.709,1.1,0.292,0.207,2.56,2.2,0.177,1.78,0.29,0.111,0.659,5.41,3.77,0.455,0.298,0.238,0.308,0.377,0.452,0.293,2.27,0.457,0.204,0.641,0.251,0.149,0.18,0.154,1.88,0.331,0.486,0.546,3.03,0.796,0.181,0.227,19.9,1.65,1.42,0.528,1.14,0.388,0.626,1.46,1.08,0.094,0.937,0.318,0.691,1.09,1.19,0.247,0.517,9.41,9,1.2,1.61,0.19,0.906,0.911,0.742,1.44,0.2,0.396,0.582,7.31,0.868,1.02,22.3,0.657,0.183,0.185,0.278,0.531,0.2,0.826,1.23,0.211,13,0.337,1.36,0.513,1.05,16.4,0.626,4,3.31,0.146,0.432,9.3,3.02,1.22,0.22,0.451,0.593,0.761,0.666,0.259,9.37,5.56,0.273,2.11,0.085,0.354,1.75,0.233,0.417,0.74,2.95,0.87,0.586,1.06,0.251,0.511,0.661,5.51,0.269,0.417,0.169,0.457,0.613,1.28,0.175,0.472,0.668,0.808,3.52,1.19,0.2,2.81,0.469,0.506,14.2,11.7,2.93,2.65,0.644,0.184,0.242,4.57,0.282,0.086,0.206,0.549,2.36,0.28,0.37,0.297,0.524,0.561,7.31,0.442,0.745,1.2,7.3,2.73,0.213,5.07,0.597,1.89,0.586,1.05,1.07,0.26,0.586,0.421,0.431,0.854,0.225,1.17,0.404,1.84,0.473,1.52,1.23,0.73,0.98,37.5,0.803,3.48,1.78,0.2,0.856,0.519,0.614,1.5,0.479,5.5,0.184,1.38,7.63,0.2,0.521,0.626,1.57,2,4.4,2.48,1.38,0.448,9.9,0.286,7.92,0.101,0.132,0.791,2.27,2.33,0.2,4.68,0.567,0.34,0.179,8.43,0.882,0.105,0.782,2.74,0.428,1.49,0.698,2.61,3.75,9.89,0.436,0.357,0.868,1.53,0.22,0.778,0.2,0.335,0.167,0.442,0.212,6.78,6.94,0.441,1.26,0.283,7.22,6.71,0.949,0.369,0.812,0.764,0.084,1.75,0.422,0.223,0.741,0.682,0.207,0.2,0.313,0.688,1.72,0.855,4.12,0.381,0.2,7.9,0.873,0.498,0.225,0.261,0.2,8.69,4.39,10.6,1.66,1.9,0.981,0.257,0.49,7.01,96.9,0.244,0.432,0.121,1.07,2.96,7.27,1.51,1.23,1.06,0.633,7.5,0.237,0.481,1.36,0.255,0.265,0.415,0.663,0.497,2.16,0.967,0.72,0.201,0.157,0.756,0.765,1.01,9.72,14.3,0.198,0.599,0.2,1.21,0.283,0.754,0.715,0.497,0.612,0.274,0.808,19.9,0.443,0.442,1.24,0.395,0.423,1.04,0.2,5.5,0.49,0.382,0.377,0.366,0.2,0.225,2.48,0.337,30.6,0.694,7.28,0.317,2.48,1.92,10,20.8,0.232,8.07,0.232,1.44,1.11,0.19,0.328,0.781,0.24,0.357,1.13,9.45,2.11,1.7,1.04,0.249,0.805,0.596,0.599,0.705,1.86,0.255,0.261,0.2,0.31,2.85,2.87,0.764,0.976,0.165,1.31,0.269,0.881,0.963,0.292,0.373,0.203,1.54,0.2,1.47,0.584,0.598,0.291,2.03,0.501,0.706,0.531,0.129,0.2,0.631,0.616,0.783,9.92,0.362,0.444,28.1,7.59,0.344,0.698,7.3,0.415,0.15,2.12,1.59,2.82,0.664,0.451,0.266,0.599,0.335,0.378,0.2,1.1,0.3,0.435,0.365,0.251,1.27,4.9,0.783,2.92,1.8,1.1,0.2,1.5,0.352,0.662,0.165,0.183,1.31,0.53,2.1,1.18,0.569,2.25,13.2,1.18,0.892,0.311,0.286,0.258,36.7,0.791,0.227,45.5,6.21,1.01,0.272,1.99,0.307,0.174,0.177,0.401,0.106,2.65,0.278,1.29,0.353,9.77,0.191,9.98,0.463,0.315,0.163,1.29,0.162,1.55,0.283,0.2,4.6,0.181,2.12,0.559,34.7,0.419,0.796,0.223,0.366,0.714,0.894,0.743,0.273,0.751,0.175,1.54,0.182,2.91,0.267,0.4,19.8,0.365,4.9,7.87,0.569,1.97,0.388,0.568,7.13,1.37,0.2,0.213,0.152,0.107,1.43,0.21,0.124,25.6,0.589,0.2,1.92,2.8,2.13,0.772,0.927,0.798,3.32,0.321,1.48,1.01,0.268,0.151,1.19,1.32,0.688,0.2,0.198,0.328,0.216,0.2,1.43,1.09,1.43,0.261,1.94,15.7,0.672,5.03,9.84]],\"q1\":0.328,\"median\":0.648,\"q3\":1.45,\"lowerfence\":0.084,\"hoverinfo\":\"y\",\"upperfence\":3.13,\"boxpoints\":\"outliers\",\"marker\":{\"color\":\"#7cb5ec\",\"fill\":\"#c0e9ff\"},\"color\":[\"#c0e9ff\"],\"stroke\":[\"#7cb5ec\"],\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"box\"}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"showticklabels\":false},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"Level (MG/L)\",\"titlefont\":{\"size\":16,\"family\":\"Arial\"},\"tickfont\":{\"size\":16,\"family\":\"Arial\"},\"hoverformat\":\",.4r\",\"linecolor\":\"black\",\"rangemode\":\"tozero\",\"showgrid\":false,\"tickcolor\":\"black\"},\"hoverlabel\":{\"bgcolor\":\"white\"},\"hovermode\":\"closest\",\"showlegend\":false},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false,\"displayModeBar\":false},\"data\":[{\"fillcolor\":\"rgba(192,233,255,0.5)\",\"y\":[[0.485,1.65,2.72,3.55,0.384,0.242,0.2,1.49,0.708,0.453,3.57,0.529,0.19,9.96,2.43,0.688,0.41,0.806,0.569,0.759,0.472,0.203,0.86,0.682,4.95,0.174,0.15,0.824,0.2,0.198,2.38,0.933,2.83,0.329,0.094,0.776,0.999,0.251,0.801,0.143,0.174,1.4,0.888,3.22,0.277,20.1,12.5,0.211,3.65,0.877,0.389,2.22,0.678,1.23,1.03,0.393,0.296,0.978,0.212,7.63,1.13,0.42,0.591,0.574,0.637,2.43,0.651,0.645,0.367,0.776,0.29,0.653,4.38,0.64,1.21,0.617,0.389,13.1,0.2,0.212,0.573,6.66,0.528,0.824,0.393,0.61,0.421,0.194,0.859,1.63,0.588,0.726,0.357,0.546,0.381,0.33,0.272,1.46,1.16,0.491,0.869,0.848,0.849,3.05,14.5,12.8,1.28,1.24,0.213,0.456,0.504,0.559,0.308,2.22,0.356,12.5,1.19,0.921,0.556,0.334,0.572,0.218,0.677,1.14,0.179,0.133,0.268,0.791,4.29,0.83,1.06,0.427,0.232,0.214,0.622,0.2,0.831,0.344,0.835,0.6,0.118,0.501,29.2,1.7,10.4,0.375,7.05,0.191,0.643,2.79,1.24,0.087,0.195,0.249,0.386,0.204,9.23,0.424,0.839,0.294,0.68,2.21,3.24,0.922,0.346,0.401,4.34,0.239,0.436,0.959,0.385,7.84,0.108,0.421,1.24,0.225,1,0.99,1.3,1.64,1.3,1.17,0.349,1.37,0.689,0.883,1.1,1.52,9.29,9.98,0.296,1.17,0.987,0.136,2.33,2.85,2.3,0.577,0.2,0.938,0.222,0.392,0.361,36.7,0.163,0.366,0.2,0.088,3.39,0.133,1.44,0.338,2.41,1.04,0.337,0.535,18,7.9,1.45,0.13,2.73,0.516,0.534,2.03,3.32,0.188,0.358,0.215,0.183,3.82,6.19,1.01,1.99,2.06,8.76,0.451,0.609,0.489,4.11,0.2,1.01,1.69,0.559,0.713,0.708,0.597,0.592,0.528,1.97,0.919,1.8,0.849,0.14,0.839,0.46,0.693,0.328,0.2,0.441,0.386,0.515,7.09,0.729,0.806,11.3,0.424,15.1,3.35,0.322,0.242,0.532,3.91,0.808,0.624,3.96,1.62,0.646,365,1.22,1.27,1.56,0.442,0.533,0.602,14.8,26.8,3.42,0.186,0.559,4.09,0.232,0.321,0.2,0.254,0.183,0.729,19.3,0.249,0.729,0.919,0.6,1.43,0.212,0.427,2.68,2.92,0.358,3.48,0.55,22.6,0.311,0.108,0.359,0.4,0.405,0.6,1.21,1.08,0.814,0.217,8.61,0.894,0.403,3.01,2.18,3.62,0.862,3.45,0.301,0.753,0.74,8.74,1.55,0.167,7.72,0.771,0.766,1.27,0.647,0.436,10.6,0.214,2.98,0.2,0.242,0.262,0.368,0.71,0.33,0.47,0.8,10.4,0.177,0.368,3.4,0.586,0.131,0.279,1.67,0.298,1.14,1.84,0.134,0.513,0.161,0.788,0.599,0.237,1.54,0.201,0.769,1.26,0.658,7.49,1.23,0.361,0.38,2.47,0.869,18.2,0.265,0.357,0.751,1.05,1.24,3.25,0.407,0.206,1.21,10.6,0.163,0.582,0.826,1.12,0.218,0.529,7.27,0.243,0.752,0.505,0.578,0.521,11.7,2.39,1.13,0.573,0.154,11.3,0.268,0.2,0.651,1.94,0.789,0.695,0.802,1.06,0.455,18.2,1.83,1.81,0.433,3.44,0.544,7.86,0.41,1.77,0.151,2.17,0.18,0.172,0.2,2.47,1.29,1.65,0.361,0.219,0.886,0.74,1.08,0.415,4.26,0.19,0.452,2.96,0.295,0.598,0.905,0.318,0.088,0.331,0.83,0.836,0.834,17.7,1.58,0.481,0.377,14.7,0.32,6.85,2.1,0.296,0.246,0.546,9.63,0.201,1.09,0.78,1.32,0.396,0.861,0.247,3,0.308,10.3,0.293,3.72,0.411,1.2,0.409,2.66,0.377,0.185,0.701,0.259,0.201,0.49,0.184,0.827,0.2,3.13,18.8,0.218,0.221,0.177,0.732,0.735,0.381,0.246,14,0.419,0.862,0.601,2.61,0.628,0.369,0.893,43,0.93,0.56,0.774,0.69,5.86,1.2,0.214,0.93,0.497,0.419,0.315,3.12,0.52,3.9,0.573,0.817,7.75,0.753,0.998,0.818,3.88,0.25,8.5,0.384,0.141,0.865,0.198,0.653,2.84,2.02,0.2,0.326,5.24,0.186,0.102,0.268,0.135,0.596,4.78,13.5,1.6,0.307,0.802,0.912,0.577,1.1,3.48,0.288,0.555,4.03,0.321,1.61,0.283,0.426,0.407,0.665,19.3,0.42,0.528,1.94,0.592,0.297,0.945,0.404,2.31,1.04,1.54,0.377,0.793,1.77,0.607,0.951,7.24,2.43,0.329,0.094,1.04,4.73,0.797,4.99,3.09,0.776,0.645,0.294,5.16,0.302,0.2,0.561,0.664,0.579,0.795,0.211,2.33,11.6,0.945,0.221,9.63,0.912,0.562,1.37,0.431,0.17,8.44,0.847,0.152,0.683,1.14,0.213,1.33,0.259,0.777,1.8,0.404,0.251,9.28,0.653,3.38,0.365,0.405,0.578,0.2,0.214,0.342,2.77,0.2,2.37,0.393,1.2,0.79,0.695,0.219,7.8,2.65,0.506,0.189,2.19,0.36,0.764,0.468,0.64,0.143,0.104,1.61,0.264,0.2,0.901,0.708,0.397,0.303,0.129,1.12,0.365,0.389,0.15,0.359,9.83,7.16,0.503,0.561,0.415,3.54,0.74,2.68,0.195,0.605,10.7,1.57,2.89,1.31,0.9,1.43,0.511,0.123,5.04,0.89,0.728,0.568,0.267,0.406,0.376,0.845,0.297,0.207,16.2,0.211,0.466,4.13,0.244,11.2,3.98,0.852,0.341,21,0.2,0.615,0.09,1.09,14.4,0.396,0.181,3.89,0.392,22.6,0.296,1,0.55,0.464,2.61,4.92,0.869,0.298,0.221,0.648,0.316,1.62,0.89,0.157,0.2,0.2,0.387,0.334,2.71,5.46,0.254,0.317,0.824,18.4,1.07,13,1.03,18.5,0.574,0.453,0.742,0.24,0.437,4.97,0.351,0.737,0.282,0.777,0.397,0.247,21.8,0.698,0.193,0.229,8.68,0.903,0.2,0.098,1.52,0.813,4.45,0.968,0.147,0.17,0.274,0.441,0.342,1.94,3.84,0.346,2.14,0.38,0.38,0.278,0.148,0.366,0.364,0.751,0.242,0.598,0.474,0.271,0.234,0.263,3.52,0.919,0.44,0.148,7.39,0.305,2.37,0.362,4.87,0.396,0.832,0.342,0.366,0.477,1.77,0.558,0.503,0.732,0.342,0.589,0.461,1.5,3.8,2.21,0.478,0.858,0.187,0.2,0.309,4.95,0.532,1.24,1.31,1.06,0.198,0.2,0.09,0.305,0.907,0.762,0.313,6.59,0.268,0.201,30.8,1.31,0.377,0.789,0.678,0.739,0.432,0.454,0.466,0.315,0.111,0.463,0.123,1.36,1.72,0.654,2.81,0.519,1.02,0.296,0.35,0.341,0.558,0.89,10.1,0.228,1.6,0.443,0.092,1.47,0.48,0.104,0.138,13.2,2.66,8.99,1.39,3.07,1.69,3.32,0.158,0.647,1.4,0.543,2.12,0.468,0.47,0.706,1.13,11.4,0.451,33.1,0.47,0.384,0.232,0.269,0.286,0.251,0.316,0.246,0.809,2.52,0.642,0.394,0.534,0.202,0.388,0.496,0.81,1.31,27.9,2.11,1.21,0.443,0.615,1.62,0.447,0.215,0.659,0.693,0.253,0.781,2.07,0.327,0.247,1.04,0.771,0.608,0.287,0.233,10.4,1.28,0.681,0.2,0.857,0.762,0.433,0.61,0.223,2.46,0.135,0.363,1.09,0.263,0.785,2.04,2.92,0.95,0.2,0.095,0.304,9.1,0.52,0.392,0.467,0.342,3.26,0.742,0.809,0.391,0.154,12.2,0.917,0.2,0.599,0.099,0.386,0.255,0.397,0.37,0.835,0.584,0.201,0.43,0.373,1.16,0.55,0.681,0.305,24.1,0.607,0.321,0.538,0.578,6.28,0.469,0.685,3.53,0.844,0.571,0.85,1.01,0.45,0.217,0.293,0.145,0.271,0.458,0.242,32.8,0.538,1.29,0.848,3.41,0.781,0.597,0.383,0.658,0.629,0.637,0.828,18.5,0.291,0.16,10.8,0.386,22.4,2,0.531,0.658,0.478,0.387,0.426,1.33,0.599,0.245,7.69,0.2,1.4,0.595,1.42,0.2,0.2,0.592,0.481,4.27,0.478,0.384,0.849,11.4,0.17,0.199,2.46,0.2,0.411,0.426,0.443,0.183,9.77,0.2,0.407,0.189,0.114,1.02,0.13,1.55,0.639,0.614,2.92,0.6,0.2,0.2,0.309,0.456,0.798,0.727,0.312,0.635,43.4,0.123,0.245,0.202,2.22,2.51,0.5,0.162,3.61,0.6,0.225,1.32,2.12,0.237,3.55,12.7,1.16,2.32,0.32,1.68,0.121,1.11,0.464,0.568,0.696,0.922,4.05,1.53,3.34,0.221,0.361,0.224,1.29,0.427,1.3,1.08,0.388,0.228,0.82,6.18,0.424,3.66,0.547,1.62,0.366,0.979,0.534,0.302,0.588,0.753,0.2,0.73,0.431,1.09,0.658,79.6,0.401,0.356,0.62,0.321,0.205,0.158,0.299,0.398,0.233,3.91,0.097,1.22,1.38,1.74,0.223,0.198,0.36,1.37,0.687,9.28,1.33,0.41,0.138,0.619,0.736,1.15,17.4,0.706,1.91,0.685,0.476,1.36,1.85,1.36,0.35,0.661,0.883,9.43,0.431,0.312,0.146,0.29,0.45,0.386,0.133,1.13,0.333,0.324,0.675,3.45,0.185,0.633,4.79,11.2,1.07,0.959,0.288,0.299,0.428,1.54,0.492,0.571,1.43,0.408,2.93,2.13,1.26,0.2,0.42,0.794,0.162,3.62,0.945,1.36,1.69,1.05,0.423,1.04,0.938,0.37,9.57,3.78,0.851,0.2,0.933,9.98,0.38,1.49,0.728,0.264,0.689,0.537,0.235,0.789,17.9,0.404,0.704,1.22,0.732,1.22,0.474,0.339,9.42,0.27,0.504,3,0.825,0.169,0.299,0.255,1.33,0.451,0.471,21.8,0.105,1.11,12.9,0.521,4.24,0.842,0.596,0.455,0.614,0.23,0.146,1.49,0.284,0.237,16.9,0.991,0.791,0.742,1.09,0.095,0.133,0.441,0.389,2.12,2.55,0.718,1.33,0.671,0.459,8.84,0.271,0.222,1.36,2.09,0.2,1.22,0.612,0.314,0.433,0.951,0.677,0.459,0.867,0.654,0.796,0.627,0.213,0.819,0.17,1.16,0.541,0.68,1.36,0.266,0.236,0.717,7.93,0.481,39.9,0.466,0.966,0.784,0.278,2.83,2.25,2.43,0.278,0.2,0.893,0.771,0.99,1.67,0.846,0.257,0.761,2.28,0.429,0.304,4.53,1.59,11.2,1.3,0.316,0.805,0.617,2.43,0.293,0.243,0.925,1.72,1.38,5.99,0.126,0.171,0.267,1.98,1.73,0.309,0.779,0.419,4.39,0.802,12.8,0.648,5.19,0.142,0.292,0.361,0.183,9.95,2.62,0.614,0.256,0.572,0.502,1.06,0.766,37.8,0.614,0.803,0.681,0.447,0.228,0.843,3.22,3.12,0.381,0.352,0.653,3.59,7.89,0.993,0.561,2.99,0.614,0.328,0.821,0.233,1.13,0.347,0.552,0.228,0.789,0.271,0.421,4.89,4.01,0.2,1.28,0.517,3.39,0.563,0.555,0.216,0.446,0.19,0.544,21.2,4.03,0.206,1.03,1.16,0.334,0.227,3.51,0.863,9.91,0.676,0.2,1.82,0.467,0.652,0.2,0.2,9.9,0.528,0.729,0.2,0.44,0.132,0.737,0.511,0.2,13.1,0.422,0.627,0.62,0.843,1.51,2.18,1.07,0.314,0.2,7.6,0.423,0.533,0.179,0.172,0.665,0.489,0.2,0.271,0.874,0.379,0.198,0.87,0.261,17.5,1.75,0.321,0.749,0.304,8.74,0.619,2.45,1.1,0.524,2.25,0.324,0.874,0.259,1.33,0.212,6.1,0.2,0.649,2.83,1.7,1.57,0.919,0.376,0.31,0.773,0.6,1.29,0.54,3.75,0.51,0.276,0.955,0.38,0.89,0.6,0.224,0.7,1.42,9.85,0.458,1.12,1.12,0.551,0.6,3.46,0.302,0.818,0.2,0.103,0.182,1.23,1.39,0.691,0.899,4.79,0.235,1.92,0.727,0.84,0.723,0.255,3.19,0.52,0.622,1.56,3.46,0.249,0.192,0.479,0.825,4.76,2.39,0.101,4.15,0.617,0.431,1.62,6.61,0.816,0.575,3.59,1.22,1.06,0.406,16.4,1.69,0.174,0.2,0.316,3.74,0.724,0.24,0.262,0.906,4.75,0.108,0.618,1.16,0.446,3.33,0.255,0.23,0.312,0.786,7.5,0.338,0.199,0.15,0.73,0.589,0.74,0.567,2.77,0.914,0.2,0.783,0.61,2.32,10.9,0.287,0.648,0.369,0.26,1.71,0.815,45.7,0.993,0.773,0.299,3.19,0.193,1.16,0.23,2.39,2.23,0.453,5.56,0.578,1.54,0.961,0.607,0.522,0.3,3.57,0.494,1.21,3.23,1.28,6.47,1.18,0.755,1.82,2.84,0.24,3.6,5.02,0.408,1.3,7.35,16.9,0.623,0.892,0.322,0.244,1.89,0.132,3,0.555,0.774,0.105,2.02,0.85,0.395,0.362,0.198,0.254,1.03,1.66,0.479,0.455,0.138,1.07,0.249,0.318,1.04,15.9,1.51,0.51,0.289,0.984,0.31,1.87,0.2,0.192,0.801,1.19,0.654,0.191,0.205,3.13,0.392,1.23,1.17,0.426,0.229,0.739,0.23,0.467,0.304,0.409,9.31,1.53,0.975,1.22,1.16,0.617,0.88,0.366,3.8,0.367,2.37,0.837,1.03,0.48,0.618,0.15,0.26,1.1,8.57,0.43,0.438,1.29,0.754,1.2,0.145,0.513,0.2,0.23,0.315,0.372,0.158,0.21,1.92,0.197,1.02,3.82,0.926,0.2,0.183,5.2,4.52,9.35,0.338,2.68,0.451,0.314,0.661,0.259,0.823,0.335,0.558,0.56,0.351,1.76,0.25,0.7,0.624,2.63,2.36,1.92,3.27,0.2,0.795,0.929,0.194,11.5,0.678,0.367,18.4,0.668,1.42,0.2,0.246,0.589,0.27,0.543,0.916,6.13,19.3,6.1,0.748,2.61,4.22,0.187,0.599,11.6,0.19,0.798,0.2,0.337,0.446,1.16,2.28,0.798,0.431,0.373,0.666,0.198,3.45,1.58,0.251,1.37,0.297,2.33,0.208,0.782,0.346,0.422,3.88,0.503,2.66,0.514,0.922,1.1,3.11,0.549,2.59,0.217,0.396,0.479,0.637,0.19,0.158,0.273,1.53,1.26,0.59,0.59,0.28,0.444,1.3,0.103,0.284,0.22,3.84,1.69,0.32,0.412,0.604,0.445,8.04,0.411,0.207,0.308,0.467,0.2,0.747,0.303,0.62,0.495,0.846,0.796,1.63,8.53,0.229,0.569,0.12,0.205,0.701,16.1,0.493,0.259,0.109,9.02,0.614,4.51,0.466,0.547,5.68,0.482,0.486,0.35,132,0.741,0.338,0.542,0.23,0.155,0.471,1.02,0.473,19.2,0.585,0.1,0.21,4.49,1.07,1.87,0.902,0.882,21.3,0.325,0.2,0.906,0.533,0.842,0.215,0.247,1.11,0.455,0.795,0.456,0.979,40,2.36,1.1,0.975,10.8,0.145,0.693,4.7,0.952,1.24,1.29,0.401,1.92,1.63,2.78,0.266,4.03,0.484,0.383,7.63,1.26,3.56,0.396,1.05,0.102,0.48,0.203,0.705,0.2,0.257,0.126,0.498,1.5,0.397,0.769,0.305,1.28,36.5,0.129,2.02,0.676,0.801,0.249,1.22,0.184,0.653,0.394,0.356,0.379,0.391,0.272,2.31,1.42,0.316,0.166,10.4,0.962,4.07,0.157,0.16,4.3,0.185,4.55,0.828,0.697,1.15,0.483,1.57,0.355,0.232,1,1.5,11.4,3.79,0.191,4.12,0.51,0.773,0.22,1.95,0.545,0.641,1.13,0.656,0.309,4.28,0.581,0.77,0.402,0.185,0.845,0.549,24.7,1.64,0.469,2.43,0.098,0.299,0.251,0.397,8.01,5.26,0.2,0.679,1.54,0.563,2.45,0.133,0.567,0.199,1.08,0.81,0.708,10.3,1.12,0.91,11.3,0.608,0.904,0.749,0.234,0.234,3.12,3.77,0.743,0.392,0.456,0.1,0.163,0.294,0.663,0.111,0.93,0.383,4.15,31.1,0.961,0.348,0.773,0.673,0.86,0.435,0.25,9.69,0.279,0.614,0.608,0.63,0.426,0.472,1.15,3.02,0.265,0.761,0.517,1.04,0.817,0.238,0.663,0.631,17.8,4.37,2.08,0.347,0.418,0.2,0.27,1.68,0.291,0.264,1.49,1.7,0.434,1.74,0.302,0.562,0.462,0.248,3.65,0.634,0.263,0.536,4.41,0.275,0.107,3.3,1.2,0.201,6.81,0.776,0.58,8.82,0.706,1.17,0.785,0.534,0.337,0.985,1.34,0.763,2.73,0.809,0.232,7.89,0.286,0.286,3.29,1.55,4.94,9.04,0.725,0.23,0.389,0.395,1.26,1.54,0.534,0.722,0.456,0.298,0.245,21.5,0.492,1.07,0.316,0.2,1.1,0.268,1.6,1.18,0.2,0.776,0.612,0.762,0.397,1.32,0.246,1.63,18.2,0.283,0.275,0.284,0.676,0.622,0.223,0.325,0.2,0.934,0.714,0.774,0.2,0.961,1.38,1.13,0.715,1.7,3.96,0.378,0.571,0.21,13.4,1.39,0.457,21.3,0.476,1.17,0.21,0.412,0.522,0.555,0.232,0.693,10.5,0.809,0.264,0.308,0.101,1.04,7.35,1.02,0.219,0.409,3.39,0.486,1.5,0.11,0.347,0.183,0.545,1.96,0.2,3.83,0.143,1.21,0.94,2.22,0.128,0.489,0.197,16.4,0.393,1.62,4.14,0.333,8.75,1.64,0.368,0.474,0.748,0.645,4.05,0.376,1.48,0.207,11.5,0.228,2.08,5.16,1.08,0.763,0.565,0.735,1.05,16.5,1.34,0.372,0.812,0.2,0.354,0.775,2.51,0.399,1.09,1.89,0.302,0.339,0.538,0.15,1.35,0.3,0.33,0.255,0.163,18,0.674,1.09,0.428,3.65,0.558,0.372,0.635,0.665,0.642,0.116,0.232,0.571,11.1,0.735,0.559,0.25,0.2,0.351,1.48,0.355,1.4,0.306,0.307,0.714,0.657,6.9,0.233,0.225,1.34,0.157,0.476,0.522,1.42,2.38,2.07,0.621,2.39,0.562,0.786,0.28,0.465,1.05,1.02,0.368,0.374,0.135,0.683,1.37,0.152,1.7,4.46,0.413,0.2,0.559,6.99,1.2,0.586,0.641,1.04,0.188,2.25,13.9,0.404,1.25,0.665,0.247,0.158,0.275,0.93,1.14,4.36,2.96,0.263,0.301,0.852,0.697,1.89,21.8,0.087,1.04,1.02,0.33,0.382,0.561,0.38,2.45,0.759,0.358,0.54,1.3,0.392,3.89,0.321,9.44,3.61,0.272,0.178,0.28,0.342,0.499,2.98,0.163,0.2,0.21,3.43,0.965,1.28,3.41,0.356,0.203,1.3,6.15,0.693,0.268,0.2,0.52,0.491,1.26,0.373,0.499,9.66,0.122,0.457,0.115,0.289,0.628,0.422,0.294,0.2,1.18,0.243,0.563,0.13,2.71,1.28,1.98,7.65,0.144,1.13,0.278,0.33,0.247,0.958,0.587,0.2,0.141,0.187,0.573,0.2,0.406,0.091,3.13,1.79,0.786,0.358,12.9,1.2,0.574,14.9,0.323,22.6,0.2,0.194,0.225,0.65,0.795,5.62,0.196,0.365,1.02,1.58,0.446,0.68,8.75,0.169,0.508,3.17,0.78,0.753,6.09,1.04,0.292,0.363,0.447,10.3,0.269,5.62,0.276,0.27,8.28,0.332,1.18,0.087,0.098,0.92,0.248,1.29,0.78,2.59,0.709,0.353,0.473,0.334,0.544,0.33,0.378,0.861,0.314,3.36,0.167,1.25,0.812,0.736,1.61,0.733,0.364,0.624,0.305,40.8,0.437,4.38,0.4,0.974,0.756,0.632,0.345,0.632,2.92,0.25,0.676,25.2,0.786,0.77,0.287,2.3,0.537,0.672,1.18,0.536,1.21,0.251,3.16,0.175,1.17,15.8,0.389,4.97,2.03,0.455,0.304,0.662,0.171,0.525,3.22,3.08,0.905,0.799,2.79,0.315,1.41,0.648,0.202,1.23,8.56,1.02,1.15,3.17,1.19,0.239,1.22,0.821,0.738,0.11,0.139,0.198,0.396,0.474,1.8,15,0.989,0.285,3.49,1.15,0.235,6.13,2.48,0.242,0.923,1.33,3.76,0.257,0.467,1.15,0.65,4.54,1.36,0.856,0.433,0.562,0.312,0.926,24.5,0.329,0.912,0.532,6.06,0.91,0.788,0.558,1.16,0.566,0.383,3.23,0.756,7.85,0.979,1.87,0.336,0.634,1.72,1.68,1.91,3.14,23.9,0.803,1.21,2.1,1.12,0.205,0.221,1.39,0.406,0.602,0.668,0.332,2.42,0.467,9.33,0.319,0.355,16.4,0.431,1.43,3.27,0.302,1.84,1.57,1.34,0.275,12,0.655,0.471,0.163,0.802,0.959,1.84,1.58,0.787,1.57,0.219,0.439,0.404,0.733,0.415,0.152,0.884,0.461,0.167,1.38,0.117,0.499,0.115,0.263,1.2,1.71,2.6,1.09,0.508,1.94,0.909,1.38,0.226,2,0.717,0.507,0.648,0.3,0.107,1.8,0.466,6.27,0.507,0.199,0.53,1.84,0.299,0.377,0.157,0.799,4.8,0.686,1.19,0.215,0.633,0.406,0.519,0.535,0.089,0.2,21.1,0.332,0.714,0.456,16.1,1.47,3.51,0.431,0.586,1.45,0.39,1.9,0.415,0.669,0.202,0.105,0.389,0.292,1.96,4.42,0.246,0.133,1.25,0.658,0.2,1.08,0.154,0.625,0.562,3.09,0.947,0.505,0.254,0.37,3.49,3.29,0.545,17.9,0.424,0.128,0.4,0.621,0.938,0.611,1.25,0.318,1.34,0.847,3.98,15.3,19.1,0.232,1,0.425,2.8,0.254,2.2,0.291,0.493,8.94,0.413,4.04,21.1,1.74,0.233,0.175,0.895,0.857,0.372,0.617,0.611,2.49,0.21,0.085,0.313,0.455,2.45,0.416,0.147,0.61,0.674,0.644,19.8,1.1,0.34,0.762,13.9,0.487,0.3,1.65,0.11,1.81,0.667,0.898,4.2,27.6,0.569,8.35,1.66,0.53,6.1,0.87,0.345,1.45,0.563,11.7,0.105,1.48,1.57,4.67,0.502,0.749,0.236,0.498,0.177,2.8,0.432,0.428,11.2,3.14,2.03,0.526,0.111,0.802,0.464,1.12,0.636,0.196,0.552,1.49,0.48,0.269,0.462,0.743,0.272,0.62,1.93,6.36,3.37,0.106,5.45,0.799,0.264,5.69,0.454,25.3,0.2,18,1.55,0.713,0.424,0.658,0.533,0.173,0.325,0.558,32.3,0.689,0.653,0.62,11.4,3.56,2.38,10.6,0.578,1.3,0.112,0.617,1.59,1,0.608,0.902,0.898,0.56,0.38,13.2,1.23,1.06,0.209,0.42,0.572,0.283,0.193,0.396,0.575,11.8,0.111,0.186,0.254,0.609,1.05,1.39,3.67,0.842,0.175,0.2,0.392,0.2,0.839,0.139,3.52,1.57,0.474,0.587,0.54,0.141,1.74,0.741,3.5,0.191,0.692,0.716,97.2,0.249,0.2,10.4,0.642,0.309,0.604,0.333,0.311,0.433,0.725,1.39,0.164,2.08,0.678,0.568,0.654,0.581,0.691,7.74,0.28,1.36,0.123,1.21,0.549,0.64,0.348,0.675,1.04,6,0.698,0.404,0.298,9.87,0.776,0.115,5.86,1.07,3.49,0.416,0.132,1.55,0.553,0.97,0.9,15.8,0.599,0.2,1.11,2.86,12.6,0.573,1.21,4.88,0.2,0.43,1.18,0.215,0.812,2.94,0.447,0.804,0.663,0.556,10.6,0.256,0.349,0.845,0.274,0.604,0.205,11.9,1.05,0.771,37.6,9.65,0.215,0.203,0.868,0.761,3.7,0.407,0.183,0.267,0.333,0.949,1.85,0.65,0.316,0.124,1.5,0.628,1.38,0.855,0.292,1.51,0.377,0.766,2.59,1.56,6.82,0.27,10.8,0.25,0.419,9.41,0.366,2.65,20.3,0.261,1.09,0.298,0.214,0.666,1.32,4.39,1.42,2.72,0.378,0.584,0.3,0.553,1.02,8.47,0.374,0.788,21.3,0.392,0.156,1.44,1.65,0.643,0.332,0.2,4.69,2.24,0.319,1.21,0.448,0.499,0.141,0.766,0.772,0.611,0.836,0.4,10.6,0.233,0.912,0.193,1.31,2.05,4.46,17.4,0.623,1.41,0.445,0.918,0.282,0.372,5.88,41.1,0.2,0.216,0.323,0.757,13.6,0.709,1.1,0.292,0.207,2.56,2.2,0.177,1.78,0.29,0.111,0.659,5.41,3.77,0.455,0.298,0.238,0.308,0.377,0.452,0.293,2.27,0.457,0.204,0.641,0.251,0.149,0.18,0.154,1.88,0.331,0.486,0.546,3.03,0.796,0.181,0.227,19.9,1.65,1.42,0.528,1.14,0.388,0.626,1.46,1.08,0.094,0.937,0.318,0.691,1.09,1.19,0.247,0.517,9.41,9,1.2,1.61,0.19,0.906,0.911,0.742,1.44,0.2,0.396,0.582,7.31,0.868,1.02,22.3,0.657,0.183,0.185,0.278,0.531,0.2,0.826,1.23,0.211,13,0.337,1.36,0.513,1.05,16.4,0.626,4,3.31,0.146,0.432,9.3,3.02,1.22,0.22,0.451,0.593,0.761,0.666,0.259,9.37,5.56,0.273,2.11,0.085,0.354,1.75,0.233,0.417,0.74,2.95,0.87,0.586,1.06,0.251,0.511,0.661,5.51,0.269,0.417,0.169,0.457,0.613,1.28,0.175,0.472,0.668,0.808,3.52,1.19,0.2,2.81,0.469,0.506,14.2,11.7,2.93,2.65,0.644,0.184,0.242,4.57,0.282,0.086,0.206,0.549,2.36,0.28,0.37,0.297,0.524,0.561,7.31,0.442,0.745,1.2,7.3,2.73,0.213,5.07,0.597,1.89,0.586,1.05,1.07,0.26,0.586,0.421,0.431,0.854,0.225,1.17,0.404,1.84,0.473,1.52,1.23,0.73,0.98,37.5,0.803,3.48,1.78,0.2,0.856,0.519,0.614,1.5,0.479,5.5,0.184,1.38,7.63,0.2,0.521,0.626,1.57,2,4.4,2.48,1.38,0.448,9.9,0.286,7.92,0.101,0.132,0.791,2.27,2.33,0.2,4.68,0.567,0.34,0.179,8.43,0.882,0.105,0.782,2.74,0.428,1.49,0.698,2.61,3.75,9.89,0.436,0.357,0.868,1.53,0.22,0.778,0.2,0.335,0.167,0.442,0.212,6.78,6.94,0.441,1.26,0.283,7.22,6.71,0.949,0.369,0.812,0.764,0.084,1.75,0.422,0.223,0.741,0.682,0.207,0.2,0.313,0.688,1.72,0.855,4.12,0.381,0.2,7.9,0.873,0.498,0.225,0.261,0.2,8.69,4.39,10.6,1.66,1.9,0.981,0.257,0.49,7.01,96.9,0.244,0.432,0.121,1.07,2.96,7.27,1.51,1.23,1.06,0.633,7.5,0.237,0.481,1.36,0.255,0.265,0.415,0.663,0.497,2.16,0.967,0.72,0.201,0.157,0.756,0.765,1.01,9.72,14.3,0.198,0.599,0.2,1.21,0.283,0.754,0.715,0.497,0.612,0.274,0.808,19.9,0.443,0.442,1.24,0.395,0.423,1.04,0.2,5.5,0.49,0.382,0.377,0.366,0.2,0.225,2.48,0.337,30.6,0.694,7.28,0.317,2.48,1.92,10,20.8,0.232,8.07,0.232,1.44,1.11,0.19,0.328,0.781,0.24,0.357,1.13,9.45,2.11,1.7,1.04,0.249,0.805,0.596,0.599,0.705,1.86,0.255,0.261,0.2,0.31,2.85,2.87,0.764,0.976,0.165,1.31,0.269,0.881,0.963,0.292,0.373,0.203,1.54,0.2,1.47,0.584,0.598,0.291,2.03,0.501,0.706,0.531,0.129,0.2,0.631,0.616,0.783,9.92,0.362,0.444,28.1,7.59,0.344,0.698,7.3,0.415,0.15,2.12,1.59,2.82,0.664,0.451,0.266,0.599,0.335,0.378,0.2,1.1,0.3,0.435,0.365,0.251,1.27,4.9,0.783,2.92,1.8,1.1,0.2,1.5,0.352,0.662,0.165,0.183,1.31,0.53,2.1,1.18,0.569,2.25,13.2,1.18,0.892,0.311,0.286,0.258,36.7,0.791,0.227,45.5,6.21,1.01,0.272,1.99,0.307,0.174,0.177,0.401,0.106,2.65,0.278,1.29,0.353,9.77,0.191,9.98,0.463,0.315,0.163,1.29,0.162,1.55,0.283,0.2,4.6,0.181,2.12,0.559,34.7,0.419,0.796,0.223,0.366,0.714,0.894,0.743,0.273,0.751,0.175,1.54,0.182,2.91,0.267,0.4,19.8,0.365,4.9,7.87,0.569,1.97,0.388,0.568,7.13,1.37,0.2,0.213,0.152,0.107,1.43,0.21,0.124,25.6,0.589,0.2,1.92,2.8,2.13,0.772,0.927,0.798,3.32,0.321,1.48,1.01,0.268,0.151,1.19,1.32,0.688,0.2,0.198,0.328,0.216,0.2,1.43,1.09,1.43,0.261,1.94,15.7,0.672,5.03,9.84]],\"q1\":[0.328],\"median\":[0.648],\"q3\":[1.45],\"lowerfence\":[0.084],\"hoverinfo\":\"y\",\"upperfence\":[3.13],\"boxpoints\":\"outliers\",\"marker\":{\"color\":\"#7cb5ec\",\"fill\":\"#c0e9ff\",\"line\":{\"color\":\"rgba(124,181,236,1)\",\"width\":1}},\"type\":\"box\",\"line\":{\"color\":\"rgba(124,181,236,1)\",\"width\":1},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}"},{"path":"usepa.github.io/TADA/reference/TransformCensoredData.html","id":null,"dir":"Reference","previous_headings":"","what":"Function substitutes monitoring device/method detection limits (if available) as result values when applicable. — TransformCensoredData","title":"Function substitutes monitoring device/method detection limits (if available) as result values when applicable. — TransformCensoredData","text":"Function substitutes monitoring device/method detection limits (available) result values applicable.","code":""},{"path":"usepa.github.io/TADA/reference/TransformCensoredData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function substitutes monitoring device/method detection limits (if available) as result values when applicable. — TransformCensoredData","text":"","code":"TransformCensoredData(transform, .data)"},{"path":"usepa.github.io/TADA/reference/TransformCensoredData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function substitutes monitoring device/method detection limits (if available) as result values when applicable. — TransformCensoredData","text":"transform Boolean argument two possible values, “TRUE” “FALSE”. Default transform = TRUE. .data Optional argument; TADA dataframe","code":""},{"path":"usepa.github.io/TADA/reference/TransformCensoredData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function substitutes monitoring device/method detection limits (if available) as result values when applicable. — TransformCensoredData","text":"transform=TRUE, monitoring device/method detection limits (available) substituted result values units. transform = FALSE, monitoring device/method detection limits (available) substituted result values units - Instead, columns appended rows may include censored data. flag indicates 1) row contains censored data, 2) monitoring device/method detection limits available.","code":""},{"path":"usepa.github.io/TADA/reference/UpdateDetCondRef.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Measure Unit Reference Table internal file (for internal use only) — UpdateDetCondRef","title":"Update Measure Unit Reference Table internal file (for internal use only) — UpdateDetCondRef","text":"Update Measure Unit Reference Table internal file (internal use )","code":""},{"path":"usepa.github.io/TADA/reference/UpdateDetCondRef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Measure Unit Reference Table internal file (for internal use only) — UpdateDetCondRef","text":"","code":"UpdateDetCondRef()"},{"path":"usepa.github.io/TADA/reference/UpdateDetLimitRef.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Measure Unit Reference Table internal file (for internal use only) — UpdateDetLimitRef","title":"Update Measure Unit Reference Table internal file (for internal use only) — UpdateDetLimitRef","text":"Update Measure Unit Reference Table internal file (internal use )","code":""},{"path":"usepa.github.io/TADA/reference/UpdateDetLimitRef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Measure Unit Reference Table internal file (for internal use only) — UpdateDetLimitRef","text":"","code":"UpdateDetLimitRef()"},{"path":"usepa.github.io/TADA/reference/UpdateInternalData.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Existing Data in sysdata.rda — UpdateInternalData","title":"Update Existing Data in sysdata.rda — UpdateInternalData","text":"Function internal use . used internal functions used update internal data (e.g. reference tables). function adapted stackoverflow.com thread, can accessed .","code":""},{"path":"usepa.github.io/TADA/reference/UpdateInternalData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Existing Data in sysdata.rda — UpdateInternalData","text":"","code":"UpdateInternalData(..., list = character())"},{"path":"usepa.github.io/TADA/reference/UpdateInternalData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Existing Data in sysdata.rda — UpdateInternalData","text":"... Objects updated sysdata.rda. list Argument indicating data class list.","code":""},{"path":"usepa.github.io/TADA/reference/UpdateInternalData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update Existing Data in sysdata.rda — UpdateInternalData","text":"Updated sysdata.rda file","code":""},{"path":"usepa.github.io/TADA/reference/UpdateMeasureUnitRef.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Measure Unit Reference Table internal file (for internal use only) — UpdateMeasureUnitRef","title":"Update Measure Unit Reference Table internal file (for internal use only) — UpdateMeasureUnitRef","text":"Update Measure Unit Reference Table internal file (internal use )","code":""},{"path":"usepa.github.io/TADA/reference/UpdateMeasureUnitRef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Measure Unit Reference Table internal file (for internal use only) — UpdateMeasureUnitRef","text":"","code":"UpdateMeasureUnitRef()"},{"path":"usepa.github.io/TADA/reference/UpdateWQXCharValRef.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Characteristic Validation Reference Table internal file\r\n(for internal use only) — UpdateWQXCharValRef","title":"Update Characteristic Validation Reference Table internal file\r\n(for internal use only) — UpdateWQXCharValRef","text":"Update Characteristic Validation Reference Table internal file (internal use )","code":""},{"path":"usepa.github.io/TADA/reference/UpdateWQXCharValRef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Characteristic Validation Reference Table internal file\r\n(for internal use only) — UpdateWQXCharValRef","text":"","code":"UpdateWQXCharValRef()"},{"path":"usepa.github.io/TADA/reference/WaterTemp_US.html","id":null,"dir":"Reference","previous_headings":"","what":"Lake Water Temperature — WaterTemp_US","title":"Lake Water Temperature — WaterTemp_US","text":"TADA example dataset containing lake water temperature data U.S. Jan. 2000 July 2022. dataset can reproduced following TADABigdataRetrieval call:","code":""},{"path":"usepa.github.io/TADA/reference/WaterTemp_US.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lake Water Temperature — WaterTemp_US","text":"","code":"data(WaterTemp_US)"},{"path":"usepa.github.io/TADA/reference/WaterTemp_US.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Lake Water Temperature — WaterTemp_US","text":"data frame 14237 rows 103 variables","code":""},{"path":"usepa.github.io/TADA/reference/WaterTemp_US.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lake Water Temperature — WaterTemp_US","text":"AllWaterTempData <- TADABigdataRetrieval(startDate = \"2000-01-01\", endDate = \"2022-07-01\", characteristicName = \"Temperature, water\", siteType = \"Lake, Reservoir, Impoundment\")","code":""},{"path":"usepa.github.io/TADA/reference/WQXCharValRef_Cached.html","id":null,"dir":"Reference","previous_headings":"","what":"Used to store cached WQX QAQC Characteristic Validation Reference Table — WQXCharValRef_Cached","title":"Used to store cached WQX QAQC Characteristic Validation Reference Table — WQXCharValRef_Cached","text":"Used store cached WQX QAQC Characteristic Validation Reference Table","code":""},{"path":"usepa.github.io/TADA/reference/WQXCharValRef_Cached.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Used to store cached WQX QAQC Characteristic Validation Reference Table — WQXCharValRef_Cached","text":"","code":"WQXCharValRef_Cached"},{"path":"usepa.github.io/TADA/reference/WQXCharValRef_Cached.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Used to store cached WQX QAQC Characteristic Validation Reference Table — WQXCharValRef_Cached","text":"object class NULL length 0.","code":""},{"path":"usepa.github.io/TADA/reference/WQXDetCondRef_Cached.html","id":null,"dir":"Reference","previous_headings":"","what":"Used to store cached Result Detection Condition Reference Table — WQXDetCondRef_Cached","title":"Used to store cached Result Detection Condition Reference Table — WQXDetCondRef_Cached","text":"Used store cached Result Detection Condition Reference Table","code":""},{"path":"usepa.github.io/TADA/reference/WQXDetCondRef_Cached.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Used to store cached Result Detection Condition Reference Table — WQXDetCondRef_Cached","text":"","code":"WQXDetCondRef_Cached"},{"path":"usepa.github.io/TADA/reference/WQXDetCondRef_Cached.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Used to store cached Result Detection Condition Reference Table — WQXDetCondRef_Cached","text":"object class NULL length 0.","code":""},{"path":"usepa.github.io/TADA/reference/WQXDetLimitRef_Cached.html","id":null,"dir":"Reference","previous_headings":"","what":"Used to store cached Result Detection Condition Reference Table — WQXDetLimitRef_Cached","title":"Used to store cached Result Detection Condition Reference Table — WQXDetLimitRef_Cached","text":"Used store cached Result Detection Condition Reference Table","code":""},{"path":"usepa.github.io/TADA/reference/WQXDetLimitRef_Cached.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Used to store cached Result Detection Condition Reference Table — WQXDetLimitRef_Cached","text":"","code":"WQXDetLimitRef_Cached"},{"path":"usepa.github.io/TADA/reference/WQXDetLimitRef_Cached.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Used to store cached Result Detection Condition Reference Table — WQXDetLimitRef_Cached","text":"object class NULL length 0.","code":""},{"path":"usepa.github.io/TADA/reference/WQXTargetUnits.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform Units to WQX Target Units — WQXTargetUnits","title":"Transform Units to WQX Target Units — WQXTargetUnits","text":"function compares measure units input data Water Quality Exchange (WQX) 3.0 QAQC Characteristic Validation table.","code":""},{"path":"usepa.github.io/TADA/reference/WQXTargetUnits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform Units to WQX Target Units — WQXTargetUnits","text":"","code":"WQXTargetUnits(.data, transform = TRUE)"},{"path":"usepa.github.io/TADA/reference/WQXTargetUnits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform Units to WQX Target Units — WQXTargetUnits","text":".data TADA dataset transform Boolean argument two possible values, “TRUE” “FALSE”. Default transform = TRUE.","code":""},{"path":"usepa.github.io/TADA/reference/WQXTargetUnits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform Units to WQX Target Units — WQXTargetUnits","text":"transform=TRUE, result values units converted WQX target units. function changes values within \"ResultMeasure.MeasureUnitCode\" \"DetectionQuantitationLimitMeasure.MeasureUnitCode\" WQX target units converts respective values within \"ResultMeasureValue\" \"DetectionQuantitationLimitMeasure.MeasureValue\" fields. addition \"WQX.ResultMeasureValue.UnitConversion\" \"WQX.DetectionLimitMeasureValue.UnitConversion\", transform=TRUE add following two fields input dataset, \"ResultMeasureUnitCode.Original\", \"DetectionLimitMeasureUnitCode.Original\", retain original result unit values. transform = FALSE, result values units converted WQX target units, columns appended indicate target units conversion factors , data can converted. addition \"WQX.ResultMeasureValue.UnitConversion\" \"WQX.DetectionLimitMeasureValue.UnitConversion\",  transform=FALSE add following two fields input dataset: \"WQX.ConversionFactor\" \"WQX.TargetUnit\".","code":""},{"path":"usepa.github.io/TADA/reference/WQXTargetUnits.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transform Units to WQX Target Units — WQXTargetUnits","text":"function ALWAYS add following two columns input dataset: \"WQX.ResultMeasureValue.UnitConversion\", \"WQX.DetectionLimitMeasureValue.UnitConversion\" two fields indicate data can converted.\"NoResultValue\" means data converted ResultMeasureValue, \"NoTargetUnit\" means data converted original unit associated target unit WQX. \"Convert\" means data can transformed, \"Converted\" means function run input transform = TRUE, values already converted. also uses following six fields input dataset: \"CharacteristicName\", \"ActivityMediaName\", \"ResultMeasureValue\", \"ResultMeasure.MeasureUnitCode\", \"DetectionQuantitationLimitMeasure.MeasureValue\", \"DetectionQuantitationLimitMeasure.MeasureUnitCode\" function adds following two fields transforms values within following four fields transform=TRUE: Adds: \"ResultMeasureUnitCode.Original\", \"DetectionLimitMeasureUnitCode.Original\". Transforms: \"ResultMeasureValue\", \"ResultMeasure.MeasureUnitCode\", \"DetectionQuantitationLimitMeasure.MeasureValue\", \"DetectionQuantitationLimitMeasure.MeasureUnitCode\". function adds following two fields transform=FALSE: Adds: \"WQX.ConversionFactor\" \"WQX.TargetUnit\".","code":""},{"path":"usepa.github.io/TADA/reference/WQXunitRef_Cached.html","id":null,"dir":"Reference","previous_headings":"","what":"Used to store cached Measure Unit Reference Table — WQXunitRef_Cached","title":"Used to store cached Measure Unit Reference Table — WQXunitRef_Cached","text":"Used store cached Measure Unit Reference Table","code":""},{"path":"usepa.github.io/TADA/reference/WQXunitRef_Cached.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Used to store cached Measure Unit Reference Table — WQXunitRef_Cached","text":"","code":"WQXunitRef_Cached"},{"path":"usepa.github.io/TADA/reference/WQXunitRef_Cached.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Used to store cached Measure Unit Reference Table — WQXunitRef_Cached","text":"object class NULL length 0.","code":""}]
