#' @return Full TADA dataset with flags or data removed
#' @export
MediaNotWater <- function(.data, clean = TRUE){
field.names <- colnames(.data)
if(TADAprofileCheck(.data) == FALSE) {
stop("The dataframe does not contain the required fields to use TADA.
Use either the full physical/chemical profile downloaded from WQP or
download the TADA profile template available on the EPA TADA webpage.")
}
if(TADAprofileCheck(.data) == TRUE) {
if(clean == TRUE) {
# Remove all data where media name does NOT equal WATER (ignore punctuation)
.data <- dplyr::filter(.data, ActivityMediaName != "water", "Water")
return(clean.data)
}
if(clean == FALSE) {
# Remove type 1 duplicate
flag.data <- dplyr::filter(clean.data, ActivityMediaName != "water", "Water")
return(flag.data)
} else {
stop("clean argument must be Boolean (TRUE or FALSE)")
}
}
}
MediaNotWater(WQP.raw)
#' MediaNotWater
#'
#' **Placeholder text for function description
#'
#' @param .data TADA dataset
#' @param clean Clean argument indicates whether flag columns should be appended
#' to the data (clean = FALSE), or flagged data is transformed/filtered from the
#' dataset and no columns are appended (clean = TRUE).
#'
#' @return Full TADA dataset with flags or data removed
#' @export
MediaNotWater <- function(.data, clean = TRUE){
field.names <- colnames(.data)
if(TADAprofileCheck(.data) == FALSE) {
stop("The dataframe does not contain the required fields to use TADA.
Use either the full physical/chemical profile downloaded from WQP or
download the TADA profile template available on the EPA TADA webpage.")
}
if(TADAprofileCheck(.data) == TRUE) {
if(clean == TRUE) {
# Remove all data where media name does NOT equal WATER (ignore punctuation)
.data <- dplyr::filter(.data, ActivityMediaName != c("water", "Water"))
return(clean.data)
}
if(clean == FALSE) {
# Remove type 1 duplicate
flag.data <- dplyr::filter(clean.data, ActivityMediaName != c("water", "Water"))
return(flag.data)
} else {
stop("clean argument must be Boolean (TRUE or FALSE)")
}
}
}
MediaNotWater(WQP.raw)
#' MediaNotWater
#'
#' **Placeholder text for function description
#'
#' @param data TADA dataset
#' @param clean Clean argument indicates whether flag columns should be appended
#' to the data (clean = FALSE), or flagged data is transformed/filtered from the
#' dataset and no columns are appended (clean = TRUE).
#'
#' @return Full TADA dataset with flags or data removed
#' @export
MediaNotWater <- function(data, clean = TRUE){
field.names <- colnames(data)
if(TADAprofileCheck(data) == FALSE) {
stop("The dataframe does not contain the required fields to use TADA.
Use either the full physical/chemical profile downloaded from WQP or
download the TADA profile template available on the EPA TADA webpage.")
}
if(TADAprofileCheck(data) == TRUE) {
if(clean == TRUE) {
# Remove all data where media name does NOT equal WATER (ignore punctuation)
cleandata <- dplyr::filter(data, ActivityMediaName != c("water", "Water"))
return(cleandata)
}
if(clean == FALSE) {
# Remove type 1 duplicate
flagdata <- dplyr::filter(data, ActivityMediaName != c("water", "Water"))
return(flagdata)
} else {
stop("clean argument must be Boolean (TRUE or FALSE)")
}
}
}
MediaNotWater(WQP.raw)
WQP.clean= MediaNotWater(WQP.raw, clean= TRUE)
WQP.flag= MediaNotWater(WQP.raw, clean= FALSE)
#' MediaNotWater
#'
#' **Placeholder text for function description
#'
#' @param data TADA dataset
#' @param clean Clean argument indicates whether flag columns should be appended
#' to the data (clean = FALSE), or flagged data is transformed/filtered from the
#' dataset and no columns are appended (clean = TRUE).
#'
#' @return Full TADA dataset with flags or data removed
#' @export
MediaNotWater <- function(data, clean = TRUE){
field.names <- colnames(data)
if(TADAprofileCheck(data) == FALSE) {
stop("The dataframe does not contain the required fields to use TADA.
Use either the full physical/chemical profile downloaded from WQP or
download the TADA profile template available on the EPA TADA webpage.")
}
if(TADAprofileCheck(data) == TRUE) {
if(clean == TRUE) {
# Remove all data where media name does NOT equal WATER (ignore punctuation)
cleandata <- dplyr::filter(data, ActivityMediaName != c("water"))
return(cleandata)
}
if(clean == FALSE) {
# Remove type 1 duplicate
flagdata <- dplyr::filter(data, ActivityMediaName != c("water"))
return(flagdata)
} else {
stop("clean argument must be Boolean (TRUE or FALSE)")
}
}
}
#' MediaNotWater
#'
#' **Placeholder text for function description
#'
#' @param data TADA dataset
#' @param clean Clean argument indicates whether flag columns should be appended
#' to the data (clean = FALSE), or flagged data is transformed/filtered from the
#' dataset and no columns are appended (clean = TRUE).
#'
#' @return Full TADA dataset with flags or data removed
#' @export
MediaNotWater <- function(data, clean = TRUE){
field.names <- colnames(data)
if(TADAprofileCheck(data) == FALSE) {
stop("The dataframe does not contain the required fields to use TADA.
Use either the full physical/chemical profile downloaded from WQP or
download the TADA profile template available on the EPA TADA webpage.")
}
if(TADAprofileCheck(data) == TRUE) {
if(clean == TRUE) {
# Remove all data where media name does NOT equal WATER (ignore punctuation)
cleandata <- dplyr::filter(data, ActivityMediaName != "water")
return(cleandata)
}
if(clean == FALSE) {
# Remove type 1 duplicate
flagdata <- dplyr::filter(data, ActivityMediaName != "water")
return(flagdata)
} else {
stop("clean argument must be Boolean (TRUE or FALSE)")
}
}
}
WQP.clean = MediaNotWater(WQP.raw, clean= TRUE)
WQP.clean = MediaNotWater(WQP.raw, clean= TRUE)
WQP.clean = MediaNotWater(WQP.raw, clean= FALSE)
WQP.flag = MediaNotWater(WQP.raw, clean= TRUE)
#' MediaNotWater
#'
#' **Placeholder text for function description
#'
#' @param data TADA dataset
#' @param clean Clean argument indicates whether flag columns should be appended
#' to the data (clean = FALSE), or flagged data is transformed/filtered from the
#' dataset and no columns are appended (clean = TRUE).
#'
#' @return Full TADA dataset with flags or data removed
#' @export
MediaNotWater <- function(data, clean = TRUE){
field.names <- colnames(data)
if(TADAprofileCheck(data) == FALSE) {
stop("The dataframe does not contain the required fields to use TADA.
Use either the full physical/chemical profile downloaded from WQP or
download the TADA profile template available on the EPA TADA webpage.")
}
if(TADAprofileCheck(data) == TRUE) {
if(clean == TRUE) {
# Remove all data where media name does NOT equal WATER (ignore punctuation)
cleandata <- dplyr::filter(data, ActivityMediaName != "water")
return(cleandata)
}
if(clean == FALSE) {
# Remove type 1 duplicate
flagdata <- dplyr::filter(data, ActivityMediaName != "water")
return(flagdata)
} else {
stop("clean argument must be Boolean (TRUE or FALSE)")
}
}
}
#' MediaNotWater
#'
#' **Placeholder text for function description
#'
#' @param data TADA dataset
#' @param clean Clean argument indicates whether flag columns should be appended
#' to the data (clean = FALSE), or flagged data is transformed/filtered from the
#' dataset and no columns are appended (clean = TRUE).
#'
#' @return Full TADA dataset with flags or data removed
#' @export
MediaNotWater <- function(data, clean = TRUE){
field.names <- colnames(data)
if(TADAprofileCheck(data) == FALSE) {
stop("The dataframe does not contain the required fields to use TADA.
Use either the full physical/chemical profile downloaded from WQP or
download the TADA profile template available on the EPA TADA webpage.")
}
if(TADAprofileCheck(data) == TRUE) {
if(clean == TRUE) {
# Remove all data where media name does NOT equal WATER (ignore punctuation)
cleandata <- dplyr::filter(data, ActivityMediaName != "Water")
return(cleandata)
}
if(clean == FALSE) {
# Remove type 1 duplicate
flagdata <- dplyr::filter(data, ActivityMediaName != "Water")
return(flagdata)
} else {
stop("clean argument must be Boolean (TRUE or FALSE)")
}
}
}
WQP.clean = MediaNotWater(WQP.raw, clean= TRUE)
WQP.flag = MediaNotWater(WQP.raw, clean= FALSE)
View(WQP.flag)
#' MediaNotWater
#'
#' **Placeholder text for function description
#'
#' @param data TADA dataset
#' @param clean Clean argument indicates whether flag columns should be appended
#' to the data (clean = FALSE), or flagged data is transformed/filtered from the
#' dataset and no columns are appended (clean = TRUE).
#'
#' @return Full TADA dataset with flags or data removed
#' @export
MediaNotWater <- function(data, clean = TRUE){
field.names <- colnames(data)
if(TADAprofileCheck(data) == FALSE) {
stop("The dataframe does not contain the required fields to use TADA.
Use either the full physical/chemical profile downloaded from WQP or
download the TADA profile template available on the EPA TADA webpage.")
}
if(TADAprofileCheck(data) == TRUE) {
if(clean == TRUE) {
# Remove all data where media name does NOT equal WATER (ignore punctuation)
cleandata <- dplyr::filter(data, ActivityMediaName != "Water")
return(cleandata)
}
if(clean == FALSE) {
# NEED TO EDIT TO ADD FLAGS, currently removes other water Water
flagdata <- dplyr::filter(data, ActivityMediaName != "water")
return(flagdata)
} else {
stop("clean argument must be Boolean (TRUE or FALSE)")
}
}
}
WQP.noWater = MediaNotWater(WQP.raw, clean= TRUE)
WQP.nowater = MediaNotWater(WQP.raw, clean= FALSE)
View(WQP.raw)
View(WQP.raw)
WQP.raw <- readWQPdata(organization = c("USGS-NJ", "21NJBCH"), Sitetype = c(
"Lake, Reservoir, Impoundment", "Stream"), Samplemedia = c("water", "Water"),
startDate = "01-01-2017", endDate = "01-01-2022")
#' MediaNotWater
#'
#' **Placeholder text for function description
#'
#' @param data TADA dataset
#' @param clean Clean argument indicates whether flag columns should be appended
#' to the data (clean = FALSE), or flagged data is transformed/filtered from the
#' dataset and no columns are appended (clean = TRUE).
#'
#' @return Full TADA dataset with flags or data removed
#' @export
MediaNotWater <- function(data, clean = TRUE){
field.names <- colnames(data)
if(TADAprofileCheck(data) == FALSE) {
stop("The dataframe does not contain the required fields to use TADA.
Use either the full physical/chemical profile downloaded from WQP or
download the TADA profile template available on the EPA TADA webpage.")
}
if(TADAprofileCheck(data) == TRUE) {
if(clean == TRUE) {
# Remove all data where media name does NOT equal WATER (ignore punctuation)
cleandata <- dplyr::filter(data, ActivityMediaName != "Water")
return(cleandata)
}
if(clean == FALSE) {
# NEED TO EDIT TO ADD FLAGS, currently removes other water Water
flagdata <- dplyr::filter(data, ActivityMediaName != "water")
return(flagdata)
} else {
stop("clean argument must be Boolean (TRUE or FALSE)")
}
}
}
cleandata = MediaNotWater(WQP.clean, clean=TRUE)
View(cleandata)
#' MediaNotWater
#'
#' **Placeholder text for function description
#'
#' @param data TADA dataset
#' @param clean Clean argument indicates whether flag columns should be appended
#' to the data (clean = FALSE), or flagged data is transformed/filtered from the
#' dataset and no columns are appended (clean = TRUE).
#'
#' @return Full TADA dataset with flags or data removed
#' @export
MediaNotWater <- function(data, clean = TRUE){
field.names <- colnames(data)
if(TADAprofileCheck(data) == FALSE) {
stop("The dataframe does not contain the required fields to use TADA.
Use either the full physical/chemical profile downloaded from WQP or
download the TADA profile template available on the EPA TADA webpage.")
}
if(TADAprofileCheck(data) == TRUE) {
if(clean == TRUE) {
# Remove all data where media name does NOT equal WATER (ignore punctuation)
cleandata <- dplyr::filter(data, ActivityMediaName = "Water")
return(cleandata)
}
if(clean == FALSE) {
# NEED TO EDIT TO ADD FLAGS, currently removes other water Water
flagdata <- dplyr::filter(data, ActivityMediaName = "water")
return(flagdata)
} else {
stop("clean argument must be Boolean (TRUE or FALSE)")
}
}
}
#' MediaNotWater
#'
#' **Placeholder text for function description
#'
#' @param data TADA dataset
#' @param clean Clean argument indicates whether flag columns should be appended
#' to the data (clean = FALSE), or flagged data is transformed/filtered from the
#' dataset and no columns are appended (clean = TRUE).
#'
#' @return Full TADA dataset with flags or data removed
#' @export
MediaNotWater <- function(data, clean = TRUE){
field.names <- colnames(data)
if(TADAprofileCheck(data) == FALSE) {
stop("The dataframe does not contain the required fields to use TADA.
Use either the full physical/chemical profile downloaded from WQP or
download the TADA profile template available on the EPA TADA webpage.")
}
if(TADAprofileCheck(data) == TRUE) {
if(clean == TRUE) {
# Remove all data where media name does NOT equal WATER (ignore punctuation)
cleandata <- dplyr::filter(data, ActivityMediaName = c("Water", "water"))
return(cleandata)
}
if(clean == FALSE) {
# NEED TO EDIT TO ADD FLAGS, currently removes other water Water
flagdata <- dplyr::filter(data, ActivityMediaName = "water")
return(flagdata)
} else {
stop("clean argument must be Boolean (TRUE or FALSE)")
}
}
}
clean2=MediaNotWater(WQP.raw, clean=TRUE)
#' MediaNotWater
#'
#' **Placeholder text for function description
#'
#' @param data TADA dataset
#' @param clean Clean argument indicates whether flag columns should be appended
#' to the data (clean = FALSE), or flagged data is transformed/filtered from the
#' dataset and no columns are appended (clean = TRUE).
#'
#' @return Full TADA dataset with flags or data removed
#' @export
MediaNotWater <- function(data, clean = TRUE){
field.names <- colnames(data)
if(TADAprofileCheck(data) == FALSE) {
stop("The dataframe does not contain the required fields to use TADA.
Use either the full physical/chemical profile downloaded from WQP or
download the TADA profile template available on the EPA TADA webpage.")
}
if(TADAprofileCheck(data) == TRUE) {
if(clean == TRUE) {
# Remove all data where media name does NOT equal WATER (ignore punctuation)
cleandata <- dplyr::filter(data, ActivityMediaName == c("Water", "water"))
return(cleandata)
}
if(clean == FALSE) {
# NEED TO EDIT TO ADD FLAGS, currently removes other water Water
flagdata <- dplyr::filter(data, ActivityMediaName = "water")
return(flagdata)
} else {
stop("clean argument must be Boolean (TRUE or FALSE)")
}
}
}
clean2=MediaNotWater(WQP.raw, clean=TRUE)
#' MediaNotWater
#'
#' **Placeholder text for function description
#'
#' @param data TADA dataset
#' @param clean Clean argument indicates whether flag columns should be appended
#' to the data (clean = FALSE), or flagged data is transformed/filtered from the
#' dataset and no columns are appended (clean = TRUE).
#'
#' @return Full TADA dataset with flags or data removed
#' @export
MediaNotWater <- function(data, clean = TRUE){
field.names <- colnames(data)
if(TADAprofileCheck(data) == FALSE) {
stop("The dataframe does not contain the required fields to use TADA.
Use either the full physical/chemical profile downloaded from WQP or
download the TADA profile template available on the EPA TADA webpage.")
}
if(TADAprofileCheck(data) == TRUE) {
if(clean == TRUE) {
# Remove all data where media name does NOT equal WATER (ignore punctuation)
cleandata <- dplyr::filter(data, ActivityMediaName = "Water")
return(cleandata)
}
if(clean == FALSE) {
# NEED TO EDIT TO ADD FLAGS, currently removes other water Water
flagdata <- dplyr::filter(data, ActivityMediaName = "water")
return(flagdata)
} else {
stop("clean argument must be Boolean (TRUE or FALSE)")
}
}
}
clean2=MediaNotWater(WQP.raw, clean=TRUE)
#' MediaNotWater
#'
#' **Placeholder text for function description
#'
#' @param data TADA dataset
#' @param clean Clean argument indicates whether flag columns should be appended
#' to the data (clean = FALSE), or flagged data is transformed/filtered from the
#' dataset and no columns are appended (clean = TRUE).
#'
#' @return Full TADA dataset with flags or data removed
#' @export
MediaNotWater <- function(data, clean = TRUE){
field.names <- colnames(data)
if(TADAprofileCheck(data) == FALSE) {
stop("The dataframe does not contain the required fields to use TADA.
Use either the full physical/chemical profile downloaded from WQP or
download the TADA profile template available on the EPA TADA webpage.")
}
if(TADAprofileCheck(data) == TRUE) {
if(clean == TRUE) {
# Remove all data where media name does NOT equal WATER (ignore punctuation)
cleandata <- dplyr::filter(data, ActivityMediaName == "Water")
return(cleandata)
}
if(clean == FALSE) {
# NEED TO EDIT TO ADD FLAGS, currently removes other water Water
flagdata <- dplyr::filter(data, ActivityMediaName == "water")
return(flagdata)
} else {
stop("clean argument must be Boolean (TRUE or FALSE)")
}
}
}
clean2=MediaNotWater(WQP.raw, clean=TRUE)
clean3=MediaNotWater(WQP.raw, clean=FALSE)
#' MediaNotWater
#'
#' **Placeholder text for function description
#'
#' @param data TADA dataset
#' @param clean Clean argument indicates whether flag columns should be appended
#' to the data (clean = FALSE), or flagged data is transformed/filtered from the
#' dataset and no columns are appended (clean = TRUE).
#'
#' @return Full TADA dataset with flags or data removed
#' @export
MediaNotWater <- function(data, clean = TRUE){
field.names <- colnames(data)
if(TADAprofileCheck(data) == FALSE) {
stop("The dataframe does not contain the required fields to use TADA.
Use either the full physical/chemical profile downloaded from WQP or
download the TADA profile template available on the EPA TADA webpage.")
}
if(TADAprofileCheck(data) == TRUE) {
if(clean == TRUE) {
# Remove all data where media name does NOT equal WATER (ignore punctuation)
cleandata <- dplyr::filter(data, ActivityMediaName == "Water")
return(cleandata)
}
if(clean == FALSE) {
# NEED TO EDIT TO ADD FLAGS, currently removes other water Water
flagdata <- dplyr::filter(data, ActivityMediaName == "water")
return(flagdata)
} else {
stop("clean argument must be Boolean (TRUE or FALSE)")
}
}
}
